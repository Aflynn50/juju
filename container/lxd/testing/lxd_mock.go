// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/canonical/lxd/client (interfaces: Operation,RemoteOperation,Server,ImageServer,InstanceServer)
//
// Generated by this command:
//
//	mockgen -package testing -destination lxd_mock.go -write_package_comment=false github.com/canonical/lxd/client Operation,RemoteOperation,Server,ImageServer,InstanceServer
//

package testing

import (
	context "context"
	io "io"
	net "net"
	http "net/http"
	reflect "reflect"

	lxd "github.com/canonical/lxd/client"
	api "github.com/canonical/lxd/shared/api"
	websocket "github.com/gorilla/websocket"
	sftp "github.com/pkg/sftp"
	gomock "go.uber.org/mock/gomock"
)

// MockOperation is a mock of Operation interface.
type MockOperation struct {
	ctrl     *gomock.Controller
	recorder *MockOperationMockRecorder
	isgomock struct{}
}

// MockOperationMockRecorder is the mock recorder for MockOperation.
type MockOperationMockRecorder struct {
	mock *MockOperation
}

// NewMockOperation creates a new mock instance.
func NewMockOperation(ctrl *gomock.Controller) *MockOperation {
	mock := &MockOperation{ctrl: ctrl}
	mock.recorder = &MockOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOperation) EXPECT() *MockOperationMockRecorder {
	return m.recorder
}

// AddHandler mocks base method.
func (m *MockOperation) AddHandler(function func(api.Operation)) (*lxd.EventTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHandler", function)
	ret0, _ := ret[0].(*lxd.EventTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddHandler indicates an expected call of AddHandler.
func (mr *MockOperationMockRecorder) AddHandler(function any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandler", reflect.TypeOf((*MockOperation)(nil).AddHandler), function)
}

// Cancel mocks base method.
func (m *MockOperation) Cancel() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cancel")
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel.
func (mr *MockOperationMockRecorder) Cancel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockOperation)(nil).Cancel))
}

// Get mocks base method.
func (m *MockOperation) Get() api.Operation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get")
	ret0, _ := ret[0].(api.Operation)
	return ret0
}

// Get indicates an expected call of Get.
func (mr *MockOperationMockRecorder) Get() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOperation)(nil).Get))
}

// GetWebsocket mocks base method.
func (m *MockOperation) GetWebsocket(secret string) (*websocket.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebsocket", secret)
	ret0, _ := ret[0].(*websocket.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWebsocket indicates an expected call of GetWebsocket.
func (mr *MockOperationMockRecorder) GetWebsocket(secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebsocket", reflect.TypeOf((*MockOperation)(nil).GetWebsocket), secret)
}

// Refresh mocks base method.
func (m *MockOperation) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockOperationMockRecorder) Refresh() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockOperation)(nil).Refresh))
}

// RemoveHandler mocks base method.
func (m *MockOperation) RemoveHandler(target *lxd.EventTarget) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveHandler", target)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveHandler indicates an expected call of RemoveHandler.
func (mr *MockOperationMockRecorder) RemoveHandler(target any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveHandler", reflect.TypeOf((*MockOperation)(nil).RemoveHandler), target)
}

// Wait mocks base method.
func (m *MockOperation) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockOperationMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockOperation)(nil).Wait))
}

// WaitContext mocks base method.
func (m *MockOperation) WaitContext(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitContext", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// WaitContext indicates an expected call of WaitContext.
func (mr *MockOperationMockRecorder) WaitContext(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitContext", reflect.TypeOf((*MockOperation)(nil).WaitContext), ctx)
}

// MockRemoteOperation is a mock of RemoteOperation interface.
type MockRemoteOperation struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteOperationMockRecorder
	isgomock struct{}
}

// MockRemoteOperationMockRecorder is the mock recorder for MockRemoteOperation.
type MockRemoteOperationMockRecorder struct {
	mock *MockRemoteOperation
}

// NewMockRemoteOperation creates a new mock instance.
func NewMockRemoteOperation(ctrl *gomock.Controller) *MockRemoteOperation {
	mock := &MockRemoteOperation{ctrl: ctrl}
	mock.recorder = &MockRemoteOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteOperation) EXPECT() *MockRemoteOperationMockRecorder {
	return m.recorder
}

// AddHandler mocks base method.
func (m *MockRemoteOperation) AddHandler(function func(api.Operation)) (*lxd.EventTarget, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHandler", function)
	ret0, _ := ret[0].(*lxd.EventTarget)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddHandler indicates an expected call of AddHandler.
func (mr *MockRemoteOperationMockRecorder) AddHandler(function any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHandler", reflect.TypeOf((*MockRemoteOperation)(nil).AddHandler), function)
}

// CancelTarget mocks base method.
func (m *MockRemoteOperation) CancelTarget() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTarget")
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelTarget indicates an expected call of CancelTarget.
func (mr *MockRemoteOperationMockRecorder) CancelTarget() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTarget", reflect.TypeOf((*MockRemoteOperation)(nil).CancelTarget))
}

// GetTarget mocks base method.
func (m *MockRemoteOperation) GetTarget() (*api.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTarget")
	ret0, _ := ret[0].(*api.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTarget indicates an expected call of GetTarget.
func (mr *MockRemoteOperationMockRecorder) GetTarget() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTarget", reflect.TypeOf((*MockRemoteOperation)(nil).GetTarget))
}

// Wait mocks base method.
func (m *MockRemoteOperation) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockRemoteOperationMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockRemoteOperation)(nil).Wait))
}

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
	isgomock struct{}
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// Disconnect mocks base method.
func (m *MockServer) Disconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect")
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockServerMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockServer)(nil).Disconnect))
}

// DoHTTP mocks base method.
func (m *MockServer) DoHTTP(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoHTTP", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoHTTP indicates an expected call of DoHTTP.
func (mr *MockServerMockRecorder) DoHTTP(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoHTTP", reflect.TypeOf((*MockServer)(nil).DoHTTP), req)
}

// GetConnectionInfo mocks base method.
func (m *MockServer) GetConnectionInfo() (*lxd.ConnectionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionInfo")
	ret0, _ := ret[0].(*lxd.ConnectionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionInfo indicates an expected call of GetConnectionInfo.
func (mr *MockServerMockRecorder) GetConnectionInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionInfo", reflect.TypeOf((*MockServer)(nil).GetConnectionInfo))
}

// GetHTTPClient mocks base method.
func (m *MockServer) GetHTTPClient() (*http.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPClient")
	ret0, _ := ret[0].(*http.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHTTPClient indicates an expected call of GetHTTPClient.
func (mr *MockServerMockRecorder) GetHTTPClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPClient", reflect.TypeOf((*MockServer)(nil).GetHTTPClient))
}

// MockImageServer is a mock of ImageServer interface.
type MockImageServer struct {
	ctrl     *gomock.Controller
	recorder *MockImageServerMockRecorder
	isgomock struct{}
}

// MockImageServerMockRecorder is the mock recorder for MockImageServer.
type MockImageServerMockRecorder struct {
	mock *MockImageServer
}

// NewMockImageServer creates a new mock instance.
func NewMockImageServer(ctrl *gomock.Controller) *MockImageServer {
	mock := &MockImageServer{ctrl: ctrl}
	mock.recorder = &MockImageServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageServer) EXPECT() *MockImageServerMockRecorder {
	return m.recorder
}

// Disconnect mocks base method.
func (m *MockImageServer) Disconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect")
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockImageServerMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockImageServer)(nil).Disconnect))
}

// DoHTTP mocks base method.
func (m *MockImageServer) DoHTTP(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoHTTP", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoHTTP indicates an expected call of DoHTTP.
func (mr *MockImageServerMockRecorder) DoHTTP(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoHTTP", reflect.TypeOf((*MockImageServer)(nil).DoHTTP), req)
}

// ExportImage mocks base method.
func (m *MockImageServer) ExportImage(fingerprint string, image api.ImageExportPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportImage", fingerprint, image)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportImage indicates an expected call of ExportImage.
func (mr *MockImageServerMockRecorder) ExportImage(fingerprint, image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportImage", reflect.TypeOf((*MockImageServer)(nil).ExportImage), fingerprint, image)
}

// GetConnectionInfo mocks base method.
func (m *MockImageServer) GetConnectionInfo() (*lxd.ConnectionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionInfo")
	ret0, _ := ret[0].(*lxd.ConnectionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionInfo indicates an expected call of GetConnectionInfo.
func (mr *MockImageServerMockRecorder) GetConnectionInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionInfo", reflect.TypeOf((*MockImageServer)(nil).GetConnectionInfo))
}

// GetHTTPClient mocks base method.
func (m *MockImageServer) GetHTTPClient() (*http.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPClient")
	ret0, _ := ret[0].(*http.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHTTPClient indicates an expected call of GetHTTPClient.
func (mr *MockImageServerMockRecorder) GetHTTPClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPClient", reflect.TypeOf((*MockImageServer)(nil).GetHTTPClient))
}

// GetImage mocks base method.
func (m *MockImageServer) GetImage(fingerprint string) (*api.Image, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", fingerprint)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImage indicates an expected call of GetImage.
func (mr *MockImageServerMockRecorder) GetImage(fingerprint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockImageServer)(nil).GetImage), fingerprint)
}

// GetImageAlias mocks base method.
func (m *MockImageServer) GetImageAlias(name string) (*api.ImageAliasesEntry, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAlias", name)
	ret0, _ := ret[0].(*api.ImageAliasesEntry)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImageAlias indicates an expected call of GetImageAlias.
func (mr *MockImageServerMockRecorder) GetImageAlias(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAlias", reflect.TypeOf((*MockImageServer)(nil).GetImageAlias), name)
}

// GetImageAliasArchitectures mocks base method.
func (m *MockImageServer) GetImageAliasArchitectures(imageType, name string) (map[string]*api.ImageAliasesEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasArchitectures", imageType, name)
	ret0, _ := ret[0].(map[string]*api.ImageAliasesEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliasArchitectures indicates an expected call of GetImageAliasArchitectures.
func (mr *MockImageServerMockRecorder) GetImageAliasArchitectures(imageType, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasArchitectures", reflect.TypeOf((*MockImageServer)(nil).GetImageAliasArchitectures), imageType, name)
}

// GetImageAliasNames mocks base method.
func (m *MockImageServer) GetImageAliasNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliasNames indicates an expected call of GetImageAliasNames.
func (mr *MockImageServerMockRecorder) GetImageAliasNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasNames", reflect.TypeOf((*MockImageServer)(nil).GetImageAliasNames))
}

// GetImageAliasType mocks base method.
func (m *MockImageServer) GetImageAliasType(imageType, name string) (*api.ImageAliasesEntry, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasType", imageType, name)
	ret0, _ := ret[0].(*api.ImageAliasesEntry)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImageAliasType indicates an expected call of GetImageAliasType.
func (mr *MockImageServerMockRecorder) GetImageAliasType(imageType, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasType", reflect.TypeOf((*MockImageServer)(nil).GetImageAliasType), imageType, name)
}

// GetImageAliases mocks base method.
func (m *MockImageServer) GetImageAliases() ([]api.ImageAliasesEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliases")
	ret0, _ := ret[0].([]api.ImageAliasesEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliases indicates an expected call of GetImageAliases.
func (mr *MockImageServerMockRecorder) GetImageAliases() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliases", reflect.TypeOf((*MockImageServer)(nil).GetImageAliases))
}

// GetImageFile mocks base method.
func (m *MockImageServer) GetImageFile(fingerprint string, req lxd.ImageFileRequest) (*lxd.ImageFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageFile", fingerprint, req)
	ret0, _ := ret[0].(*lxd.ImageFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageFile indicates an expected call of GetImageFile.
func (mr *MockImageServerMockRecorder) GetImageFile(fingerprint, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageFile", reflect.TypeOf((*MockImageServer)(nil).GetImageFile), fingerprint, req)
}

// GetImageFingerprints mocks base method.
func (m *MockImageServer) GetImageFingerprints() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageFingerprints")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageFingerprints indicates an expected call of GetImageFingerprints.
func (mr *MockImageServerMockRecorder) GetImageFingerprints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageFingerprints", reflect.TypeOf((*MockImageServer)(nil).GetImageFingerprints))
}

// GetImageSecret mocks base method.
func (m *MockImageServer) GetImageSecret(fingerprint string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageSecret", fingerprint)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageSecret indicates an expected call of GetImageSecret.
func (mr *MockImageServerMockRecorder) GetImageSecret(fingerprint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageSecret", reflect.TypeOf((*MockImageServer)(nil).GetImageSecret), fingerprint)
}

// GetImages mocks base method.
func (m *MockImageServer) GetImages() ([]api.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImages")
	ret0, _ := ret[0].([]api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages.
func (mr *MockImageServerMockRecorder) GetImages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockImageServer)(nil).GetImages))
}

// GetImagesAllProjects mocks base method.
func (m *MockImageServer) GetImagesAllProjects() ([]api.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesAllProjects")
	ret0, _ := ret[0].([]api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesAllProjects indicates an expected call of GetImagesAllProjects.
func (mr *MockImageServerMockRecorder) GetImagesAllProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesAllProjects", reflect.TypeOf((*MockImageServer)(nil).GetImagesAllProjects))
}

// GetImagesAllProjectsWithFilter mocks base method.
func (m *MockImageServer) GetImagesAllProjectsWithFilter(filters []string) ([]api.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesAllProjectsWithFilter", filters)
	ret0, _ := ret[0].([]api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesAllProjectsWithFilter indicates an expected call of GetImagesAllProjectsWithFilter.
func (mr *MockImageServerMockRecorder) GetImagesAllProjectsWithFilter(filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesAllProjectsWithFilter", reflect.TypeOf((*MockImageServer)(nil).GetImagesAllProjectsWithFilter), filters)
}

// GetImagesWithFilter mocks base method.
func (m *MockImageServer) GetImagesWithFilter(filters []string) ([]api.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesWithFilter", filters)
	ret0, _ := ret[0].([]api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesWithFilter indicates an expected call of GetImagesWithFilter.
func (mr *MockImageServerMockRecorder) GetImagesWithFilter(filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesWithFilter", reflect.TypeOf((*MockImageServer)(nil).GetImagesWithFilter), filters)
}

// GetPrivateImage mocks base method.
func (m *MockImageServer) GetPrivateImage(fingerprint, secret string) (*api.Image, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateImage", fingerprint, secret)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPrivateImage indicates an expected call of GetPrivateImage.
func (mr *MockImageServerMockRecorder) GetPrivateImage(fingerprint, secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateImage", reflect.TypeOf((*MockImageServer)(nil).GetPrivateImage), fingerprint, secret)
}

// GetPrivateImageFile mocks base method.
func (m *MockImageServer) GetPrivateImageFile(fingerprint, secret string, req lxd.ImageFileRequest) (*lxd.ImageFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateImageFile", fingerprint, secret, req)
	ret0, _ := ret[0].(*lxd.ImageFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateImageFile indicates an expected call of GetPrivateImageFile.
func (mr *MockImageServerMockRecorder) GetPrivateImageFile(fingerprint, secret, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateImageFile", reflect.TypeOf((*MockImageServer)(nil).GetPrivateImageFile), fingerprint, secret, req)
}

// MockInstanceServer is a mock of InstanceServer interface.
type MockInstanceServer struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceServerMockRecorder
	isgomock struct{}
}

// MockInstanceServerMockRecorder is the mock recorder for MockInstanceServer.
type MockInstanceServerMockRecorder struct {
	mock *MockInstanceServer
}

// NewMockInstanceServer creates a new mock instance.
func NewMockInstanceServer(ctrl *gomock.Controller) *MockInstanceServer {
	mock := &MockInstanceServer{ctrl: ctrl}
	mock.recorder = &MockInstanceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInstanceServer) EXPECT() *MockInstanceServerMockRecorder {
	return m.recorder
}

// ConsoleContainer mocks base method.
func (m *MockInstanceServer) ConsoleContainer(containerName string, console api.ContainerConsolePost, args *lxd.ContainerConsoleArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsoleContainer", containerName, console, args)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsoleContainer indicates an expected call of ConsoleContainer.
func (mr *MockInstanceServerMockRecorder) ConsoleContainer(containerName, console, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsoleContainer", reflect.TypeOf((*MockInstanceServer)(nil).ConsoleContainer), containerName, console, args)
}

// ConsoleInstance mocks base method.
func (m *MockInstanceServer) ConsoleInstance(instanceName string, console api.InstanceConsolePost, args *lxd.InstanceConsoleArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsoleInstance", instanceName, console, args)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsoleInstance indicates an expected call of ConsoleInstance.
func (mr *MockInstanceServerMockRecorder) ConsoleInstance(instanceName, console, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsoleInstance", reflect.TypeOf((*MockInstanceServer)(nil).ConsoleInstance), instanceName, console, args)
}

// ConsoleInstanceDynamic mocks base method.
func (m *MockInstanceServer) ConsoleInstanceDynamic(instanceName string, console api.InstanceConsolePost, args *lxd.InstanceConsoleArgs) (lxd.Operation, func(io.ReadWriteCloser) error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConsoleInstanceDynamic", instanceName, console, args)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(func(io.ReadWriteCloser) error)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ConsoleInstanceDynamic indicates an expected call of ConsoleInstanceDynamic.
func (mr *MockInstanceServerMockRecorder) ConsoleInstanceDynamic(instanceName, console, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsoleInstanceDynamic", reflect.TypeOf((*MockInstanceServer)(nil).ConsoleInstanceDynamic), instanceName, console, args)
}

// CopyContainer mocks base method.
func (m *MockInstanceServer) CopyContainer(source lxd.InstanceServer, container api.Container, args *lxd.ContainerCopyArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyContainer", source, container, args)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyContainer indicates an expected call of CopyContainer.
func (mr *MockInstanceServerMockRecorder) CopyContainer(source, container, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyContainer", reflect.TypeOf((*MockInstanceServer)(nil).CopyContainer), source, container, args)
}

// CopyContainerSnapshot mocks base method.
func (m *MockInstanceServer) CopyContainerSnapshot(source lxd.InstanceServer, containerName string, snapshot api.ContainerSnapshot, args *lxd.ContainerSnapshotCopyArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyContainerSnapshot", source, containerName, snapshot, args)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyContainerSnapshot indicates an expected call of CopyContainerSnapshot.
func (mr *MockInstanceServerMockRecorder) CopyContainerSnapshot(source, containerName, snapshot, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CopyContainerSnapshot), source, containerName, snapshot, args)
}

// CopyImage mocks base method.
func (m *MockInstanceServer) CopyImage(source lxd.ImageServer, image api.Image, args *lxd.ImageCopyArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyImage", source, image, args)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyImage indicates an expected call of CopyImage.
func (mr *MockInstanceServerMockRecorder) CopyImage(source, image, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyImage", reflect.TypeOf((*MockInstanceServer)(nil).CopyImage), source, image, args)
}

// CopyInstance mocks base method.
func (m *MockInstanceServer) CopyInstance(source lxd.InstanceServer, instance api.Instance, args *lxd.InstanceCopyArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyInstance", source, instance, args)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyInstance indicates an expected call of CopyInstance.
func (mr *MockInstanceServerMockRecorder) CopyInstance(source, instance, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyInstance", reflect.TypeOf((*MockInstanceServer)(nil).CopyInstance), source, instance, args)
}

// CopyInstanceSnapshot mocks base method.
func (m *MockInstanceServer) CopyInstanceSnapshot(source lxd.InstanceServer, instanceName string, snapshot api.InstanceSnapshot, args *lxd.InstanceSnapshotCopyArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyInstanceSnapshot", source, instanceName, snapshot, args)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyInstanceSnapshot indicates an expected call of CopyInstanceSnapshot.
func (mr *MockInstanceServerMockRecorder) CopyInstanceSnapshot(source, instanceName, snapshot, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CopyInstanceSnapshot), source, instanceName, snapshot, args)
}

// CopyStoragePoolVolume mocks base method.
func (m *MockInstanceServer) CopyStoragePoolVolume(pool string, source lxd.InstanceServer, sourcePool string, volume api.StorageVolume, args *lxd.StoragePoolVolumeCopyArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyStoragePoolVolume", pool, source, sourcePool, volume, args)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CopyStoragePoolVolume indicates an expected call of CopyStoragePoolVolume.
func (mr *MockInstanceServerMockRecorder) CopyStoragePoolVolume(pool, source, sourcePool, volume, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).CopyStoragePoolVolume), pool, source, sourcePool, volume, args)
}

// CreateAuthGroup mocks base method.
func (m *MockInstanceServer) CreateAuthGroup(groupsPost api.AuthGroupsPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAuthGroup", groupsPost)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateAuthGroup indicates an expected call of CreateAuthGroup.
func (mr *MockInstanceServerMockRecorder) CreateAuthGroup(groupsPost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAuthGroup", reflect.TypeOf((*MockInstanceServer)(nil).CreateAuthGroup), groupsPost)
}

// CreateCertificate mocks base method.
func (m *MockInstanceServer) CreateCertificate(certificate api.CertificatesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificate", certificate)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateCertificate indicates an expected call of CreateCertificate.
func (mr *MockInstanceServerMockRecorder) CreateCertificate(certificate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificate", reflect.TypeOf((*MockInstanceServer)(nil).CreateCertificate), certificate)
}

// CreateCertificateToken mocks base method.
func (m *MockInstanceServer) CreateCertificateToken(certificate api.CertificatesPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCertificateToken", certificate)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCertificateToken indicates an expected call of CreateCertificateToken.
func (mr *MockInstanceServerMockRecorder) CreateCertificateToken(certificate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCertificateToken", reflect.TypeOf((*MockInstanceServer)(nil).CreateCertificateToken), certificate)
}

// CreateClusterGroup mocks base method.
func (m *MockInstanceServer) CreateClusterGroup(group api.ClusterGroupsPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterGroup", group)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateClusterGroup indicates an expected call of CreateClusterGroup.
func (mr *MockInstanceServerMockRecorder) CreateClusterGroup(group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterGroup", reflect.TypeOf((*MockInstanceServer)(nil).CreateClusterGroup), group)
}

// CreateClusterMember mocks base method.
func (m *MockInstanceServer) CreateClusterMember(member api.ClusterMembersPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateClusterMember", member)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateClusterMember indicates an expected call of CreateClusterMember.
func (mr *MockInstanceServerMockRecorder) CreateClusterMember(member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateClusterMember", reflect.TypeOf((*MockInstanceServer)(nil).CreateClusterMember), member)
}

// CreateContainer mocks base method.
func (m *MockInstanceServer) CreateContainer(container api.ContainersPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainer", container)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainer indicates an expected call of CreateContainer.
func (mr *MockInstanceServerMockRecorder) CreateContainer(container any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainer", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainer), container)
}

// CreateContainerBackup mocks base method.
func (m *MockInstanceServer) CreateContainerBackup(containerName string, backup api.ContainerBackupsPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerBackup", containerName, backup)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainerBackup indicates an expected call of CreateContainerBackup.
func (mr *MockInstanceServerMockRecorder) CreateContainerBackup(containerName, backup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerBackup), containerName, backup)
}

// CreateContainerFile mocks base method.
func (m *MockInstanceServer) CreateContainerFile(containerName, path string, args lxd.ContainerFileArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerFile", containerName, path, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContainerFile indicates an expected call of CreateContainerFile.
func (mr *MockInstanceServerMockRecorder) CreateContainerFile(containerName, path, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerFile", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerFile), containerName, path, args)
}

// CreateContainerFromBackup mocks base method.
func (m *MockInstanceServer) CreateContainerFromBackup(args lxd.ContainerBackupArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerFromBackup", args)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainerFromBackup indicates an expected call of CreateContainerFromBackup.
func (mr *MockInstanceServerMockRecorder) CreateContainerFromBackup(args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerFromBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerFromBackup), args)
}

// CreateContainerFromImage mocks base method.
func (m *MockInstanceServer) CreateContainerFromImage(source lxd.ImageServer, image api.Image, imgcontainer api.ContainersPost) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerFromImage", source, image, imgcontainer)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainerFromImage indicates an expected call of CreateContainerFromImage.
func (mr *MockInstanceServerMockRecorder) CreateContainerFromImage(source, image, imgcontainer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerFromImage", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerFromImage), source, image, imgcontainer)
}

// CreateContainerSnapshot mocks base method.
func (m *MockInstanceServer) CreateContainerSnapshot(containerName string, snapshot api.ContainerSnapshotsPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerSnapshot", containerName, snapshot)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateContainerSnapshot indicates an expected call of CreateContainerSnapshot.
func (mr *MockInstanceServerMockRecorder) CreateContainerSnapshot(containerName, snapshot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerSnapshot), containerName, snapshot)
}

// CreateContainerTemplateFile mocks base method.
func (m *MockInstanceServer) CreateContainerTemplateFile(containerName, templateName string, content io.ReadSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateContainerTemplateFile", containerName, templateName, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateContainerTemplateFile indicates an expected call of CreateContainerTemplateFile.
func (mr *MockInstanceServerMockRecorder) CreateContainerTemplateFile(containerName, templateName, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateContainerTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).CreateContainerTemplateFile), containerName, templateName, content)
}

// CreateIdentityProviderGroup mocks base method.
func (m *MockInstanceServer) CreateIdentityProviderGroup(identityProviderGroup api.IdentityProviderGroup) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdentityProviderGroup", identityProviderGroup)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIdentityProviderGroup indicates an expected call of CreateIdentityProviderGroup.
func (mr *MockInstanceServerMockRecorder) CreateIdentityProviderGroup(identityProviderGroup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentityProviderGroup", reflect.TypeOf((*MockInstanceServer)(nil).CreateIdentityProviderGroup), identityProviderGroup)
}

// CreateIdentityTLS mocks base method.
func (m *MockInstanceServer) CreateIdentityTLS(identitiesTLSPost api.IdentitiesTLSPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdentityTLS", identitiesTLSPost)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateIdentityTLS indicates an expected call of CreateIdentityTLS.
func (mr *MockInstanceServerMockRecorder) CreateIdentityTLS(identitiesTLSPost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentityTLS", reflect.TypeOf((*MockInstanceServer)(nil).CreateIdentityTLS), identitiesTLSPost)
}

// CreateIdentityTLSToken mocks base method.
func (m *MockInstanceServer) CreateIdentityTLSToken(identitiesTLSPost api.IdentitiesTLSPost) (*api.CertificateAddToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIdentityTLSToken", identitiesTLSPost)
	ret0, _ := ret[0].(*api.CertificateAddToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateIdentityTLSToken indicates an expected call of CreateIdentityTLSToken.
func (mr *MockInstanceServerMockRecorder) CreateIdentityTLSToken(identitiesTLSPost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIdentityTLSToken", reflect.TypeOf((*MockInstanceServer)(nil).CreateIdentityTLSToken), identitiesTLSPost)
}

// CreateImage mocks base method.
func (m *MockInstanceServer) CreateImage(image api.ImagesPost, args *lxd.ImageCreateArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", image, args)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImage indicates an expected call of CreateImage.
func (mr *MockInstanceServerMockRecorder) CreateImage(image, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockInstanceServer)(nil).CreateImage), image, args)
}

// CreateImageAlias mocks base method.
func (m *MockInstanceServer) CreateImageAlias(alias api.ImageAliasesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageAlias", alias)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateImageAlias indicates an expected call of CreateImageAlias.
func (mr *MockInstanceServerMockRecorder) CreateImageAlias(alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).CreateImageAlias), alias)
}

// CreateImageSecret mocks base method.
func (m *MockInstanceServer) CreateImageSecret(fingerprint string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImageSecret", fingerprint)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImageSecret indicates an expected call of CreateImageSecret.
func (mr *MockInstanceServerMockRecorder) CreateImageSecret(fingerprint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImageSecret", reflect.TypeOf((*MockInstanceServer)(nil).CreateImageSecret), fingerprint)
}

// CreateInstance mocks base method.
func (m *MockInstanceServer) CreateInstance(instance api.InstancesPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstance", instance)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstance indicates an expected call of CreateInstance.
func (mr *MockInstanceServerMockRecorder) CreateInstance(instance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstance", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstance), instance)
}

// CreateInstanceBackup mocks base method.
func (m *MockInstanceServer) CreateInstanceBackup(instanceName string, backup api.InstanceBackupsPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceBackup", instanceName, backup)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceBackup indicates an expected call of CreateInstanceBackup.
func (mr *MockInstanceServerMockRecorder) CreateInstanceBackup(instanceName, backup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceBackup), instanceName, backup)
}

// CreateInstanceFile mocks base method.
func (m *MockInstanceServer) CreateInstanceFile(instanceName, path string, args lxd.InstanceFileArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceFile", instanceName, path, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInstanceFile indicates an expected call of CreateInstanceFile.
func (mr *MockInstanceServerMockRecorder) CreateInstanceFile(instanceName, path, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceFile", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceFile), instanceName, path, args)
}

// CreateInstanceFromBackup mocks base method.
func (m *MockInstanceServer) CreateInstanceFromBackup(args lxd.InstanceBackupArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceFromBackup", args)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceFromBackup indicates an expected call of CreateInstanceFromBackup.
func (mr *MockInstanceServerMockRecorder) CreateInstanceFromBackup(args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceFromBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceFromBackup), args)
}

// CreateInstanceFromImage mocks base method.
func (m *MockInstanceServer) CreateInstanceFromImage(source lxd.ImageServer, image api.Image, req api.InstancesPost) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceFromImage", source, image, req)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceFromImage indicates an expected call of CreateInstanceFromImage.
func (mr *MockInstanceServerMockRecorder) CreateInstanceFromImage(source, image, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceFromImage", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceFromImage), source, image, req)
}

// CreateInstanceSnapshot mocks base method.
func (m *MockInstanceServer) CreateInstanceSnapshot(instanceName string, snapshot api.InstanceSnapshotsPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceSnapshot", instanceName, snapshot)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateInstanceSnapshot indicates an expected call of CreateInstanceSnapshot.
func (mr *MockInstanceServerMockRecorder) CreateInstanceSnapshot(instanceName, snapshot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceSnapshot), instanceName, snapshot)
}

// CreateInstanceTemplateFile mocks base method.
func (m *MockInstanceServer) CreateInstanceTemplateFile(instanceName, templateName string, content io.ReadSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateInstanceTemplateFile", instanceName, templateName, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateInstanceTemplateFile indicates an expected call of CreateInstanceTemplateFile.
func (mr *MockInstanceServerMockRecorder) CreateInstanceTemplateFile(instanceName, templateName, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateInstanceTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).CreateInstanceTemplateFile), instanceName, templateName, content)
}

// CreateNetwork mocks base method.
func (m *MockInstanceServer) CreateNetwork(network api.NetworksPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetwork", network)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetwork indicates an expected call of CreateNetwork.
func (mr *MockInstanceServerMockRecorder) CreateNetwork(network any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetwork", reflect.TypeOf((*MockInstanceServer)(nil).CreateNetwork), network)
}

// CreateNetworkACL mocks base method.
func (m *MockInstanceServer) CreateNetworkACL(acl api.NetworkACLsPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkACL", acl)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetworkACL indicates an expected call of CreateNetworkACL.
func (mr *MockInstanceServerMockRecorder) CreateNetworkACL(acl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkACL", reflect.TypeOf((*MockInstanceServer)(nil).CreateNetworkACL), acl)
}

// CreateNetworkForward mocks base method.
func (m *MockInstanceServer) CreateNetworkForward(networkName string, forward api.NetworkForwardsPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkForward", networkName, forward)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetworkForward indicates an expected call of CreateNetworkForward.
func (mr *MockInstanceServerMockRecorder) CreateNetworkForward(networkName, forward any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkForward", reflect.TypeOf((*MockInstanceServer)(nil).CreateNetworkForward), networkName, forward)
}

// CreateNetworkLoadBalancer mocks base method.
func (m *MockInstanceServer) CreateNetworkLoadBalancer(networkName string, forward api.NetworkLoadBalancersPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkLoadBalancer", networkName, forward)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetworkLoadBalancer indicates an expected call of CreateNetworkLoadBalancer.
func (mr *MockInstanceServerMockRecorder) CreateNetworkLoadBalancer(networkName, forward any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkLoadBalancer", reflect.TypeOf((*MockInstanceServer)(nil).CreateNetworkLoadBalancer), networkName, forward)
}

// CreateNetworkPeer mocks base method.
func (m *MockInstanceServer) CreateNetworkPeer(networkName string, peer api.NetworkPeersPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkPeer", networkName, peer)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetworkPeer indicates an expected call of CreateNetworkPeer.
func (mr *MockInstanceServerMockRecorder) CreateNetworkPeer(networkName, peer any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkPeer", reflect.TypeOf((*MockInstanceServer)(nil).CreateNetworkPeer), networkName, peer)
}

// CreateNetworkZone mocks base method.
func (m *MockInstanceServer) CreateNetworkZone(zone api.NetworkZonesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkZone", zone)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetworkZone indicates an expected call of CreateNetworkZone.
func (mr *MockInstanceServerMockRecorder) CreateNetworkZone(zone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkZone", reflect.TypeOf((*MockInstanceServer)(nil).CreateNetworkZone), zone)
}

// CreateNetworkZoneRecord mocks base method.
func (m *MockInstanceServer) CreateNetworkZoneRecord(zone string, record api.NetworkZoneRecordsPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkZoneRecord", zone, record)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNetworkZoneRecord indicates an expected call of CreateNetworkZoneRecord.
func (mr *MockInstanceServerMockRecorder) CreateNetworkZoneRecord(zone, record any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkZoneRecord", reflect.TypeOf((*MockInstanceServer)(nil).CreateNetworkZoneRecord), zone, record)
}

// CreateProfile mocks base method.
func (m *MockInstanceServer) CreateProfile(profile api.ProfilesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProfile", profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProfile indicates an expected call of CreateProfile.
func (mr *MockInstanceServerMockRecorder) CreateProfile(profile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProfile", reflect.TypeOf((*MockInstanceServer)(nil).CreateProfile), profile)
}

// CreateProject mocks base method.
func (m *MockInstanceServer) CreateProject(project api.ProjectsPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProject", project)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateProject indicates an expected call of CreateProject.
func (mr *MockInstanceServerMockRecorder) CreateProject(project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProject", reflect.TypeOf((*MockInstanceServer)(nil).CreateProject), project)
}

// CreateStoragePool mocks base method.
func (m *MockInstanceServer) CreateStoragePool(pool api.StoragePoolsPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePool", pool)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStoragePool indicates an expected call of CreateStoragePool.
func (mr *MockInstanceServerMockRecorder) CreateStoragePool(pool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePool", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePool), pool)
}

// CreateStoragePoolBucket mocks base method.
func (m *MockInstanceServer) CreateStoragePoolBucket(poolName string, bucket api.StorageBucketsPost) (*api.StorageBucketKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolBucket", poolName, bucket)
	ret0, _ := ret[0].(*api.StorageBucketKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStoragePoolBucket indicates an expected call of CreateStoragePoolBucket.
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolBucket(poolName, bucket any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolBucket", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolBucket), poolName, bucket)
}

// CreateStoragePoolBucketKey mocks base method.
func (m *MockInstanceServer) CreateStoragePoolBucketKey(poolName, bucketName string, key api.StorageBucketKeysPost) (*api.StorageBucketKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolBucketKey", poolName, bucketName, key)
	ret0, _ := ret[0].(*api.StorageBucketKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStoragePoolBucketKey indicates an expected call of CreateStoragePoolBucketKey.
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolBucketKey(poolName, bucketName, key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolBucketKey", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolBucketKey), poolName, bucketName, key)
}

// CreateStoragePoolVolume mocks base method.
func (m *MockInstanceServer) CreateStoragePoolVolume(pool string, volume api.StorageVolumesPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolVolume", pool, volume)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStoragePoolVolume indicates an expected call of CreateStoragePoolVolume.
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolVolume(pool, volume any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolVolume), pool, volume)
}

// CreateStoragePoolVolumeBackup mocks base method.
func (m *MockInstanceServer) CreateStoragePoolVolumeBackup(pool, volName string, backup api.StoragePoolVolumeBackupsPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolVolumeBackup", pool, volName, backup)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStoragePoolVolumeBackup indicates an expected call of CreateStoragePoolVolumeBackup.
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolVolumeBackup(pool, volName, backup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolVolumeBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolVolumeBackup), pool, volName, backup)
}

// CreateStoragePoolVolumeFromBackup mocks base method.
func (m *MockInstanceServer) CreateStoragePoolVolumeFromBackup(pool string, args lxd.StoragePoolVolumeBackupArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolVolumeFromBackup", pool, args)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStoragePoolVolumeFromBackup indicates an expected call of CreateStoragePoolVolumeFromBackup.
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolVolumeFromBackup(pool, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolVolumeFromBackup", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolVolumeFromBackup), pool, args)
}

// CreateStoragePoolVolumeFromISO mocks base method.
func (m *MockInstanceServer) CreateStoragePoolVolumeFromISO(pool string, args lxd.StoragePoolVolumeBackupArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolVolumeFromISO", pool, args)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStoragePoolVolumeFromISO indicates an expected call of CreateStoragePoolVolumeFromISO.
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolVolumeFromISO(pool, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolVolumeFromISO", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolVolumeFromISO), pool, args)
}

// CreateStoragePoolVolumeSnapshot mocks base method.
func (m *MockInstanceServer) CreateStoragePoolVolumeSnapshot(pool, volumeType, volumeName string, snapshot api.StorageVolumeSnapshotsPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePoolVolumeSnapshot", pool, volumeType, volumeName, snapshot)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStoragePoolVolumeSnapshot indicates an expected call of CreateStoragePoolVolumeSnapshot.
func (mr *MockInstanceServerMockRecorder) CreateStoragePoolVolumeSnapshot(pool, volumeType, volumeName, snapshot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).CreateStoragePoolVolumeSnapshot), pool, volumeType, volumeName, snapshot)
}

// DeleteAuthGroup mocks base method.
func (m *MockInstanceServer) DeleteAuthGroup(groupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAuthGroup", groupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthGroup indicates an expected call of DeleteAuthGroup.
func (mr *MockInstanceServerMockRecorder) DeleteAuthGroup(groupName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthGroup", reflect.TypeOf((*MockInstanceServer)(nil).DeleteAuthGroup), groupName)
}

// DeleteCertificate mocks base method.
func (m *MockInstanceServer) DeleteCertificate(fingerprint string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCertificate", fingerprint)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCertificate indicates an expected call of DeleteCertificate.
func (mr *MockInstanceServerMockRecorder) DeleteCertificate(fingerprint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCertificate", reflect.TypeOf((*MockInstanceServer)(nil).DeleteCertificate), fingerprint)
}

// DeleteClusterGroup mocks base method.
func (m *MockInstanceServer) DeleteClusterGroup(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterGroup", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterGroup indicates an expected call of DeleteClusterGroup.
func (mr *MockInstanceServerMockRecorder) DeleteClusterGroup(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterGroup", reflect.TypeOf((*MockInstanceServer)(nil).DeleteClusterGroup), name)
}

// DeleteClusterMember mocks base method.
func (m *MockInstanceServer) DeleteClusterMember(name string, force bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteClusterMember", name, force)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteClusterMember indicates an expected call of DeleteClusterMember.
func (mr *MockInstanceServerMockRecorder) DeleteClusterMember(name, force any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteClusterMember", reflect.TypeOf((*MockInstanceServer)(nil).DeleteClusterMember), name, force)
}

// DeleteContainer mocks base method.
func (m *MockInstanceServer) DeleteContainer(name string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainer", name)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContainer indicates an expected call of DeleteContainer.
func (mr *MockInstanceServerMockRecorder) DeleteContainer(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainer", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainer), name)
}

// DeleteContainerBackup mocks base method.
func (m *MockInstanceServer) DeleteContainerBackup(containerName, name string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerBackup", containerName, name)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContainerBackup indicates an expected call of DeleteContainerBackup.
func (mr *MockInstanceServerMockRecorder) DeleteContainerBackup(containerName, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerBackup", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerBackup), containerName, name)
}

// DeleteContainerConsoleLog mocks base method.
func (m *MockInstanceServer) DeleteContainerConsoleLog(containerName string, args *lxd.ContainerConsoleLogArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerConsoleLog", containerName, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainerConsoleLog indicates an expected call of DeleteContainerConsoleLog.
func (mr *MockInstanceServerMockRecorder) DeleteContainerConsoleLog(containerName, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerConsoleLog", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerConsoleLog), containerName, args)
}

// DeleteContainerFile mocks base method.
func (m *MockInstanceServer) DeleteContainerFile(containerName, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerFile", containerName, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainerFile indicates an expected call of DeleteContainerFile.
func (mr *MockInstanceServerMockRecorder) DeleteContainerFile(containerName, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerFile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerFile), containerName, path)
}

// DeleteContainerLogfile mocks base method.
func (m *MockInstanceServer) DeleteContainerLogfile(name, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerLogfile", name, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainerLogfile indicates an expected call of DeleteContainerLogfile.
func (mr *MockInstanceServerMockRecorder) DeleteContainerLogfile(name, filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerLogfile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerLogfile), name, filename)
}

// DeleteContainerSnapshot mocks base method.
func (m *MockInstanceServer) DeleteContainerSnapshot(containerName, name string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerSnapshot", containerName, name)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteContainerSnapshot indicates an expected call of DeleteContainerSnapshot.
func (mr *MockInstanceServerMockRecorder) DeleteContainerSnapshot(containerName, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerSnapshot), containerName, name)
}

// DeleteContainerTemplateFile mocks base method.
func (m *MockInstanceServer) DeleteContainerTemplateFile(name, templateName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteContainerTemplateFile", name, templateName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteContainerTemplateFile indicates an expected call of DeleteContainerTemplateFile.
func (mr *MockInstanceServerMockRecorder) DeleteContainerTemplateFile(name, templateName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteContainerTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteContainerTemplateFile), name, templateName)
}

// DeleteIdentity mocks base method.
func (m *MockInstanceServer) DeleteIdentity(authenticationMethod, nameOrIdentifier string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdentity", authenticationMethod, nameOrIdentifier)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIdentity indicates an expected call of DeleteIdentity.
func (mr *MockInstanceServerMockRecorder) DeleteIdentity(authenticationMethod, nameOrIdentifier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdentity", reflect.TypeOf((*MockInstanceServer)(nil).DeleteIdentity), authenticationMethod, nameOrIdentifier)
}

// DeleteIdentityProviderGroup mocks base method.
func (m *MockInstanceServer) DeleteIdentityProviderGroup(identityProviderGroupName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteIdentityProviderGroup", identityProviderGroupName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteIdentityProviderGroup indicates an expected call of DeleteIdentityProviderGroup.
func (mr *MockInstanceServerMockRecorder) DeleteIdentityProviderGroup(identityProviderGroupName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteIdentityProviderGroup", reflect.TypeOf((*MockInstanceServer)(nil).DeleteIdentityProviderGroup), identityProviderGroupName)
}

// DeleteImage mocks base method.
func (m *MockInstanceServer) DeleteImage(fingerprint string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", fingerprint)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImage indicates an expected call of DeleteImage.
func (mr *MockInstanceServerMockRecorder) DeleteImage(fingerprint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockInstanceServer)(nil).DeleteImage), fingerprint)
}

// DeleteImageAlias mocks base method.
func (m *MockInstanceServer) DeleteImageAlias(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImageAlias", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImageAlias indicates an expected call of DeleteImageAlias.
func (mr *MockInstanceServerMockRecorder) DeleteImageAlias(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).DeleteImageAlias), name)
}

// DeleteInstance mocks base method.
func (m *MockInstanceServer) DeleteInstance(name string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstance", name)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstance indicates an expected call of DeleteInstance.
func (mr *MockInstanceServerMockRecorder) DeleteInstance(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstance", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstance), name)
}

// DeleteInstanceBackup mocks base method.
func (m *MockInstanceServer) DeleteInstanceBackup(instanceName, name string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceBackup", instanceName, name)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceBackup indicates an expected call of DeleteInstanceBackup.
func (mr *MockInstanceServerMockRecorder) DeleteInstanceBackup(instanceName, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceBackup", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceBackup), instanceName, name)
}

// DeleteInstanceConsoleLog mocks base method.
func (m *MockInstanceServer) DeleteInstanceConsoleLog(instanceName string, args *lxd.InstanceConsoleLogArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceConsoleLog", instanceName, args)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceConsoleLog indicates an expected call of DeleteInstanceConsoleLog.
func (mr *MockInstanceServerMockRecorder) DeleteInstanceConsoleLog(instanceName, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceConsoleLog", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceConsoleLog), instanceName, args)
}

// DeleteInstanceFile mocks base method.
func (m *MockInstanceServer) DeleteInstanceFile(instanceName, path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceFile", instanceName, path)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceFile indicates an expected call of DeleteInstanceFile.
func (mr *MockInstanceServerMockRecorder) DeleteInstanceFile(instanceName, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceFile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceFile), instanceName, path)
}

// DeleteInstanceLogfile mocks base method.
func (m *MockInstanceServer) DeleteInstanceLogfile(name, filename string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceLogfile", name, filename)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceLogfile indicates an expected call of DeleteInstanceLogfile.
func (mr *MockInstanceServerMockRecorder) DeleteInstanceLogfile(name, filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceLogfile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceLogfile), name, filename)
}

// DeleteInstanceSnapshot mocks base method.
func (m *MockInstanceServer) DeleteInstanceSnapshot(instanceName, name string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceSnapshot", instanceName, name)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteInstanceSnapshot indicates an expected call of DeleteInstanceSnapshot.
func (mr *MockInstanceServerMockRecorder) DeleteInstanceSnapshot(instanceName, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceSnapshot), instanceName, name)
}

// DeleteInstanceTemplateFile mocks base method.
func (m *MockInstanceServer) DeleteInstanceTemplateFile(name, templateName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInstanceTemplateFile", name, templateName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInstanceTemplateFile indicates an expected call of DeleteInstanceTemplateFile.
func (mr *MockInstanceServerMockRecorder) DeleteInstanceTemplateFile(name, templateName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInstanceTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteInstanceTemplateFile), name, templateName)
}

// DeleteNetwork mocks base method.
func (m *MockInstanceServer) DeleteNetwork(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetwork", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetwork indicates an expected call of DeleteNetwork.
func (mr *MockInstanceServerMockRecorder) DeleteNetwork(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetwork", reflect.TypeOf((*MockInstanceServer)(nil).DeleteNetwork), name)
}

// DeleteNetworkACL mocks base method.
func (m *MockInstanceServer) DeleteNetworkACL(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkACL", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkACL indicates an expected call of DeleteNetworkACL.
func (mr *MockInstanceServerMockRecorder) DeleteNetworkACL(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkACL", reflect.TypeOf((*MockInstanceServer)(nil).DeleteNetworkACL), name)
}

// DeleteNetworkForward mocks base method.
func (m *MockInstanceServer) DeleteNetworkForward(networkName, listenAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkForward", networkName, listenAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkForward indicates an expected call of DeleteNetworkForward.
func (mr *MockInstanceServerMockRecorder) DeleteNetworkForward(networkName, listenAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkForward", reflect.TypeOf((*MockInstanceServer)(nil).DeleteNetworkForward), networkName, listenAddress)
}

// DeleteNetworkLoadBalancer mocks base method.
func (m *MockInstanceServer) DeleteNetworkLoadBalancer(networkName, listenAddress string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkLoadBalancer", networkName, listenAddress)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkLoadBalancer indicates an expected call of DeleteNetworkLoadBalancer.
func (mr *MockInstanceServerMockRecorder) DeleteNetworkLoadBalancer(networkName, listenAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkLoadBalancer", reflect.TypeOf((*MockInstanceServer)(nil).DeleteNetworkLoadBalancer), networkName, listenAddress)
}

// DeleteNetworkPeer mocks base method.
func (m *MockInstanceServer) DeleteNetworkPeer(networkName, peerName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkPeer", networkName, peerName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkPeer indicates an expected call of DeleteNetworkPeer.
func (mr *MockInstanceServerMockRecorder) DeleteNetworkPeer(networkName, peerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkPeer", reflect.TypeOf((*MockInstanceServer)(nil).DeleteNetworkPeer), networkName, peerName)
}

// DeleteNetworkZone mocks base method.
func (m *MockInstanceServer) DeleteNetworkZone(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkZone", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkZone indicates an expected call of DeleteNetworkZone.
func (mr *MockInstanceServerMockRecorder) DeleteNetworkZone(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkZone", reflect.TypeOf((*MockInstanceServer)(nil).DeleteNetworkZone), name)
}

// DeleteNetworkZoneRecord mocks base method.
func (m *MockInstanceServer) DeleteNetworkZoneRecord(zone, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNetworkZoneRecord", zone, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteNetworkZoneRecord indicates an expected call of DeleteNetworkZoneRecord.
func (mr *MockInstanceServerMockRecorder) DeleteNetworkZoneRecord(zone, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNetworkZoneRecord", reflect.TypeOf((*MockInstanceServer)(nil).DeleteNetworkZoneRecord), zone, name)
}

// DeleteOperation mocks base method.
func (m *MockInstanceServer) DeleteOperation(uuid string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOperation", uuid)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOperation indicates an expected call of DeleteOperation.
func (mr *MockInstanceServerMockRecorder) DeleteOperation(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOperation", reflect.TypeOf((*MockInstanceServer)(nil).DeleteOperation), uuid)
}

// DeleteProfile mocks base method.
func (m *MockInstanceServer) DeleteProfile(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProfile", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProfile indicates an expected call of DeleteProfile.
func (mr *MockInstanceServerMockRecorder) DeleteProfile(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProfile", reflect.TypeOf((*MockInstanceServer)(nil).DeleteProfile), name)
}

// DeleteProject mocks base method.
func (m *MockInstanceServer) DeleteProject(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProject", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProject indicates an expected call of DeleteProject.
func (mr *MockInstanceServerMockRecorder) DeleteProject(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProject", reflect.TypeOf((*MockInstanceServer)(nil).DeleteProject), name)
}

// DeleteStoragePool mocks base method.
func (m *MockInstanceServer) DeleteStoragePool(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePool", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStoragePool indicates an expected call of DeleteStoragePool.
func (mr *MockInstanceServerMockRecorder) DeleteStoragePool(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePool", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePool), name)
}

// DeleteStoragePoolBucket mocks base method.
func (m *MockInstanceServer) DeleteStoragePoolBucket(poolName, bucketName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePoolBucket", poolName, bucketName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStoragePoolBucket indicates an expected call of DeleteStoragePoolBucket.
func (mr *MockInstanceServerMockRecorder) DeleteStoragePoolBucket(poolName, bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePoolBucket", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePoolBucket), poolName, bucketName)
}

// DeleteStoragePoolBucketKey mocks base method.
func (m *MockInstanceServer) DeleteStoragePoolBucketKey(poolName, bucketName, keyName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePoolBucketKey", poolName, bucketName, keyName)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStoragePoolBucketKey indicates an expected call of DeleteStoragePoolBucketKey.
func (mr *MockInstanceServerMockRecorder) DeleteStoragePoolBucketKey(poolName, bucketName, keyName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePoolBucketKey", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePoolBucketKey), poolName, bucketName, keyName)
}

// DeleteStoragePoolVolume mocks base method.
func (m *MockInstanceServer) DeleteStoragePoolVolume(pool, volType, name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePoolVolume", pool, volType, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStoragePoolVolume indicates an expected call of DeleteStoragePoolVolume.
func (mr *MockInstanceServerMockRecorder) DeleteStoragePoolVolume(pool, volType, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePoolVolume), pool, volType, name)
}

// DeleteStoragePoolVolumeBackup mocks base method.
func (m *MockInstanceServer) DeleteStoragePoolVolumeBackup(pool, volName, name string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePoolVolumeBackup", pool, volName, name)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStoragePoolVolumeBackup indicates an expected call of DeleteStoragePoolVolumeBackup.
func (mr *MockInstanceServerMockRecorder) DeleteStoragePoolVolumeBackup(pool, volName, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePoolVolumeBackup", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePoolVolumeBackup), pool, volName, name)
}

// DeleteStoragePoolVolumeSnapshot mocks base method.
func (m *MockInstanceServer) DeleteStoragePoolVolumeSnapshot(pool, volumeType, volumeName, snapshotName string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePoolVolumeSnapshot", pool, volumeType, volumeName, snapshotName)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteStoragePoolVolumeSnapshot indicates an expected call of DeleteStoragePoolVolumeSnapshot.
func (mr *MockInstanceServerMockRecorder) DeleteStoragePoolVolumeSnapshot(pool, volumeType, volumeName, snapshotName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).DeleteStoragePoolVolumeSnapshot), pool, volumeType, volumeName, snapshotName)
}

// DeleteWarning mocks base method.
func (m *MockInstanceServer) DeleteWarning(UUID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWarning", UUID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWarning indicates an expected call of DeleteWarning.
func (mr *MockInstanceServerMockRecorder) DeleteWarning(UUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWarning", reflect.TypeOf((*MockInstanceServer)(nil).DeleteWarning), UUID)
}

// Disconnect mocks base method.
func (m *MockInstanceServer) Disconnect() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Disconnect")
}

// Disconnect indicates an expected call of Disconnect.
func (mr *MockInstanceServerMockRecorder) Disconnect() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disconnect", reflect.TypeOf((*MockInstanceServer)(nil).Disconnect))
}

// DoHTTP mocks base method.
func (m *MockInstanceServer) DoHTTP(req *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoHTTP", req)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DoHTTP indicates an expected call of DoHTTP.
func (mr *MockInstanceServerMockRecorder) DoHTTP(req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoHTTP", reflect.TypeOf((*MockInstanceServer)(nil).DoHTTP), req)
}

// ExecContainer mocks base method.
func (m *MockInstanceServer) ExecContainer(containerName string, exec api.ContainerExecPost, args *lxd.ContainerExecArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecContainer", containerName, exec, args)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecContainer indicates an expected call of ExecContainer.
func (mr *MockInstanceServerMockRecorder) ExecContainer(containerName, exec, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecContainer", reflect.TypeOf((*MockInstanceServer)(nil).ExecContainer), containerName, exec, args)
}

// ExecInstance mocks base method.
func (m *MockInstanceServer) ExecInstance(instanceName string, exec api.InstanceExecPost, args *lxd.InstanceExecArgs) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecInstance", instanceName, exec, args)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExecInstance indicates an expected call of ExecInstance.
func (mr *MockInstanceServerMockRecorder) ExecInstance(instanceName, exec, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecInstance", reflect.TypeOf((*MockInstanceServer)(nil).ExecInstance), instanceName, exec, args)
}

// ExportImage mocks base method.
func (m *MockInstanceServer) ExportImage(fingerprint string, image api.ImageExportPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportImage", fingerprint, image)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportImage indicates an expected call of ExportImage.
func (mr *MockInstanceServerMockRecorder) ExportImage(fingerprint, image any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportImage", reflect.TypeOf((*MockInstanceServer)(nil).ExportImage), fingerprint, image)
}

// GetAuthGroup mocks base method.
func (m *MockInstanceServer) GetAuthGroup(groupName string) (*api.AuthGroup, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthGroup", groupName)
	ret0, _ := ret[0].(*api.AuthGroup)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetAuthGroup indicates an expected call of GetAuthGroup.
func (mr *MockInstanceServerMockRecorder) GetAuthGroup(groupName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthGroup", reflect.TypeOf((*MockInstanceServer)(nil).GetAuthGroup), groupName)
}

// GetAuthGroupNames mocks base method.
func (m *MockInstanceServer) GetAuthGroupNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthGroupNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthGroupNames indicates an expected call of GetAuthGroupNames.
func (mr *MockInstanceServerMockRecorder) GetAuthGroupNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthGroupNames", reflect.TypeOf((*MockInstanceServer)(nil).GetAuthGroupNames))
}

// GetAuthGroups mocks base method.
func (m *MockInstanceServer) GetAuthGroups() ([]api.AuthGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthGroups")
	ret0, _ := ret[0].([]api.AuthGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthGroups indicates an expected call of GetAuthGroups.
func (mr *MockInstanceServerMockRecorder) GetAuthGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthGroups", reflect.TypeOf((*MockInstanceServer)(nil).GetAuthGroups))
}

// GetCertificate mocks base method.
func (m *MockInstanceServer) GetCertificate(fingerprint string) (*api.Certificate, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificate", fingerprint)
	ret0, _ := ret[0].(*api.Certificate)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCertificate indicates an expected call of GetCertificate.
func (mr *MockInstanceServerMockRecorder) GetCertificate(fingerprint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificate", reflect.TypeOf((*MockInstanceServer)(nil).GetCertificate), fingerprint)
}

// GetCertificateFingerprints mocks base method.
func (m *MockInstanceServer) GetCertificateFingerprints() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificateFingerprints")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificateFingerprints indicates an expected call of GetCertificateFingerprints.
func (mr *MockInstanceServerMockRecorder) GetCertificateFingerprints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificateFingerprints", reflect.TypeOf((*MockInstanceServer)(nil).GetCertificateFingerprints))
}

// GetCertificates mocks base method.
func (m *MockInstanceServer) GetCertificates() ([]api.Certificate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertificates")
	ret0, _ := ret[0].([]api.Certificate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCertificates indicates an expected call of GetCertificates.
func (mr *MockInstanceServerMockRecorder) GetCertificates() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertificates", reflect.TypeOf((*MockInstanceServer)(nil).GetCertificates))
}

// GetCluster mocks base method.
func (m *MockInstanceServer) GetCluster() (*api.Cluster, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCluster")
	ret0, _ := ret[0].(*api.Cluster)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCluster indicates an expected call of GetCluster.
func (mr *MockInstanceServerMockRecorder) GetCluster() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCluster", reflect.TypeOf((*MockInstanceServer)(nil).GetCluster))
}

// GetClusterGroup mocks base method.
func (m *MockInstanceServer) GetClusterGroup(name string) (*api.ClusterGroup, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterGroup", name)
	ret0, _ := ret[0].(*api.ClusterGroup)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClusterGroup indicates an expected call of GetClusterGroup.
func (mr *MockInstanceServerMockRecorder) GetClusterGroup(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterGroup", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterGroup), name)
}

// GetClusterGroupNames mocks base method.
func (m *MockInstanceServer) GetClusterGroupNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterGroupNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterGroupNames indicates an expected call of GetClusterGroupNames.
func (mr *MockInstanceServerMockRecorder) GetClusterGroupNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterGroupNames", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterGroupNames))
}

// GetClusterGroups mocks base method.
func (m *MockInstanceServer) GetClusterGroups() ([]api.ClusterGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterGroups")
	ret0, _ := ret[0].([]api.ClusterGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterGroups indicates an expected call of GetClusterGroups.
func (mr *MockInstanceServerMockRecorder) GetClusterGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterGroups", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterGroups))
}

// GetClusterMember mocks base method.
func (m *MockInstanceServer) GetClusterMember(name string) (*api.ClusterMember, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMember", name)
	ret0, _ := ret[0].(*api.ClusterMember)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClusterMember indicates an expected call of GetClusterMember.
func (mr *MockInstanceServerMockRecorder) GetClusterMember(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMember", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterMember), name)
}

// GetClusterMemberNames mocks base method.
func (m *MockInstanceServer) GetClusterMemberNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMemberNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterMemberNames indicates an expected call of GetClusterMemberNames.
func (mr *MockInstanceServerMockRecorder) GetClusterMemberNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMemberNames", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterMemberNames))
}

// GetClusterMemberState mocks base method.
func (m *MockInstanceServer) GetClusterMemberState(name string) (*api.ClusterMemberState, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMemberState", name)
	ret0, _ := ret[0].(*api.ClusterMemberState)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClusterMemberState indicates an expected call of GetClusterMemberState.
func (mr *MockInstanceServerMockRecorder) GetClusterMemberState(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMemberState", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterMemberState), name)
}

// GetClusterMembers mocks base method.
func (m *MockInstanceServer) GetClusterMembers() ([]api.ClusterMember, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterMembers")
	ret0, _ := ret[0].([]api.ClusterMember)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetClusterMembers indicates an expected call of GetClusterMembers.
func (mr *MockInstanceServerMockRecorder) GetClusterMembers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterMembers", reflect.TypeOf((*MockInstanceServer)(nil).GetClusterMembers))
}

// GetConnectionInfo mocks base method.
func (m *MockInstanceServer) GetConnectionInfo() (*lxd.ConnectionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConnectionInfo")
	ret0, _ := ret[0].(*lxd.ConnectionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConnectionInfo indicates an expected call of GetConnectionInfo.
func (mr *MockInstanceServerMockRecorder) GetConnectionInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConnectionInfo", reflect.TypeOf((*MockInstanceServer)(nil).GetConnectionInfo))
}

// GetContainer mocks base method.
func (m *MockInstanceServer) GetContainer(name string) (*api.Container, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainer", name)
	ret0, _ := ret[0].(*api.Container)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainer indicates an expected call of GetContainer.
func (mr *MockInstanceServerMockRecorder) GetContainer(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainer", reflect.TypeOf((*MockInstanceServer)(nil).GetContainer), name)
}

// GetContainerBackup mocks base method.
func (m *MockInstanceServer) GetContainerBackup(containerName, name string) (*api.ContainerBackup, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerBackup", containerName, name)
	ret0, _ := ret[0].(*api.ContainerBackup)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerBackup indicates an expected call of GetContainerBackup.
func (mr *MockInstanceServerMockRecorder) GetContainerBackup(containerName, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerBackup", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerBackup), containerName, name)
}

// GetContainerBackupFile mocks base method.
func (m *MockInstanceServer) GetContainerBackupFile(containerName, name string, req *lxd.BackupFileRequest) (*lxd.BackupFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerBackupFile", containerName, name, req)
	ret0, _ := ret[0].(*lxd.BackupFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerBackupFile indicates an expected call of GetContainerBackupFile.
func (mr *MockInstanceServerMockRecorder) GetContainerBackupFile(containerName, name, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerBackupFile", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerBackupFile), containerName, name, req)
}

// GetContainerBackupNames mocks base method.
func (m *MockInstanceServer) GetContainerBackupNames(containerName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerBackupNames", containerName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerBackupNames indicates an expected call of GetContainerBackupNames.
func (mr *MockInstanceServerMockRecorder) GetContainerBackupNames(containerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerBackupNames", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerBackupNames), containerName)
}

// GetContainerBackups mocks base method.
func (m *MockInstanceServer) GetContainerBackups(containername string) ([]api.ContainerBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerBackups", containername)
	ret0, _ := ret[0].([]api.ContainerBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerBackups indicates an expected call of GetContainerBackups.
func (mr *MockInstanceServerMockRecorder) GetContainerBackups(containername any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerBackups", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerBackups), containername)
}

// GetContainerConsoleLog mocks base method.
func (m *MockInstanceServer) GetContainerConsoleLog(containerName string, args *lxd.ContainerConsoleLogArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerConsoleLog", containerName, args)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerConsoleLog indicates an expected call of GetContainerConsoleLog.
func (mr *MockInstanceServerMockRecorder) GetContainerConsoleLog(containerName, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerConsoleLog", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerConsoleLog), containerName, args)
}

// GetContainerFile mocks base method.
func (m *MockInstanceServer) GetContainerFile(containerName, path string) (io.ReadCloser, *lxd.ContainerFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerFile", containerName, path)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(*lxd.ContainerFileResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerFile indicates an expected call of GetContainerFile.
func (mr *MockInstanceServerMockRecorder) GetContainerFile(containerName, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerFile", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerFile), containerName, path)
}

// GetContainerLogfile mocks base method.
func (m *MockInstanceServer) GetContainerLogfile(name, filename string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerLogfile", name, filename)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerLogfile indicates an expected call of GetContainerLogfile.
func (mr *MockInstanceServerMockRecorder) GetContainerLogfile(name, filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerLogfile", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerLogfile), name, filename)
}

// GetContainerLogfiles mocks base method.
func (m *MockInstanceServer) GetContainerLogfiles(name string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerLogfiles", name)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerLogfiles indicates an expected call of GetContainerLogfiles.
func (mr *MockInstanceServerMockRecorder) GetContainerLogfiles(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerLogfiles", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerLogfiles), name)
}

// GetContainerMetadata mocks base method.
func (m *MockInstanceServer) GetContainerMetadata(name string) (*api.ImageMetadata, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerMetadata", name)
	ret0, _ := ret[0].(*api.ImageMetadata)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerMetadata indicates an expected call of GetContainerMetadata.
func (mr *MockInstanceServerMockRecorder) GetContainerMetadata(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerMetadata", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerMetadata), name)
}

// GetContainerNames mocks base method.
func (m *MockInstanceServer) GetContainerNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerNames indicates an expected call of GetContainerNames.
func (mr *MockInstanceServerMockRecorder) GetContainerNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerNames", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerNames))
}

// GetContainerSnapshot mocks base method.
func (m *MockInstanceServer) GetContainerSnapshot(containerName, name string) (*api.ContainerSnapshot, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerSnapshot", containerName, name)
	ret0, _ := ret[0].(*api.ContainerSnapshot)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerSnapshot indicates an expected call of GetContainerSnapshot.
func (mr *MockInstanceServerMockRecorder) GetContainerSnapshot(containerName, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerSnapshot), containerName, name)
}

// GetContainerSnapshotNames mocks base method.
func (m *MockInstanceServer) GetContainerSnapshotNames(containerName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerSnapshotNames", containerName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerSnapshotNames indicates an expected call of GetContainerSnapshotNames.
func (mr *MockInstanceServerMockRecorder) GetContainerSnapshotNames(containerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerSnapshotNames", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerSnapshotNames), containerName)
}

// GetContainerSnapshots mocks base method.
func (m *MockInstanceServer) GetContainerSnapshots(containerName string) ([]api.ContainerSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerSnapshots", containerName)
	ret0, _ := ret[0].([]api.ContainerSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerSnapshots indicates an expected call of GetContainerSnapshots.
func (mr *MockInstanceServerMockRecorder) GetContainerSnapshots(containerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerSnapshots", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerSnapshots), containerName)
}

// GetContainerState mocks base method.
func (m *MockInstanceServer) GetContainerState(name string) (*api.ContainerState, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerState", name)
	ret0, _ := ret[0].(*api.ContainerState)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetContainerState indicates an expected call of GetContainerState.
func (mr *MockInstanceServerMockRecorder) GetContainerState(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerState", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerState), name)
}

// GetContainerTemplateFile mocks base method.
func (m *MockInstanceServer) GetContainerTemplateFile(containerName, templateName string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerTemplateFile", containerName, templateName)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerTemplateFile indicates an expected call of GetContainerTemplateFile.
func (mr *MockInstanceServerMockRecorder) GetContainerTemplateFile(containerName, templateName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerTemplateFile), containerName, templateName)
}

// GetContainerTemplateFiles mocks base method.
func (m *MockInstanceServer) GetContainerTemplateFiles(containerName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerTemplateFiles", containerName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerTemplateFiles indicates an expected call of GetContainerTemplateFiles.
func (mr *MockInstanceServerMockRecorder) GetContainerTemplateFiles(containerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerTemplateFiles", reflect.TypeOf((*MockInstanceServer)(nil).GetContainerTemplateFiles), containerName)
}

// GetContainers mocks base method.
func (m *MockInstanceServer) GetContainers() ([]api.Container, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainers")
	ret0, _ := ret[0].([]api.Container)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainers indicates an expected call of GetContainers.
func (mr *MockInstanceServerMockRecorder) GetContainers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainers", reflect.TypeOf((*MockInstanceServer)(nil).GetContainers))
}

// GetContainersFull mocks base method.
func (m *MockInstanceServer) GetContainersFull() ([]api.ContainerFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainersFull")
	ret0, _ := ret[0].([]api.ContainerFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainersFull indicates an expected call of GetContainersFull.
func (mr *MockInstanceServerMockRecorder) GetContainersFull() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainersFull", reflect.TypeOf((*MockInstanceServer)(nil).GetContainersFull))
}

// GetCurrentIdentityInfo mocks base method.
func (m *MockInstanceServer) GetCurrentIdentityInfo() (*api.IdentityInfo, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentIdentityInfo")
	ret0, _ := ret[0].(*api.IdentityInfo)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCurrentIdentityInfo indicates an expected call of GetCurrentIdentityInfo.
func (mr *MockInstanceServerMockRecorder) GetCurrentIdentityInfo() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentIdentityInfo", reflect.TypeOf((*MockInstanceServer)(nil).GetCurrentIdentityInfo))
}

// GetEvents mocks base method.
func (m *MockInstanceServer) GetEvents() (*lxd.EventListener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvents")
	ret0, _ := ret[0].(*lxd.EventListener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvents indicates an expected call of GetEvents.
func (mr *MockInstanceServerMockRecorder) GetEvents() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvents", reflect.TypeOf((*MockInstanceServer)(nil).GetEvents))
}

// GetEventsAllProjects mocks base method.
func (m *MockInstanceServer) GetEventsAllProjects() (*lxd.EventListener, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventsAllProjects")
	ret0, _ := ret[0].(*lxd.EventListener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventsAllProjects indicates an expected call of GetEventsAllProjects.
func (mr *MockInstanceServerMockRecorder) GetEventsAllProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventsAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetEventsAllProjects))
}

// GetHTTPClient mocks base method.
func (m *MockInstanceServer) GetHTTPClient() (*http.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHTTPClient")
	ret0, _ := ret[0].(*http.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHTTPClient indicates an expected call of GetHTTPClient.
func (mr *MockInstanceServerMockRecorder) GetHTTPClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHTTPClient", reflect.TypeOf((*MockInstanceServer)(nil).GetHTTPClient))
}

// GetIdentities mocks base method.
func (m *MockInstanceServer) GetIdentities() ([]api.Identity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentities")
	ret0, _ := ret[0].([]api.Identity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentities indicates an expected call of GetIdentities.
func (mr *MockInstanceServerMockRecorder) GetIdentities() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentities", reflect.TypeOf((*MockInstanceServer)(nil).GetIdentities))
}

// GetIdentitiesByAuthenticationMethod mocks base method.
func (m *MockInstanceServer) GetIdentitiesByAuthenticationMethod(authenticationMethod string) ([]api.Identity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentitiesByAuthenticationMethod", authenticationMethod)
	ret0, _ := ret[0].([]api.Identity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentitiesByAuthenticationMethod indicates an expected call of GetIdentitiesByAuthenticationMethod.
func (mr *MockInstanceServerMockRecorder) GetIdentitiesByAuthenticationMethod(authenticationMethod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentitiesByAuthenticationMethod", reflect.TypeOf((*MockInstanceServer)(nil).GetIdentitiesByAuthenticationMethod), authenticationMethod)
}

// GetIdentity mocks base method.
func (m *MockInstanceServer) GetIdentity(authenticationMethod, nameOrIdentifier string) (*api.Identity, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentity", authenticationMethod, nameOrIdentifier)
	ret0, _ := ret[0].(*api.Identity)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIdentity indicates an expected call of GetIdentity.
func (mr *MockInstanceServerMockRecorder) GetIdentity(authenticationMethod, nameOrIdentifier any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentity", reflect.TypeOf((*MockInstanceServer)(nil).GetIdentity), authenticationMethod, nameOrIdentifier)
}

// GetIdentityAuthenticationMethodsIdentifiers mocks base method.
func (m *MockInstanceServer) GetIdentityAuthenticationMethodsIdentifiers() (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityAuthenticationMethodsIdentifiers")
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityAuthenticationMethodsIdentifiers indicates an expected call of GetIdentityAuthenticationMethodsIdentifiers.
func (mr *MockInstanceServerMockRecorder) GetIdentityAuthenticationMethodsIdentifiers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityAuthenticationMethodsIdentifiers", reflect.TypeOf((*MockInstanceServer)(nil).GetIdentityAuthenticationMethodsIdentifiers))
}

// GetIdentityIdentifiersByAuthenticationMethod mocks base method.
func (m *MockInstanceServer) GetIdentityIdentifiersByAuthenticationMethod(authenticationMethod string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityIdentifiersByAuthenticationMethod", authenticationMethod)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityIdentifiersByAuthenticationMethod indicates an expected call of GetIdentityIdentifiersByAuthenticationMethod.
func (mr *MockInstanceServerMockRecorder) GetIdentityIdentifiersByAuthenticationMethod(authenticationMethod any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityIdentifiersByAuthenticationMethod", reflect.TypeOf((*MockInstanceServer)(nil).GetIdentityIdentifiersByAuthenticationMethod), authenticationMethod)
}

// GetIdentityProviderGroup mocks base method.
func (m *MockInstanceServer) GetIdentityProviderGroup(identityProviderGroupName string) (*api.IdentityProviderGroup, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityProviderGroup", identityProviderGroupName)
	ret0, _ := ret[0].(*api.IdentityProviderGroup)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetIdentityProviderGroup indicates an expected call of GetIdentityProviderGroup.
func (mr *MockInstanceServerMockRecorder) GetIdentityProviderGroup(identityProviderGroupName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityProviderGroup", reflect.TypeOf((*MockInstanceServer)(nil).GetIdentityProviderGroup), identityProviderGroupName)
}

// GetIdentityProviderGroupNames mocks base method.
func (m *MockInstanceServer) GetIdentityProviderGroupNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityProviderGroupNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityProviderGroupNames indicates an expected call of GetIdentityProviderGroupNames.
func (mr *MockInstanceServerMockRecorder) GetIdentityProviderGroupNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityProviderGroupNames", reflect.TypeOf((*MockInstanceServer)(nil).GetIdentityProviderGroupNames))
}

// GetIdentityProviderGroups mocks base method.
func (m *MockInstanceServer) GetIdentityProviderGroups() ([]api.IdentityProviderGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIdentityProviderGroups")
	ret0, _ := ret[0].([]api.IdentityProviderGroup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIdentityProviderGroups indicates an expected call of GetIdentityProviderGroups.
func (mr *MockInstanceServerMockRecorder) GetIdentityProviderGroups() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIdentityProviderGroups", reflect.TypeOf((*MockInstanceServer)(nil).GetIdentityProviderGroups))
}

// GetImage mocks base method.
func (m *MockInstanceServer) GetImage(fingerprint string) (*api.Image, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImage", fingerprint)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImage indicates an expected call of GetImage.
func (mr *MockInstanceServerMockRecorder) GetImage(fingerprint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImage", reflect.TypeOf((*MockInstanceServer)(nil).GetImage), fingerprint)
}

// GetImageAlias mocks base method.
func (m *MockInstanceServer) GetImageAlias(name string) (*api.ImageAliasesEntry, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAlias", name)
	ret0, _ := ret[0].(*api.ImageAliasesEntry)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImageAlias indicates an expected call of GetImageAlias.
func (mr *MockInstanceServerMockRecorder) GetImageAlias(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).GetImageAlias), name)
}

// GetImageAliasArchitectures mocks base method.
func (m *MockInstanceServer) GetImageAliasArchitectures(imageType, name string) (map[string]*api.ImageAliasesEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasArchitectures", imageType, name)
	ret0, _ := ret[0].(map[string]*api.ImageAliasesEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliasArchitectures indicates an expected call of GetImageAliasArchitectures.
func (mr *MockInstanceServerMockRecorder) GetImageAliasArchitectures(imageType, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasArchitectures", reflect.TypeOf((*MockInstanceServer)(nil).GetImageAliasArchitectures), imageType, name)
}

// GetImageAliasNames mocks base method.
func (m *MockInstanceServer) GetImageAliasNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliasNames indicates an expected call of GetImageAliasNames.
func (mr *MockInstanceServerMockRecorder) GetImageAliasNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasNames", reflect.TypeOf((*MockInstanceServer)(nil).GetImageAliasNames))
}

// GetImageAliasType mocks base method.
func (m *MockInstanceServer) GetImageAliasType(imageType, name string) (*api.ImageAliasesEntry, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliasType", imageType, name)
	ret0, _ := ret[0].(*api.ImageAliasesEntry)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetImageAliasType indicates an expected call of GetImageAliasType.
func (mr *MockInstanceServerMockRecorder) GetImageAliasType(imageType, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliasType", reflect.TypeOf((*MockInstanceServer)(nil).GetImageAliasType), imageType, name)
}

// GetImageAliases mocks base method.
func (m *MockInstanceServer) GetImageAliases() ([]api.ImageAliasesEntry, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageAliases")
	ret0, _ := ret[0].([]api.ImageAliasesEntry)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageAliases indicates an expected call of GetImageAliases.
func (mr *MockInstanceServerMockRecorder) GetImageAliases() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageAliases", reflect.TypeOf((*MockInstanceServer)(nil).GetImageAliases))
}

// GetImageFile mocks base method.
func (m *MockInstanceServer) GetImageFile(fingerprint string, req lxd.ImageFileRequest) (*lxd.ImageFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageFile", fingerprint, req)
	ret0, _ := ret[0].(*lxd.ImageFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageFile indicates an expected call of GetImageFile.
func (mr *MockInstanceServerMockRecorder) GetImageFile(fingerprint, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageFile", reflect.TypeOf((*MockInstanceServer)(nil).GetImageFile), fingerprint, req)
}

// GetImageFingerprints mocks base method.
func (m *MockInstanceServer) GetImageFingerprints() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageFingerprints")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageFingerprints indicates an expected call of GetImageFingerprints.
func (mr *MockInstanceServerMockRecorder) GetImageFingerprints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageFingerprints", reflect.TypeOf((*MockInstanceServer)(nil).GetImageFingerprints))
}

// GetImageSecret mocks base method.
func (m *MockInstanceServer) GetImageSecret(fingerprint string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageSecret", fingerprint)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageSecret indicates an expected call of GetImageSecret.
func (mr *MockInstanceServerMockRecorder) GetImageSecret(fingerprint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageSecret", reflect.TypeOf((*MockInstanceServer)(nil).GetImageSecret), fingerprint)
}

// GetImages mocks base method.
func (m *MockInstanceServer) GetImages() ([]api.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImages")
	ret0, _ := ret[0].([]api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImages indicates an expected call of GetImages.
func (mr *MockInstanceServerMockRecorder) GetImages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImages", reflect.TypeOf((*MockInstanceServer)(nil).GetImages))
}

// GetImagesAllProjects mocks base method.
func (m *MockInstanceServer) GetImagesAllProjects() ([]api.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesAllProjects")
	ret0, _ := ret[0].([]api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesAllProjects indicates an expected call of GetImagesAllProjects.
func (mr *MockInstanceServerMockRecorder) GetImagesAllProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetImagesAllProjects))
}

// GetImagesAllProjectsWithFilter mocks base method.
func (m *MockInstanceServer) GetImagesAllProjectsWithFilter(filters []string) ([]api.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesAllProjectsWithFilter", filters)
	ret0, _ := ret[0].([]api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesAllProjectsWithFilter indicates an expected call of GetImagesAllProjectsWithFilter.
func (mr *MockInstanceServerMockRecorder) GetImagesAllProjectsWithFilter(filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesAllProjectsWithFilter", reflect.TypeOf((*MockInstanceServer)(nil).GetImagesAllProjectsWithFilter), filters)
}

// GetImagesWithFilter mocks base method.
func (m *MockInstanceServer) GetImagesWithFilter(filters []string) ([]api.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesWithFilter", filters)
	ret0, _ := ret[0].([]api.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesWithFilter indicates an expected call of GetImagesWithFilter.
func (mr *MockInstanceServerMockRecorder) GetImagesWithFilter(filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesWithFilter", reflect.TypeOf((*MockInstanceServer)(nil).GetImagesWithFilter), filters)
}

// GetInstance mocks base method.
func (m *MockInstanceServer) GetInstance(name string) (*api.Instance, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", name)
	ret0, _ := ret[0].(*api.Instance)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstance indicates an expected call of GetInstance.
func (mr *MockInstanceServerMockRecorder) GetInstance(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockInstanceServer)(nil).GetInstance), name)
}

// GetInstanceBackup mocks base method.
func (m *MockInstanceServer) GetInstanceBackup(instanceName, name string) (*api.InstanceBackup, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceBackup", instanceName, name)
	ret0, _ := ret[0].(*api.InstanceBackup)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceBackup indicates an expected call of GetInstanceBackup.
func (mr *MockInstanceServerMockRecorder) GetInstanceBackup(instanceName, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceBackup", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceBackup), instanceName, name)
}

// GetInstanceBackupFile mocks base method.
func (m *MockInstanceServer) GetInstanceBackupFile(instanceName, name string, req *lxd.BackupFileRequest) (*lxd.BackupFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceBackupFile", instanceName, name, req)
	ret0, _ := ret[0].(*lxd.BackupFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceBackupFile indicates an expected call of GetInstanceBackupFile.
func (mr *MockInstanceServerMockRecorder) GetInstanceBackupFile(instanceName, name, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceBackupFile", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceBackupFile), instanceName, name, req)
}

// GetInstanceBackupNames mocks base method.
func (m *MockInstanceServer) GetInstanceBackupNames(instanceName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceBackupNames", instanceName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceBackupNames indicates an expected call of GetInstanceBackupNames.
func (mr *MockInstanceServerMockRecorder) GetInstanceBackupNames(instanceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceBackupNames", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceBackupNames), instanceName)
}

// GetInstanceBackups mocks base method.
func (m *MockInstanceServer) GetInstanceBackups(instanceName string) ([]api.InstanceBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceBackups", instanceName)
	ret0, _ := ret[0].([]api.InstanceBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceBackups indicates an expected call of GetInstanceBackups.
func (mr *MockInstanceServerMockRecorder) GetInstanceBackups(instanceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceBackups", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceBackups), instanceName)
}

// GetInstanceConsoleLog mocks base method.
func (m *MockInstanceServer) GetInstanceConsoleLog(instanceName string, args *lxd.InstanceConsoleLogArgs) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceConsoleLog", instanceName, args)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceConsoleLog indicates an expected call of GetInstanceConsoleLog.
func (mr *MockInstanceServerMockRecorder) GetInstanceConsoleLog(instanceName, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceConsoleLog", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceConsoleLog), instanceName, args)
}

// GetInstanceFile mocks base method.
func (m *MockInstanceServer) GetInstanceFile(instanceName, path string) (io.ReadCloser, *lxd.InstanceFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceFile", instanceName, path)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(*lxd.InstanceFileResponse)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceFile indicates an expected call of GetInstanceFile.
func (mr *MockInstanceServerMockRecorder) GetInstanceFile(instanceName, path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceFile", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceFile), instanceName, path)
}

// GetInstanceFileSFTP mocks base method.
func (m *MockInstanceServer) GetInstanceFileSFTP(instanceName string) (*sftp.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceFileSFTP", instanceName)
	ret0, _ := ret[0].(*sftp.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceFileSFTP indicates an expected call of GetInstanceFileSFTP.
func (mr *MockInstanceServerMockRecorder) GetInstanceFileSFTP(instanceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceFileSFTP", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceFileSFTP), instanceName)
}

// GetInstanceFileSFTPConn mocks base method.
func (m *MockInstanceServer) GetInstanceFileSFTPConn(instanceName string) (net.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceFileSFTPConn", instanceName)
	ret0, _ := ret[0].(net.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceFileSFTPConn indicates an expected call of GetInstanceFileSFTPConn.
func (mr *MockInstanceServerMockRecorder) GetInstanceFileSFTPConn(instanceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceFileSFTPConn", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceFileSFTPConn), instanceName)
}

// GetInstanceFull mocks base method.
func (m *MockInstanceServer) GetInstanceFull(name string) (*api.InstanceFull, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceFull", name)
	ret0, _ := ret[0].(*api.InstanceFull)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceFull indicates an expected call of GetInstanceFull.
func (mr *MockInstanceServerMockRecorder) GetInstanceFull(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceFull", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceFull), name)
}

// GetInstanceLogfile mocks base method.
func (m *MockInstanceServer) GetInstanceLogfile(name, filename string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceLogfile", name, filename)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceLogfile indicates an expected call of GetInstanceLogfile.
func (mr *MockInstanceServerMockRecorder) GetInstanceLogfile(name, filename any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceLogfile", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceLogfile), name, filename)
}

// GetInstanceLogfiles mocks base method.
func (m *MockInstanceServer) GetInstanceLogfiles(name string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceLogfiles", name)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceLogfiles indicates an expected call of GetInstanceLogfiles.
func (mr *MockInstanceServerMockRecorder) GetInstanceLogfiles(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceLogfiles", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceLogfiles), name)
}

// GetInstanceMetadata mocks base method.
func (m *MockInstanceServer) GetInstanceMetadata(name string) (*api.ImageMetadata, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceMetadata", name)
	ret0, _ := ret[0].(*api.ImageMetadata)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceMetadata indicates an expected call of GetInstanceMetadata.
func (mr *MockInstanceServerMockRecorder) GetInstanceMetadata(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceMetadata", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceMetadata), name)
}

// GetInstanceNames mocks base method.
func (m *MockInstanceServer) GetInstanceNames(instanceType api.InstanceType) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceNames", instanceType)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceNames indicates an expected call of GetInstanceNames.
func (mr *MockInstanceServerMockRecorder) GetInstanceNames(instanceType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceNames", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceNames), instanceType)
}

// GetInstanceNamesAllProjects mocks base method.
func (m *MockInstanceServer) GetInstanceNamesAllProjects(instanceType api.InstanceType) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceNamesAllProjects", instanceType)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceNamesAllProjects indicates an expected call of GetInstanceNamesAllProjects.
func (mr *MockInstanceServerMockRecorder) GetInstanceNamesAllProjects(instanceType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceNamesAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceNamesAllProjects), instanceType)
}

// GetInstanceSnapshot mocks base method.
func (m *MockInstanceServer) GetInstanceSnapshot(instanceName, name string) (*api.InstanceSnapshot, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceSnapshot", instanceName, name)
	ret0, _ := ret[0].(*api.InstanceSnapshot)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceSnapshot indicates an expected call of GetInstanceSnapshot.
func (mr *MockInstanceServerMockRecorder) GetInstanceSnapshot(instanceName, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceSnapshot), instanceName, name)
}

// GetInstanceSnapshotNames mocks base method.
func (m *MockInstanceServer) GetInstanceSnapshotNames(instanceName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceSnapshotNames", instanceName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceSnapshotNames indicates an expected call of GetInstanceSnapshotNames.
func (mr *MockInstanceServerMockRecorder) GetInstanceSnapshotNames(instanceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSnapshotNames", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceSnapshotNames), instanceName)
}

// GetInstanceSnapshots mocks base method.
func (m *MockInstanceServer) GetInstanceSnapshots(instanceName string) ([]api.InstanceSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceSnapshots", instanceName)
	ret0, _ := ret[0].([]api.InstanceSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceSnapshots indicates an expected call of GetInstanceSnapshots.
func (mr *MockInstanceServerMockRecorder) GetInstanceSnapshots(instanceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceSnapshots", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceSnapshots), instanceName)
}

// GetInstanceState mocks base method.
func (m *MockInstanceServer) GetInstanceState(name string) (*api.InstanceState, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceState", name)
	ret0, _ := ret[0].(*api.InstanceState)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceState indicates an expected call of GetInstanceState.
func (mr *MockInstanceServerMockRecorder) GetInstanceState(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceState", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceState), name)
}

// GetInstanceTemplateFile mocks base method.
func (m *MockInstanceServer) GetInstanceTemplateFile(instanceName, templateName string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceTemplateFile", instanceName, templateName)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceTemplateFile indicates an expected call of GetInstanceTemplateFile.
func (mr *MockInstanceServerMockRecorder) GetInstanceTemplateFile(instanceName, templateName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceTemplateFile), instanceName, templateName)
}

// GetInstanceTemplateFiles mocks base method.
func (m *MockInstanceServer) GetInstanceTemplateFiles(instanceName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceTemplateFiles", instanceName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstanceTemplateFiles indicates an expected call of GetInstanceTemplateFiles.
func (mr *MockInstanceServerMockRecorder) GetInstanceTemplateFiles(instanceName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceTemplateFiles", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceTemplateFiles), instanceName)
}

// GetInstanceUEFIVars mocks base method.
func (m *MockInstanceServer) GetInstanceUEFIVars(name string) (*api.InstanceUEFIVars, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceUEFIVars", name)
	ret0, _ := ret[0].(*api.InstanceUEFIVars)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetInstanceUEFIVars indicates an expected call of GetInstanceUEFIVars.
func (mr *MockInstanceServerMockRecorder) GetInstanceUEFIVars(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceUEFIVars", reflect.TypeOf((*MockInstanceServer)(nil).GetInstanceUEFIVars), name)
}

// GetInstances mocks base method.
func (m *MockInstanceServer) GetInstances(instanceType api.InstanceType) ([]api.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstances", instanceType)
	ret0, _ := ret[0].([]api.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstances indicates an expected call of GetInstances.
func (mr *MockInstanceServerMockRecorder) GetInstances(instanceType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstances", reflect.TypeOf((*MockInstanceServer)(nil).GetInstances), instanceType)
}

// GetInstancesAllProjects mocks base method.
func (m *MockInstanceServer) GetInstancesAllProjects(instanceType api.InstanceType) ([]api.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesAllProjects", instanceType)
	ret0, _ := ret[0].([]api.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesAllProjects indicates an expected call of GetInstancesAllProjects.
func (mr *MockInstanceServerMockRecorder) GetInstancesAllProjects(instanceType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetInstancesAllProjects), instanceType)
}

// GetInstancesAllProjectsWithFilter mocks base method.
func (m *MockInstanceServer) GetInstancesAllProjectsWithFilter(instanceType api.InstanceType, filters []string) ([]api.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesAllProjectsWithFilter", instanceType, filters)
	ret0, _ := ret[0].([]api.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesAllProjectsWithFilter indicates an expected call of GetInstancesAllProjectsWithFilter.
func (mr *MockInstanceServerMockRecorder) GetInstancesAllProjectsWithFilter(instanceType, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesAllProjectsWithFilter", reflect.TypeOf((*MockInstanceServer)(nil).GetInstancesAllProjectsWithFilter), instanceType, filters)
}

// GetInstancesFull mocks base method.
func (m *MockInstanceServer) GetInstancesFull(instanceType api.InstanceType) ([]api.InstanceFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesFull", instanceType)
	ret0, _ := ret[0].([]api.InstanceFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesFull indicates an expected call of GetInstancesFull.
func (mr *MockInstanceServerMockRecorder) GetInstancesFull(instanceType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesFull", reflect.TypeOf((*MockInstanceServer)(nil).GetInstancesFull), instanceType)
}

// GetInstancesFullAllProjects mocks base method.
func (m *MockInstanceServer) GetInstancesFullAllProjects(instanceType api.InstanceType) ([]api.InstanceFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesFullAllProjects", instanceType)
	ret0, _ := ret[0].([]api.InstanceFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesFullAllProjects indicates an expected call of GetInstancesFullAllProjects.
func (mr *MockInstanceServerMockRecorder) GetInstancesFullAllProjects(instanceType any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesFullAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetInstancesFullAllProjects), instanceType)
}

// GetInstancesFullAllProjectsWithFilter mocks base method.
func (m *MockInstanceServer) GetInstancesFullAllProjectsWithFilter(instanceType api.InstanceType, filters []string) ([]api.InstanceFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesFullAllProjectsWithFilter", instanceType, filters)
	ret0, _ := ret[0].([]api.InstanceFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesFullAllProjectsWithFilter indicates an expected call of GetInstancesFullAllProjectsWithFilter.
func (mr *MockInstanceServerMockRecorder) GetInstancesFullAllProjectsWithFilter(instanceType, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesFullAllProjectsWithFilter", reflect.TypeOf((*MockInstanceServer)(nil).GetInstancesFullAllProjectsWithFilter), instanceType, filters)
}

// GetInstancesFullWithFilter mocks base method.
func (m *MockInstanceServer) GetInstancesFullWithFilter(instanceType api.InstanceType, filters []string) ([]api.InstanceFull, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesFullWithFilter", instanceType, filters)
	ret0, _ := ret[0].([]api.InstanceFull)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesFullWithFilter indicates an expected call of GetInstancesFullWithFilter.
func (mr *MockInstanceServerMockRecorder) GetInstancesFullWithFilter(instanceType, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesFullWithFilter", reflect.TypeOf((*MockInstanceServer)(nil).GetInstancesFullWithFilter), instanceType, filters)
}

// GetInstancesWithFilter mocks base method.
func (m *MockInstanceServer) GetInstancesWithFilter(instanceType api.InstanceType, filters []string) ([]api.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesWithFilter", instanceType, filters)
	ret0, _ := ret[0].([]api.Instance)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInstancesWithFilter indicates an expected call of GetInstancesWithFilter.
func (mr *MockInstanceServerMockRecorder) GetInstancesWithFilter(instanceType, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesWithFilter", reflect.TypeOf((*MockInstanceServer)(nil).GetInstancesWithFilter), instanceType, filters)
}

// GetMetadataConfiguration mocks base method.
func (m *MockInstanceServer) GetMetadataConfiguration() (*api.MetadataConfiguration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadataConfiguration")
	ret0, _ := ret[0].(*api.MetadataConfiguration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadataConfiguration indicates an expected call of GetMetadataConfiguration.
func (mr *MockInstanceServerMockRecorder) GetMetadataConfiguration() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadataConfiguration", reflect.TypeOf((*MockInstanceServer)(nil).GetMetadataConfiguration))
}

// GetMetrics mocks base method.
func (m *MockInstanceServer) GetMetrics() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockInstanceServerMockRecorder) GetMetrics() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockInstanceServer)(nil).GetMetrics))
}

// GetNetwork mocks base method.
func (m *MockInstanceServer) GetNetwork(name string) (*api.Network, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetwork", name)
	ret0, _ := ret[0].(*api.Network)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetwork indicates an expected call of GetNetwork.
func (mr *MockInstanceServerMockRecorder) GetNetwork(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetwork", reflect.TypeOf((*MockInstanceServer)(nil).GetNetwork), name)
}

// GetNetworkACL mocks base method.
func (m *MockInstanceServer) GetNetworkACL(name string) (*api.NetworkACL, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkACL", name)
	ret0, _ := ret[0].(*api.NetworkACL)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetworkACL indicates an expected call of GetNetworkACL.
func (mr *MockInstanceServerMockRecorder) GetNetworkACL(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkACL", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkACL), name)
}

// GetNetworkACLLogfile mocks base method.
func (m *MockInstanceServer) GetNetworkACLLogfile(name string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkACLLogfile", name)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkACLLogfile indicates an expected call of GetNetworkACLLogfile.
func (mr *MockInstanceServerMockRecorder) GetNetworkACLLogfile(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkACLLogfile", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkACLLogfile), name)
}

// GetNetworkACLNames mocks base method.
func (m *MockInstanceServer) GetNetworkACLNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkACLNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkACLNames indicates an expected call of GetNetworkACLNames.
func (mr *MockInstanceServerMockRecorder) GetNetworkACLNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkACLNames", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkACLNames))
}

// GetNetworkACLs mocks base method.
func (m *MockInstanceServer) GetNetworkACLs() ([]api.NetworkACL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkACLs")
	ret0, _ := ret[0].([]api.NetworkACL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkACLs indicates an expected call of GetNetworkACLs.
func (mr *MockInstanceServerMockRecorder) GetNetworkACLs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkACLs", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkACLs))
}

// GetNetworkAllocations mocks base method.
func (m *MockInstanceServer) GetNetworkAllocations(allProjects bool) ([]api.NetworkAllocations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkAllocations", allProjects)
	ret0, _ := ret[0].([]api.NetworkAllocations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkAllocations indicates an expected call of GetNetworkAllocations.
func (mr *MockInstanceServerMockRecorder) GetNetworkAllocations(allProjects any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkAllocations", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkAllocations), allProjects)
}

// GetNetworkForward mocks base method.
func (m *MockInstanceServer) GetNetworkForward(networkName, listenAddress string) (*api.NetworkForward, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkForward", networkName, listenAddress)
	ret0, _ := ret[0].(*api.NetworkForward)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetworkForward indicates an expected call of GetNetworkForward.
func (mr *MockInstanceServerMockRecorder) GetNetworkForward(networkName, listenAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkForward", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkForward), networkName, listenAddress)
}

// GetNetworkForwardAddresses mocks base method.
func (m *MockInstanceServer) GetNetworkForwardAddresses(networkName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkForwardAddresses", networkName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkForwardAddresses indicates an expected call of GetNetworkForwardAddresses.
func (mr *MockInstanceServerMockRecorder) GetNetworkForwardAddresses(networkName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkForwardAddresses", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkForwardAddresses), networkName)
}

// GetNetworkForwards mocks base method.
func (m *MockInstanceServer) GetNetworkForwards(networkName string) ([]api.NetworkForward, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkForwards", networkName)
	ret0, _ := ret[0].([]api.NetworkForward)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkForwards indicates an expected call of GetNetworkForwards.
func (mr *MockInstanceServerMockRecorder) GetNetworkForwards(networkName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkForwards", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkForwards), networkName)
}

// GetNetworkLeases mocks base method.
func (m *MockInstanceServer) GetNetworkLeases(name string) ([]api.NetworkLease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkLeases", name)
	ret0, _ := ret[0].([]api.NetworkLease)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkLeases indicates an expected call of GetNetworkLeases.
func (mr *MockInstanceServerMockRecorder) GetNetworkLeases(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkLeases", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkLeases), name)
}

// GetNetworkLoadBalancer mocks base method.
func (m *MockInstanceServer) GetNetworkLoadBalancer(networkName, listenAddress string) (*api.NetworkLoadBalancer, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkLoadBalancer", networkName, listenAddress)
	ret0, _ := ret[0].(*api.NetworkLoadBalancer)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetworkLoadBalancer indicates an expected call of GetNetworkLoadBalancer.
func (mr *MockInstanceServerMockRecorder) GetNetworkLoadBalancer(networkName, listenAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkLoadBalancer", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkLoadBalancer), networkName, listenAddress)
}

// GetNetworkLoadBalancerAddresses mocks base method.
func (m *MockInstanceServer) GetNetworkLoadBalancerAddresses(networkName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkLoadBalancerAddresses", networkName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkLoadBalancerAddresses indicates an expected call of GetNetworkLoadBalancerAddresses.
func (mr *MockInstanceServerMockRecorder) GetNetworkLoadBalancerAddresses(networkName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkLoadBalancerAddresses", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkLoadBalancerAddresses), networkName)
}

// GetNetworkLoadBalancers mocks base method.
func (m *MockInstanceServer) GetNetworkLoadBalancers(networkName string) ([]api.NetworkLoadBalancer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkLoadBalancers", networkName)
	ret0, _ := ret[0].([]api.NetworkLoadBalancer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkLoadBalancers indicates an expected call of GetNetworkLoadBalancers.
func (mr *MockInstanceServerMockRecorder) GetNetworkLoadBalancers(networkName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkLoadBalancers", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkLoadBalancers), networkName)
}

// GetNetworkNames mocks base method.
func (m *MockInstanceServer) GetNetworkNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkNames indicates an expected call of GetNetworkNames.
func (mr *MockInstanceServerMockRecorder) GetNetworkNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkNames", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkNames))
}

// GetNetworkPeer mocks base method.
func (m *MockInstanceServer) GetNetworkPeer(networkName, peerName string) (*api.NetworkPeer, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkPeer", networkName, peerName)
	ret0, _ := ret[0].(*api.NetworkPeer)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetworkPeer indicates an expected call of GetNetworkPeer.
func (mr *MockInstanceServerMockRecorder) GetNetworkPeer(networkName, peerName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPeer", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkPeer), networkName, peerName)
}

// GetNetworkPeerNames mocks base method.
func (m *MockInstanceServer) GetNetworkPeerNames(networkName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkPeerNames", networkName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkPeerNames indicates an expected call of GetNetworkPeerNames.
func (mr *MockInstanceServerMockRecorder) GetNetworkPeerNames(networkName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPeerNames", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkPeerNames), networkName)
}

// GetNetworkPeers mocks base method.
func (m *MockInstanceServer) GetNetworkPeers(networkName string) ([]api.NetworkPeer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkPeers", networkName)
	ret0, _ := ret[0].([]api.NetworkPeer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkPeers indicates an expected call of GetNetworkPeers.
func (mr *MockInstanceServerMockRecorder) GetNetworkPeers(networkName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkPeers", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkPeers), networkName)
}

// GetNetworkState mocks base method.
func (m *MockInstanceServer) GetNetworkState(name string) (*api.NetworkState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkState", name)
	ret0, _ := ret[0].(*api.NetworkState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkState indicates an expected call of GetNetworkState.
func (mr *MockInstanceServerMockRecorder) GetNetworkState(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkState", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkState), name)
}

// GetNetworkZone mocks base method.
func (m *MockInstanceServer) GetNetworkZone(name string) (*api.NetworkZone, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkZone", name)
	ret0, _ := ret[0].(*api.NetworkZone)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetworkZone indicates an expected call of GetNetworkZone.
func (mr *MockInstanceServerMockRecorder) GetNetworkZone(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkZone", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkZone), name)
}

// GetNetworkZoneNames mocks base method.
func (m *MockInstanceServer) GetNetworkZoneNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkZoneNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkZoneNames indicates an expected call of GetNetworkZoneNames.
func (mr *MockInstanceServerMockRecorder) GetNetworkZoneNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkZoneNames", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkZoneNames))
}

// GetNetworkZoneRecord mocks base method.
func (m *MockInstanceServer) GetNetworkZoneRecord(zone, name string) (*api.NetworkZoneRecord, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkZoneRecord", zone, name)
	ret0, _ := ret[0].(*api.NetworkZoneRecord)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNetworkZoneRecord indicates an expected call of GetNetworkZoneRecord.
func (mr *MockInstanceServerMockRecorder) GetNetworkZoneRecord(zone, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkZoneRecord", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkZoneRecord), zone, name)
}

// GetNetworkZoneRecordNames mocks base method.
func (m *MockInstanceServer) GetNetworkZoneRecordNames(zone string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkZoneRecordNames", zone)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkZoneRecordNames indicates an expected call of GetNetworkZoneRecordNames.
func (mr *MockInstanceServerMockRecorder) GetNetworkZoneRecordNames(zone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkZoneRecordNames", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkZoneRecordNames), zone)
}

// GetNetworkZoneRecords mocks base method.
func (m *MockInstanceServer) GetNetworkZoneRecords(zone string) ([]api.NetworkZoneRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkZoneRecords", zone)
	ret0, _ := ret[0].([]api.NetworkZoneRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkZoneRecords indicates an expected call of GetNetworkZoneRecords.
func (mr *MockInstanceServerMockRecorder) GetNetworkZoneRecords(zone any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkZoneRecords", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkZoneRecords), zone)
}

// GetNetworkZones mocks base method.
func (m *MockInstanceServer) GetNetworkZones() ([]api.NetworkZone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkZones")
	ret0, _ := ret[0].([]api.NetworkZone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkZones indicates an expected call of GetNetworkZones.
func (mr *MockInstanceServerMockRecorder) GetNetworkZones() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkZones", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworkZones))
}

// GetNetworks mocks base method.
func (m *MockInstanceServer) GetNetworks() ([]api.Network, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworks")
	ret0, _ := ret[0].([]api.Network)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworks indicates an expected call of GetNetworks.
func (mr *MockInstanceServerMockRecorder) GetNetworks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworks", reflect.TypeOf((*MockInstanceServer)(nil).GetNetworks))
}

// GetOperation mocks base method.
func (m *MockInstanceServer) GetOperation(uuid string) (*api.Operation, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperation", uuid)
	ret0, _ := ret[0].(*api.Operation)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOperation indicates an expected call of GetOperation.
func (mr *MockInstanceServerMockRecorder) GetOperation(uuid any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperation", reflect.TypeOf((*MockInstanceServer)(nil).GetOperation), uuid)
}

// GetOperationUUIDs mocks base method.
func (m *MockInstanceServer) GetOperationUUIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationUUIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationUUIDs indicates an expected call of GetOperationUUIDs.
func (mr *MockInstanceServerMockRecorder) GetOperationUUIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationUUIDs", reflect.TypeOf((*MockInstanceServer)(nil).GetOperationUUIDs))
}

// GetOperationWait mocks base method.
func (m *MockInstanceServer) GetOperationWait(uuid string, timeout int) (*api.Operation, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationWait", uuid, timeout)
	ret0, _ := ret[0].(*api.Operation)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOperationWait indicates an expected call of GetOperationWait.
func (mr *MockInstanceServerMockRecorder) GetOperationWait(uuid, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationWait", reflect.TypeOf((*MockInstanceServer)(nil).GetOperationWait), uuid, timeout)
}

// GetOperationWaitSecret mocks base method.
func (m *MockInstanceServer) GetOperationWaitSecret(uuid, secret string, timeout int) (*api.Operation, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationWaitSecret", uuid, secret, timeout)
	ret0, _ := ret[0].(*api.Operation)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOperationWaitSecret indicates an expected call of GetOperationWaitSecret.
func (mr *MockInstanceServerMockRecorder) GetOperationWaitSecret(uuid, secret, timeout any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationWaitSecret", reflect.TypeOf((*MockInstanceServer)(nil).GetOperationWaitSecret), uuid, secret, timeout)
}

// GetOperationWebsocket mocks base method.
func (m *MockInstanceServer) GetOperationWebsocket(uuid, secret string) (*websocket.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationWebsocket", uuid, secret)
	ret0, _ := ret[0].(*websocket.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationWebsocket indicates an expected call of GetOperationWebsocket.
func (mr *MockInstanceServerMockRecorder) GetOperationWebsocket(uuid, secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationWebsocket", reflect.TypeOf((*MockInstanceServer)(nil).GetOperationWebsocket), uuid, secret)
}

// GetOperations mocks base method.
func (m *MockInstanceServer) GetOperations() ([]api.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperations")
	ret0, _ := ret[0].([]api.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperations indicates an expected call of GetOperations.
func (mr *MockInstanceServerMockRecorder) GetOperations() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperations", reflect.TypeOf((*MockInstanceServer)(nil).GetOperations))
}

// GetOperationsAllProjects mocks base method.
func (m *MockInstanceServer) GetOperationsAllProjects() ([]api.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperationsAllProjects")
	ret0, _ := ret[0].([]api.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperationsAllProjects indicates an expected call of GetOperationsAllProjects.
func (mr *MockInstanceServerMockRecorder) GetOperationsAllProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperationsAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetOperationsAllProjects))
}

// GetPermissions mocks base method.
func (m *MockInstanceServer) GetPermissions(args lxd.GetPermissionsArgs) ([]api.Permission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissions", args)
	ret0, _ := ret[0].([]api.Permission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissions indicates an expected call of GetPermissions.
func (mr *MockInstanceServerMockRecorder) GetPermissions(args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissions", reflect.TypeOf((*MockInstanceServer)(nil).GetPermissions), args)
}

// GetPermissionsInfo mocks base method.
func (m *MockInstanceServer) GetPermissionsInfo(args lxd.GetPermissionsArgs) ([]api.PermissionInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPermissionsInfo", args)
	ret0, _ := ret[0].([]api.PermissionInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPermissionsInfo indicates an expected call of GetPermissionsInfo.
func (mr *MockInstanceServerMockRecorder) GetPermissionsInfo(args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPermissionsInfo", reflect.TypeOf((*MockInstanceServer)(nil).GetPermissionsInfo), args)
}

// GetPrivateImage mocks base method.
func (m *MockInstanceServer) GetPrivateImage(fingerprint, secret string) (*api.Image, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateImage", fingerprint, secret)
	ret0, _ := ret[0].(*api.Image)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetPrivateImage indicates an expected call of GetPrivateImage.
func (mr *MockInstanceServerMockRecorder) GetPrivateImage(fingerprint, secret any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateImage", reflect.TypeOf((*MockInstanceServer)(nil).GetPrivateImage), fingerprint, secret)
}

// GetPrivateImageFile mocks base method.
func (m *MockInstanceServer) GetPrivateImageFile(fingerprint, secret string, req lxd.ImageFileRequest) (*lxd.ImageFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrivateImageFile", fingerprint, secret, req)
	ret0, _ := ret[0].(*lxd.ImageFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPrivateImageFile indicates an expected call of GetPrivateImageFile.
func (mr *MockInstanceServerMockRecorder) GetPrivateImageFile(fingerprint, secret, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrivateImageFile", reflect.TypeOf((*MockInstanceServer)(nil).GetPrivateImageFile), fingerprint, secret, req)
}

// GetProfile mocks base method.
func (m *MockInstanceServer) GetProfile(name string) (*api.Profile, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfile", name)
	ret0, _ := ret[0].(*api.Profile)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProfile indicates an expected call of GetProfile.
func (mr *MockInstanceServerMockRecorder) GetProfile(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfile", reflect.TypeOf((*MockInstanceServer)(nil).GetProfile), name)
}

// GetProfileNames mocks base method.
func (m *MockInstanceServer) GetProfileNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfileNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfileNames indicates an expected call of GetProfileNames.
func (mr *MockInstanceServerMockRecorder) GetProfileNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfileNames", reflect.TypeOf((*MockInstanceServer)(nil).GetProfileNames))
}

// GetProfiles mocks base method.
func (m *MockInstanceServer) GetProfiles() ([]api.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProfiles")
	ret0, _ := ret[0].([]api.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProfiles indicates an expected call of GetProfiles.
func (mr *MockInstanceServerMockRecorder) GetProfiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProfiles", reflect.TypeOf((*MockInstanceServer)(nil).GetProfiles))
}

// GetProject mocks base method.
func (m *MockInstanceServer) GetProject(name string) (*api.Project, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", name)
	ret0, _ := ret[0].(*api.Project)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetProject indicates an expected call of GetProject.
func (mr *MockInstanceServerMockRecorder) GetProject(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockInstanceServer)(nil).GetProject), name)
}

// GetProjectNames mocks base method.
func (m *MockInstanceServer) GetProjectNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectNames indicates an expected call of GetProjectNames.
func (mr *MockInstanceServerMockRecorder) GetProjectNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectNames", reflect.TypeOf((*MockInstanceServer)(nil).GetProjectNames))
}

// GetProjectState mocks base method.
func (m *MockInstanceServer) GetProjectState(name string) (*api.ProjectState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjectState", name)
	ret0, _ := ret[0].(*api.ProjectState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjectState indicates an expected call of GetProjectState.
func (mr *MockInstanceServerMockRecorder) GetProjectState(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjectState", reflect.TypeOf((*MockInstanceServer)(nil).GetProjectState), name)
}

// GetProjects mocks base method.
func (m *MockInstanceServer) GetProjects() ([]api.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProjects")
	ret0, _ := ret[0].([]api.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProjects indicates an expected call of GetProjects.
func (mr *MockInstanceServerMockRecorder) GetProjects() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetProjects))
}

// GetServer mocks base method.
func (m *MockInstanceServer) GetServer() (*api.Server, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer")
	ret0, _ := ret[0].(*api.Server)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetServer indicates an expected call of GetServer.
func (mr *MockInstanceServerMockRecorder) GetServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockInstanceServer)(nil).GetServer))
}

// GetServerResources mocks base method.
func (m *MockInstanceServer) GetServerResources() (*api.Resources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerResources")
	ret0, _ := ret[0].(*api.Resources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerResources indicates an expected call of GetServerResources.
func (mr *MockInstanceServerMockRecorder) GetServerResources() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerResources", reflect.TypeOf((*MockInstanceServer)(nil).GetServerResources))
}

// GetStoragePool mocks base method.
func (m *MockInstanceServer) GetStoragePool(name string) (*api.StoragePool, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePool", name)
	ret0, _ := ret[0].(*api.StoragePool)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePool indicates an expected call of GetStoragePool.
func (mr *MockInstanceServerMockRecorder) GetStoragePool(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePool", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePool), name)
}

// GetStoragePoolBucket mocks base method.
func (m *MockInstanceServer) GetStoragePoolBucket(poolName, bucketName string) (*api.StorageBucket, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolBucket", poolName, bucketName)
	ret0, _ := ret[0].(*api.StorageBucket)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePoolBucket indicates an expected call of GetStoragePoolBucket.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolBucket(poolName, bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolBucket", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolBucket), poolName, bucketName)
}

// GetStoragePoolBucketKey mocks base method.
func (m *MockInstanceServer) GetStoragePoolBucketKey(poolName, bucketName, keyName string) (*api.StorageBucketKey, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolBucketKey", poolName, bucketName, keyName)
	ret0, _ := ret[0].(*api.StorageBucketKey)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePoolBucketKey indicates an expected call of GetStoragePoolBucketKey.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolBucketKey(poolName, bucketName, keyName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolBucketKey", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolBucketKey), poolName, bucketName, keyName)
}

// GetStoragePoolBucketKeyNames mocks base method.
func (m *MockInstanceServer) GetStoragePoolBucketKeyNames(poolName, bucketName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolBucketKeyNames", poolName, bucketName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolBucketKeyNames indicates an expected call of GetStoragePoolBucketKeyNames.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolBucketKeyNames(poolName, bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolBucketKeyNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolBucketKeyNames), poolName, bucketName)
}

// GetStoragePoolBucketKeys mocks base method.
func (m *MockInstanceServer) GetStoragePoolBucketKeys(poolName, bucketName string) ([]api.StorageBucketKey, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolBucketKeys", poolName, bucketName)
	ret0, _ := ret[0].([]api.StorageBucketKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolBucketKeys indicates an expected call of GetStoragePoolBucketKeys.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolBucketKeys(poolName, bucketName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolBucketKeys", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolBucketKeys), poolName, bucketName)
}

// GetStoragePoolBucketNames mocks base method.
func (m *MockInstanceServer) GetStoragePoolBucketNames(poolName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolBucketNames", poolName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolBucketNames indicates an expected call of GetStoragePoolBucketNames.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolBucketNames(poolName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolBucketNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolBucketNames), poolName)
}

// GetStoragePoolBuckets mocks base method.
func (m *MockInstanceServer) GetStoragePoolBuckets(poolName string) ([]api.StorageBucket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolBuckets", poolName)
	ret0, _ := ret[0].([]api.StorageBucket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolBuckets indicates an expected call of GetStoragePoolBuckets.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolBuckets(poolName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolBuckets", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolBuckets), poolName)
}

// GetStoragePoolNames mocks base method.
func (m *MockInstanceServer) GetStoragePoolNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolNames indicates an expected call of GetStoragePoolNames.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolNames() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolNames))
}

// GetStoragePoolResources mocks base method.
func (m *MockInstanceServer) GetStoragePoolResources(name string) (*api.ResourcesStoragePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolResources", name)
	ret0, _ := ret[0].(*api.ResourcesStoragePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolResources indicates an expected call of GetStoragePoolResources.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolResources(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolResources", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolResources), name)
}

// GetStoragePoolVolume mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolume(pool, volType, name string) (*api.StorageVolume, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolume", pool, volType, name)
	ret0, _ := ret[0].(*api.StorageVolume)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePoolVolume indicates an expected call of GetStoragePoolVolume.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolume(pool, volType, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolume), pool, volType, name)
}

// GetStoragePoolVolumeBackup mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeBackup(pool, volName, name string) (*api.StoragePoolVolumeBackup, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeBackup", pool, volName, name)
	ret0, _ := ret[0].(*api.StoragePoolVolumeBackup)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePoolVolumeBackup indicates an expected call of GetStoragePoolVolumeBackup.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeBackup(pool, volName, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeBackup", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeBackup), pool, volName, name)
}

// GetStoragePoolVolumeBackupFile mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeBackupFile(pool, volName, name string, req *lxd.BackupFileRequest) (*lxd.BackupFileResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeBackupFile", pool, volName, name, req)
	ret0, _ := ret[0].(*lxd.BackupFileResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeBackupFile indicates an expected call of GetStoragePoolVolumeBackupFile.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeBackupFile(pool, volName, name, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeBackupFile", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeBackupFile), pool, volName, name, req)
}

// GetStoragePoolVolumeBackupNames mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeBackupNames(pool, volName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeBackupNames", pool, volName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeBackupNames indicates an expected call of GetStoragePoolVolumeBackupNames.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeBackupNames(pool, volName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeBackupNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeBackupNames), pool, volName)
}

// GetStoragePoolVolumeBackups mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeBackups(pool, volName string) ([]api.StoragePoolVolumeBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeBackups", pool, volName)
	ret0, _ := ret[0].([]api.StoragePoolVolumeBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeBackups indicates an expected call of GetStoragePoolVolumeBackups.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeBackups(pool, volName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeBackups", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeBackups), pool, volName)
}

// GetStoragePoolVolumeNames mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeNames(pool string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeNames", pool)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeNames indicates an expected call of GetStoragePoolVolumeNames.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeNames(pool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeNames), pool)
}

// GetStoragePoolVolumeNamesAllProjects mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeNamesAllProjects(pool string) (map[string][]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeNamesAllProjects", pool)
	ret0, _ := ret[0].(map[string][]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeNamesAllProjects indicates an expected call of GetStoragePoolVolumeNamesAllProjects.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeNamesAllProjects(pool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeNamesAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeNamesAllProjects), pool)
}

// GetStoragePoolVolumeSnapshot mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeSnapshot(pool, volumeType, volumeName, snapshotName string) (*api.StorageVolumeSnapshot, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeSnapshot", pool, volumeType, volumeName, snapshotName)
	ret0, _ := ret[0].(*api.StorageVolumeSnapshot)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetStoragePoolVolumeSnapshot indicates an expected call of GetStoragePoolVolumeSnapshot.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeSnapshot(pool, volumeType, volumeName, snapshotName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeSnapshot), pool, volumeType, volumeName, snapshotName)
}

// GetStoragePoolVolumeSnapshotNames mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeSnapshotNames(pool, volumeType, volumeName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeSnapshotNames", pool, volumeType, volumeName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeSnapshotNames indicates an expected call of GetStoragePoolVolumeSnapshotNames.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeSnapshotNames(pool, volumeType, volumeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeSnapshotNames", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeSnapshotNames), pool, volumeType, volumeName)
}

// GetStoragePoolVolumeSnapshots mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeSnapshots(pool, volumeType, volumeName string) ([]api.StorageVolumeSnapshot, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeSnapshots", pool, volumeType, volumeName)
	ret0, _ := ret[0].([]api.StorageVolumeSnapshot)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeSnapshots indicates an expected call of GetStoragePoolVolumeSnapshots.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeSnapshots(pool, volumeType, volumeName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeSnapshots", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeSnapshots), pool, volumeType, volumeName)
}

// GetStoragePoolVolumeState mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumeState(pool, volType, name string) (*api.StorageVolumeState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumeState", pool, volType, name)
	ret0, _ := ret[0].(*api.StorageVolumeState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumeState indicates an expected call of GetStoragePoolVolumeState.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumeState(pool, volType, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumeState", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumeState), pool, volType, name)
}

// GetStoragePoolVolumes mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumes(pool string) ([]api.StorageVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumes", pool)
	ret0, _ := ret[0].([]api.StorageVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumes indicates an expected call of GetStoragePoolVolumes.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumes(pool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumes", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumes), pool)
}

// GetStoragePoolVolumesAllProjects mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumesAllProjects(pool string) ([]api.StorageVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumesAllProjects", pool)
	ret0, _ := ret[0].([]api.StorageVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumesAllProjects indicates an expected call of GetStoragePoolVolumesAllProjects.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumesAllProjects(pool any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumesAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumesAllProjects), pool)
}

// GetStoragePoolVolumesWithFilter mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumesWithFilter(pool string, filters []string) ([]api.StorageVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumesWithFilter", pool, filters)
	ret0, _ := ret[0].([]api.StorageVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumesWithFilter indicates an expected call of GetStoragePoolVolumesWithFilter.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumesWithFilter(pool, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumesWithFilter", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumesWithFilter), pool, filters)
}

// GetStoragePoolVolumesWithFilterAllProjects mocks base method.
func (m *MockInstanceServer) GetStoragePoolVolumesWithFilterAllProjects(pool string, filters []string) ([]api.StorageVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolVolumesWithFilterAllProjects", pool, filters)
	ret0, _ := ret[0].([]api.StorageVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolVolumesWithFilterAllProjects indicates an expected call of GetStoragePoolVolumesWithFilterAllProjects.
func (mr *MockInstanceServerMockRecorder) GetStoragePoolVolumesWithFilterAllProjects(pool, filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolVolumesWithFilterAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePoolVolumesWithFilterAllProjects), pool, filters)
}

// GetStoragePools mocks base method.
func (m *MockInstanceServer) GetStoragePools() ([]api.StoragePool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePools")
	ret0, _ := ret[0].([]api.StoragePool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePools indicates an expected call of GetStoragePools.
func (mr *MockInstanceServerMockRecorder) GetStoragePools() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePools", reflect.TypeOf((*MockInstanceServer)(nil).GetStoragePools))
}

// GetVolumesWithFilter mocks base method.
func (m *MockInstanceServer) GetVolumesWithFilter(filters []string) ([]api.StorageVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumesWithFilter", filters)
	ret0, _ := ret[0].([]api.StorageVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumesWithFilter indicates an expected call of GetVolumesWithFilter.
func (mr *MockInstanceServerMockRecorder) GetVolumesWithFilter(filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumesWithFilter", reflect.TypeOf((*MockInstanceServer)(nil).GetVolumesWithFilter), filters)
}

// GetVolumesWithFilterAllProjects mocks base method.
func (m *MockInstanceServer) GetVolumesWithFilterAllProjects(filters []string) ([]api.StorageVolume, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumesWithFilterAllProjects", filters)
	ret0, _ := ret[0].([]api.StorageVolume)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVolumesWithFilterAllProjects indicates an expected call of GetVolumesWithFilterAllProjects.
func (mr *MockInstanceServerMockRecorder) GetVolumesWithFilterAllProjects(filters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumesWithFilterAllProjects", reflect.TypeOf((*MockInstanceServer)(nil).GetVolumesWithFilterAllProjects), filters)
}

// GetWarning mocks base method.
func (m *MockInstanceServer) GetWarning(UUID string) (*api.Warning, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarning", UUID)
	ret0, _ := ret[0].(*api.Warning)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetWarning indicates an expected call of GetWarning.
func (mr *MockInstanceServerMockRecorder) GetWarning(UUID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarning", reflect.TypeOf((*MockInstanceServer)(nil).GetWarning), UUID)
}

// GetWarningUUIDs mocks base method.
func (m *MockInstanceServer) GetWarningUUIDs() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarningUUIDs")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWarningUUIDs indicates an expected call of GetWarningUUIDs.
func (mr *MockInstanceServerMockRecorder) GetWarningUUIDs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarningUUIDs", reflect.TypeOf((*MockInstanceServer)(nil).GetWarningUUIDs))
}

// GetWarnings mocks base method.
func (m *MockInstanceServer) GetWarnings() ([]api.Warning, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWarnings")
	ret0, _ := ret[0].([]api.Warning)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWarnings indicates an expected call of GetWarnings.
func (mr *MockInstanceServerMockRecorder) GetWarnings() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWarnings", reflect.TypeOf((*MockInstanceServer)(nil).GetWarnings))
}

// HasExtension mocks base method.
func (m *MockInstanceServer) HasExtension(extension string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasExtension", extension)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasExtension indicates an expected call of HasExtension.
func (mr *MockInstanceServerMockRecorder) HasExtension(extension any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasExtension", reflect.TypeOf((*MockInstanceServer)(nil).HasExtension), extension)
}

// IsClustered mocks base method.
func (m *MockInstanceServer) IsClustered() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClustered")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClustered indicates an expected call of IsClustered.
func (mr *MockInstanceServerMockRecorder) IsClustered() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClustered", reflect.TypeOf((*MockInstanceServer)(nil).IsClustered))
}

// MigrateContainer mocks base method.
func (m *MockInstanceServer) MigrateContainer(name string, container api.ContainerPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateContainer", name, container)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateContainer indicates an expected call of MigrateContainer.
func (mr *MockInstanceServerMockRecorder) MigrateContainer(name, container any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateContainer", reflect.TypeOf((*MockInstanceServer)(nil).MigrateContainer), name, container)
}

// MigrateContainerSnapshot mocks base method.
func (m *MockInstanceServer) MigrateContainerSnapshot(containerName, name string, container api.ContainerSnapshotPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateContainerSnapshot", containerName, name, container)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateContainerSnapshot indicates an expected call of MigrateContainerSnapshot.
func (mr *MockInstanceServerMockRecorder) MigrateContainerSnapshot(containerName, name, container any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).MigrateContainerSnapshot), containerName, name, container)
}

// MigrateInstance mocks base method.
func (m *MockInstanceServer) MigrateInstance(name string, instance api.InstancePost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateInstance", name, instance)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateInstance indicates an expected call of MigrateInstance.
func (mr *MockInstanceServerMockRecorder) MigrateInstance(name, instance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateInstance", reflect.TypeOf((*MockInstanceServer)(nil).MigrateInstance), name, instance)
}

// MigrateInstanceSnapshot mocks base method.
func (m *MockInstanceServer) MigrateInstanceSnapshot(instanceName, name string, instance api.InstanceSnapshotPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateInstanceSnapshot", instanceName, name, instance)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateInstanceSnapshot indicates an expected call of MigrateInstanceSnapshot.
func (mr *MockInstanceServerMockRecorder) MigrateInstanceSnapshot(instanceName, name, instance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).MigrateInstanceSnapshot), instanceName, name, instance)
}

// MigrateStoragePoolVolume mocks base method.
func (m *MockInstanceServer) MigrateStoragePoolVolume(pool string, volume api.StorageVolumePost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrateStoragePoolVolume", pool, volume)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrateStoragePoolVolume indicates an expected call of MigrateStoragePoolVolume.
func (mr *MockInstanceServerMockRecorder) MigrateStoragePoolVolume(pool, volume any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrateStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).MigrateStoragePoolVolume), pool, volume)
}

// MoveStoragePoolVolume mocks base method.
func (m *MockInstanceServer) MoveStoragePoolVolume(pool string, source lxd.InstanceServer, sourcePool string, volume api.StorageVolume, args *lxd.StoragePoolVolumeMoveArgs) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveStoragePoolVolume", pool, source, sourcePool, volume, args)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MoveStoragePoolVolume indicates an expected call of MoveStoragePoolVolume.
func (mr *MockInstanceServerMockRecorder) MoveStoragePoolVolume(pool, source, sourcePool, volume, args any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).MoveStoragePoolVolume), pool, source, sourcePool, volume, args)
}

// RawOperation mocks base method.
func (m *MockInstanceServer) RawOperation(method, path string, data any, queryETag string) (lxd.Operation, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawOperation", method, path, data, queryETag)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RawOperation indicates an expected call of RawOperation.
func (mr *MockInstanceServerMockRecorder) RawOperation(method, path, data, queryETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawOperation", reflect.TypeOf((*MockInstanceServer)(nil).RawOperation), method, path, data, queryETag)
}

// RawQuery mocks base method.
func (m *MockInstanceServer) RawQuery(method, path string, data any, queryETag string) (*api.Response, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawQuery", method, path, data, queryETag)
	ret0, _ := ret[0].(*api.Response)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RawQuery indicates an expected call of RawQuery.
func (mr *MockInstanceServerMockRecorder) RawQuery(method, path, data, queryETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawQuery", reflect.TypeOf((*MockInstanceServer)(nil).RawQuery), method, path, data, queryETag)
}

// RawWebsocket mocks base method.
func (m *MockInstanceServer) RawWebsocket(path string) (*websocket.Conn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RawWebsocket", path)
	ret0, _ := ret[0].(*websocket.Conn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RawWebsocket indicates an expected call of RawWebsocket.
func (mr *MockInstanceServerMockRecorder) RawWebsocket(path any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RawWebsocket", reflect.TypeOf((*MockInstanceServer)(nil).RawWebsocket), path)
}

// RebuildInstance mocks base method.
func (m *MockInstanceServer) RebuildInstance(instanceName string, req api.InstanceRebuildPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebuildInstance", instanceName, req)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebuildInstance indicates an expected call of RebuildInstance.
func (mr *MockInstanceServerMockRecorder) RebuildInstance(instanceName, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebuildInstance", reflect.TypeOf((*MockInstanceServer)(nil).RebuildInstance), instanceName, req)
}

// RebuildInstanceFromImage mocks base method.
func (m *MockInstanceServer) RebuildInstanceFromImage(source lxd.ImageServer, image api.Image, instanceName string, req api.InstanceRebuildPost) (lxd.RemoteOperation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RebuildInstanceFromImage", source, image, instanceName, req)
	ret0, _ := ret[0].(lxd.RemoteOperation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RebuildInstanceFromImage indicates an expected call of RebuildInstanceFromImage.
func (mr *MockInstanceServerMockRecorder) RebuildInstanceFromImage(source, image, instanceName, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RebuildInstanceFromImage", reflect.TypeOf((*MockInstanceServer)(nil).RebuildInstanceFromImage), source, image, instanceName, req)
}

// RefreshImage mocks base method.
func (m *MockInstanceServer) RefreshImage(fingerprint string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshImage", fingerprint)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshImage indicates an expected call of RefreshImage.
func (mr *MockInstanceServerMockRecorder) RefreshImage(fingerprint any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshImage", reflect.TypeOf((*MockInstanceServer)(nil).RefreshImage), fingerprint)
}

// RenameAuthGroup mocks base method.
func (m *MockInstanceServer) RenameAuthGroup(groupName string, groupPost api.AuthGroupPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameAuthGroup", groupName, groupPost)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameAuthGroup indicates an expected call of RenameAuthGroup.
func (mr *MockInstanceServerMockRecorder) RenameAuthGroup(groupName, groupPost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameAuthGroup", reflect.TypeOf((*MockInstanceServer)(nil).RenameAuthGroup), groupName, groupPost)
}

// RenameClusterGroup mocks base method.
func (m *MockInstanceServer) RenameClusterGroup(name string, group api.ClusterGroupPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameClusterGroup", name, group)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameClusterGroup indicates an expected call of RenameClusterGroup.
func (mr *MockInstanceServerMockRecorder) RenameClusterGroup(name, group any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameClusterGroup", reflect.TypeOf((*MockInstanceServer)(nil).RenameClusterGroup), name, group)
}

// RenameClusterMember mocks base method.
func (m *MockInstanceServer) RenameClusterMember(name string, member api.ClusterMemberPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameClusterMember", name, member)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameClusterMember indicates an expected call of RenameClusterMember.
func (mr *MockInstanceServerMockRecorder) RenameClusterMember(name, member any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameClusterMember", reflect.TypeOf((*MockInstanceServer)(nil).RenameClusterMember), name, member)
}

// RenameContainer mocks base method.
func (m *MockInstanceServer) RenameContainer(name string, container api.ContainerPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameContainer", name, container)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameContainer indicates an expected call of RenameContainer.
func (mr *MockInstanceServerMockRecorder) RenameContainer(name, container any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameContainer", reflect.TypeOf((*MockInstanceServer)(nil).RenameContainer), name, container)
}

// RenameContainerBackup mocks base method.
func (m *MockInstanceServer) RenameContainerBackup(containerName, name string, backup api.ContainerBackupPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameContainerBackup", containerName, name, backup)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameContainerBackup indicates an expected call of RenameContainerBackup.
func (mr *MockInstanceServerMockRecorder) RenameContainerBackup(containerName, name, backup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameContainerBackup", reflect.TypeOf((*MockInstanceServer)(nil).RenameContainerBackup), containerName, name, backup)
}

// RenameContainerSnapshot mocks base method.
func (m *MockInstanceServer) RenameContainerSnapshot(containerName, name string, container api.ContainerSnapshotPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameContainerSnapshot", containerName, name, container)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameContainerSnapshot indicates an expected call of RenameContainerSnapshot.
func (mr *MockInstanceServerMockRecorder) RenameContainerSnapshot(containerName, name, container any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).RenameContainerSnapshot), containerName, name, container)
}

// RenameIdentityProviderGroup mocks base method.
func (m *MockInstanceServer) RenameIdentityProviderGroup(identityProviderGroupName string, identityProviderGroupPost api.IdentityProviderGroupPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameIdentityProviderGroup", identityProviderGroupName, identityProviderGroupPost)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameIdentityProviderGroup indicates an expected call of RenameIdentityProviderGroup.
func (mr *MockInstanceServerMockRecorder) RenameIdentityProviderGroup(identityProviderGroupName, identityProviderGroupPost any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameIdentityProviderGroup", reflect.TypeOf((*MockInstanceServer)(nil).RenameIdentityProviderGroup), identityProviderGroupName, identityProviderGroupPost)
}

// RenameImageAlias mocks base method.
func (m *MockInstanceServer) RenameImageAlias(name string, alias api.ImageAliasesEntryPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameImageAlias", name, alias)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameImageAlias indicates an expected call of RenameImageAlias.
func (mr *MockInstanceServerMockRecorder) RenameImageAlias(name, alias any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).RenameImageAlias), name, alias)
}

// RenameInstance mocks base method.
func (m *MockInstanceServer) RenameInstance(name string, instance api.InstancePost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameInstance", name, instance)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameInstance indicates an expected call of RenameInstance.
func (mr *MockInstanceServerMockRecorder) RenameInstance(name, instance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameInstance", reflect.TypeOf((*MockInstanceServer)(nil).RenameInstance), name, instance)
}

// RenameInstanceBackup mocks base method.
func (m *MockInstanceServer) RenameInstanceBackup(instanceName, name string, backup api.InstanceBackupPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameInstanceBackup", instanceName, name, backup)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameInstanceBackup indicates an expected call of RenameInstanceBackup.
func (mr *MockInstanceServerMockRecorder) RenameInstanceBackup(instanceName, name, backup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameInstanceBackup", reflect.TypeOf((*MockInstanceServer)(nil).RenameInstanceBackup), instanceName, name, backup)
}

// RenameInstanceSnapshot mocks base method.
func (m *MockInstanceServer) RenameInstanceSnapshot(instanceName, name string, instance api.InstanceSnapshotPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameInstanceSnapshot", instanceName, name, instance)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameInstanceSnapshot indicates an expected call of RenameInstanceSnapshot.
func (mr *MockInstanceServerMockRecorder) RenameInstanceSnapshot(instanceName, name, instance any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).RenameInstanceSnapshot), instanceName, name, instance)
}

// RenameNetwork mocks base method.
func (m *MockInstanceServer) RenameNetwork(name string, network api.NetworkPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameNetwork", name, network)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameNetwork indicates an expected call of RenameNetwork.
func (mr *MockInstanceServerMockRecorder) RenameNetwork(name, network any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameNetwork", reflect.TypeOf((*MockInstanceServer)(nil).RenameNetwork), name, network)
}

// RenameNetworkACL mocks base method.
func (m *MockInstanceServer) RenameNetworkACL(name string, acl api.NetworkACLPost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameNetworkACL", name, acl)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameNetworkACL indicates an expected call of RenameNetworkACL.
func (mr *MockInstanceServerMockRecorder) RenameNetworkACL(name, acl any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameNetworkACL", reflect.TypeOf((*MockInstanceServer)(nil).RenameNetworkACL), name, acl)
}

// RenameProfile mocks base method.
func (m *MockInstanceServer) RenameProfile(name string, profile api.ProfilePost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameProfile", name, profile)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameProfile indicates an expected call of RenameProfile.
func (mr *MockInstanceServerMockRecorder) RenameProfile(name, profile any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameProfile", reflect.TypeOf((*MockInstanceServer)(nil).RenameProfile), name, profile)
}

// RenameProject mocks base method.
func (m *MockInstanceServer) RenameProject(name string, project api.ProjectPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameProject", name, project)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameProject indicates an expected call of RenameProject.
func (mr *MockInstanceServerMockRecorder) RenameProject(name, project any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameProject", reflect.TypeOf((*MockInstanceServer)(nil).RenameProject), name, project)
}

// RenameStoragePoolVolume mocks base method.
func (m *MockInstanceServer) RenameStoragePoolVolume(pool, volType, name string, volume api.StorageVolumePost) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameStoragePoolVolume", pool, volType, name, volume)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenameStoragePoolVolume indicates an expected call of RenameStoragePoolVolume.
func (mr *MockInstanceServerMockRecorder) RenameStoragePoolVolume(pool, volType, name, volume any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).RenameStoragePoolVolume), pool, volType, name, volume)
}

// RenameStoragePoolVolumeBackup mocks base method.
func (m *MockInstanceServer) RenameStoragePoolVolumeBackup(pool, volName, name string, backup api.StoragePoolVolumeBackupPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameStoragePoolVolumeBackup", pool, volName, name, backup)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameStoragePoolVolumeBackup indicates an expected call of RenameStoragePoolVolumeBackup.
func (mr *MockInstanceServerMockRecorder) RenameStoragePoolVolumeBackup(pool, volName, name, backup any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameStoragePoolVolumeBackup", reflect.TypeOf((*MockInstanceServer)(nil).RenameStoragePoolVolumeBackup), pool, volName, name, backup)
}

// RenameStoragePoolVolumeSnapshot mocks base method.
func (m *MockInstanceServer) RenameStoragePoolVolumeSnapshot(pool, volumeType, volumeName, snapshotName string, snapshot api.StorageVolumeSnapshotPost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RenameStoragePoolVolumeSnapshot", pool, volumeType, volumeName, snapshotName, snapshot)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenameStoragePoolVolumeSnapshot indicates an expected call of RenameStoragePoolVolumeSnapshot.
func (mr *MockInstanceServerMockRecorder) RenameStoragePoolVolumeSnapshot(pool, volumeType, volumeName, snapshotName, snapshot any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenameStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).RenameStoragePoolVolumeSnapshot), pool, volumeType, volumeName, snapshotName, snapshot)
}

// RequireAuthenticated mocks base method.
func (m *MockInstanceServer) RequireAuthenticated(authenticated bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequireAuthenticated", authenticated)
}

// RequireAuthenticated indicates an expected call of RequireAuthenticated.
func (mr *MockInstanceServerMockRecorder) RequireAuthenticated(authenticated any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequireAuthenticated", reflect.TypeOf((*MockInstanceServer)(nil).RequireAuthenticated), authenticated)
}

// SendEvent mocks base method.
func (m *MockInstanceServer) SendEvent(event api.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEvent", event)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEvent indicates an expected call of SendEvent.
func (mr *MockInstanceServerMockRecorder) SendEvent(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEvent", reflect.TypeOf((*MockInstanceServer)(nil).SendEvent), event)
}

// SetContainerMetadata mocks base method.
func (m *MockInstanceServer) SetContainerMetadata(name string, metadata api.ImageMetadata, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetContainerMetadata", name, metadata, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetContainerMetadata indicates an expected call of SetContainerMetadata.
func (mr *MockInstanceServerMockRecorder) SetContainerMetadata(name, metadata, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetContainerMetadata", reflect.TypeOf((*MockInstanceServer)(nil).SetContainerMetadata), name, metadata, ETag)
}

// UpdateAuthGroup mocks base method.
func (m *MockInstanceServer) UpdateAuthGroup(groupName string, groupPut api.AuthGroupPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAuthGroup", groupName, groupPut, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAuthGroup indicates an expected call of UpdateAuthGroup.
func (mr *MockInstanceServerMockRecorder) UpdateAuthGroup(groupName, groupPut, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAuthGroup", reflect.TypeOf((*MockInstanceServer)(nil).UpdateAuthGroup), groupName, groupPut, ETag)
}

// UpdateCertificate mocks base method.
func (m *MockInstanceServer) UpdateCertificate(fingerprint string, certificate api.CertificatePut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCertificate", fingerprint, certificate, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCertificate indicates an expected call of UpdateCertificate.
func (mr *MockInstanceServerMockRecorder) UpdateCertificate(fingerprint, certificate, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCertificate", reflect.TypeOf((*MockInstanceServer)(nil).UpdateCertificate), fingerprint, certificate, ETag)
}

// UpdateCluster mocks base method.
func (m *MockInstanceServer) UpdateCluster(cluster api.ClusterPut, ETag string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCluster", cluster, ETag)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCluster indicates an expected call of UpdateCluster.
func (mr *MockInstanceServerMockRecorder) UpdateCluster(cluster, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCluster", reflect.TypeOf((*MockInstanceServer)(nil).UpdateCluster), cluster, ETag)
}

// UpdateClusterCertificate mocks base method.
func (m *MockInstanceServer) UpdateClusterCertificate(certs api.ClusterCertificatePut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterCertificate", certs, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterCertificate indicates an expected call of UpdateClusterCertificate.
func (mr *MockInstanceServerMockRecorder) UpdateClusterCertificate(certs, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterCertificate", reflect.TypeOf((*MockInstanceServer)(nil).UpdateClusterCertificate), certs, ETag)
}

// UpdateClusterGroup mocks base method.
func (m *MockInstanceServer) UpdateClusterGroup(name string, group api.ClusterGroupPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterGroup", name, group, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterGroup indicates an expected call of UpdateClusterGroup.
func (mr *MockInstanceServerMockRecorder) UpdateClusterGroup(name, group, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterGroup", reflect.TypeOf((*MockInstanceServer)(nil).UpdateClusterGroup), name, group, ETag)
}

// UpdateClusterMember mocks base method.
func (m *MockInstanceServer) UpdateClusterMember(name string, member api.ClusterMemberPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterMember", name, member, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateClusterMember indicates an expected call of UpdateClusterMember.
func (mr *MockInstanceServerMockRecorder) UpdateClusterMember(name, member, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterMember", reflect.TypeOf((*MockInstanceServer)(nil).UpdateClusterMember), name, member, ETag)
}

// UpdateClusterMemberState mocks base method.
func (m *MockInstanceServer) UpdateClusterMemberState(name string, state api.ClusterMemberStatePost) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClusterMemberState", name, state)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClusterMemberState indicates an expected call of UpdateClusterMemberState.
func (mr *MockInstanceServerMockRecorder) UpdateClusterMemberState(name, state any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClusterMemberState", reflect.TypeOf((*MockInstanceServer)(nil).UpdateClusterMemberState), name, state)
}

// UpdateContainer mocks base method.
func (m *MockInstanceServer) UpdateContainer(name string, container api.ContainerPut, ETag string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainer", name, container, ETag)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContainer indicates an expected call of UpdateContainer.
func (mr *MockInstanceServerMockRecorder) UpdateContainer(name, container, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainer", reflect.TypeOf((*MockInstanceServer)(nil).UpdateContainer), name, container, ETag)
}

// UpdateContainerSnapshot mocks base method.
func (m *MockInstanceServer) UpdateContainerSnapshot(containerName, name string, container api.ContainerSnapshotPut, ETag string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainerSnapshot", containerName, name, container, ETag)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContainerSnapshot indicates an expected call of UpdateContainerSnapshot.
func (mr *MockInstanceServerMockRecorder) UpdateContainerSnapshot(containerName, name, container, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainerSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).UpdateContainerSnapshot), containerName, name, container, ETag)
}

// UpdateContainerState mocks base method.
func (m *MockInstanceServer) UpdateContainerState(name string, state api.ContainerStatePut, ETag string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainerState", name, state, ETag)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContainerState indicates an expected call of UpdateContainerState.
func (mr *MockInstanceServerMockRecorder) UpdateContainerState(name, state, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainerState", reflect.TypeOf((*MockInstanceServer)(nil).UpdateContainerState), name, state, ETag)
}

// UpdateContainerTemplateFile mocks base method.
func (m *MockInstanceServer) UpdateContainerTemplateFile(containerName, templateName string, content io.ReadSeeker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContainerTemplateFile", containerName, templateName, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateContainerTemplateFile indicates an expected call of UpdateContainerTemplateFile.
func (mr *MockInstanceServerMockRecorder) UpdateContainerTemplateFile(containerName, templateName, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContainerTemplateFile", reflect.TypeOf((*MockInstanceServer)(nil).UpdateContainerTemplateFile), containerName, templateName, content)
}

// UpdateIdentity mocks base method.
func (m *MockInstanceServer) UpdateIdentity(authenticationMethod, nameOrIdentifier string, identityPut api.IdentityPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentity", authenticationMethod, nameOrIdentifier, identityPut, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIdentity indicates an expected call of UpdateIdentity.
func (mr *MockInstanceServerMockRecorder) UpdateIdentity(authenticationMethod, nameOrIdentifier, identityPut, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentity", reflect.TypeOf((*MockInstanceServer)(nil).UpdateIdentity), authenticationMethod, nameOrIdentifier, identityPut, ETag)
}

// UpdateIdentityProviderGroup mocks base method.
func (m *MockInstanceServer) UpdateIdentityProviderGroup(identityProviderGroupName string, identityProviderGroupPut api.IdentityProviderGroupPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateIdentityProviderGroup", identityProviderGroupName, identityProviderGroupPut, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateIdentityProviderGroup indicates an expected call of UpdateIdentityProviderGroup.
func (mr *MockInstanceServerMockRecorder) UpdateIdentityProviderGroup(identityProviderGroupName, identityProviderGroupPut, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateIdentityProviderGroup", reflect.TypeOf((*MockInstanceServer)(nil).UpdateIdentityProviderGroup), identityProviderGroupName, identityProviderGroupPut, ETag)
}

// UpdateImage mocks base method.
func (m *MockInstanceServer) UpdateImage(fingerprint string, image api.ImagePut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImage", fingerprint, image, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImage indicates an expected call of UpdateImage.
func (mr *MockInstanceServerMockRecorder) UpdateImage(fingerprint, image, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImage", reflect.TypeOf((*MockInstanceServer)(nil).UpdateImage), fingerprint, image, ETag)
}

// UpdateImageAlias mocks base method.
func (m *MockInstanceServer) UpdateImageAlias(name string, alias api.ImageAliasesEntryPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImageAlias", name, alias, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImageAlias indicates an expected call of UpdateImageAlias.
func (mr *MockInstanceServerMockRecorder) UpdateImageAlias(name, alias, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImageAlias", reflect.TypeOf((*MockInstanceServer)(nil).UpdateImageAlias), name, alias, ETag)
}

// UpdateInstance mocks base method.
func (m *MockInstanceServer) UpdateInstance(name string, instance api.InstancePut, ETag string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstance", name, instance, ETag)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstance indicates an expected call of UpdateInstance.
func (mr *MockInstanceServerMockRecorder) UpdateInstance(name, instance, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstance", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstance), name, instance, ETag)
}

// UpdateInstanceMetadata mocks base method.
func (m *MockInstanceServer) UpdateInstanceMetadata(name string, metadata api.ImageMetadata, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceMetadata", name, metadata, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInstanceMetadata indicates an expected call of UpdateInstanceMetadata.
func (mr *MockInstanceServerMockRecorder) UpdateInstanceMetadata(name, metadata, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceMetadata", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstanceMetadata), name, metadata, ETag)
}

// UpdateInstanceSnapshot mocks base method.
func (m *MockInstanceServer) UpdateInstanceSnapshot(instanceName, name string, instance api.InstanceSnapshotPut, ETag string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceSnapshot", instanceName, name, instance, ETag)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceSnapshot indicates an expected call of UpdateInstanceSnapshot.
func (mr *MockInstanceServerMockRecorder) UpdateInstanceSnapshot(instanceName, name, instance, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstanceSnapshot), instanceName, name, instance, ETag)
}

// UpdateInstanceState mocks base method.
func (m *MockInstanceServer) UpdateInstanceState(name string, state api.InstanceStatePut, ETag string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceState", name, state, ETag)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstanceState indicates an expected call of UpdateInstanceState.
func (mr *MockInstanceServerMockRecorder) UpdateInstanceState(name, state, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceState", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstanceState), name, state, ETag)
}

// UpdateInstanceUEFIVars mocks base method.
func (m *MockInstanceServer) UpdateInstanceUEFIVars(name string, instanceUEFI api.InstanceUEFIVars, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstanceUEFIVars", name, instanceUEFI, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateInstanceUEFIVars indicates an expected call of UpdateInstanceUEFIVars.
func (mr *MockInstanceServerMockRecorder) UpdateInstanceUEFIVars(name, instanceUEFI, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstanceUEFIVars", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstanceUEFIVars), name, instanceUEFI, ETag)
}

// UpdateInstances mocks base method.
func (m *MockInstanceServer) UpdateInstances(state api.InstancesPut, ETag string) (lxd.Operation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateInstances", state, ETag)
	ret0, _ := ret[0].(lxd.Operation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateInstances indicates an expected call of UpdateInstances.
func (mr *MockInstanceServerMockRecorder) UpdateInstances(state, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateInstances", reflect.TypeOf((*MockInstanceServer)(nil).UpdateInstances), state, ETag)
}

// UpdateNetwork mocks base method.
func (m *MockInstanceServer) UpdateNetwork(name string, network api.NetworkPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetwork", name, network, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetwork indicates an expected call of UpdateNetwork.
func (mr *MockInstanceServerMockRecorder) UpdateNetwork(name, network, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetwork", reflect.TypeOf((*MockInstanceServer)(nil).UpdateNetwork), name, network, ETag)
}

// UpdateNetworkACL mocks base method.
func (m *MockInstanceServer) UpdateNetworkACL(name string, acl api.NetworkACLPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkACL", name, acl, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkACL indicates an expected call of UpdateNetworkACL.
func (mr *MockInstanceServerMockRecorder) UpdateNetworkACL(name, acl, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkACL", reflect.TypeOf((*MockInstanceServer)(nil).UpdateNetworkACL), name, acl, ETag)
}

// UpdateNetworkForward mocks base method.
func (m *MockInstanceServer) UpdateNetworkForward(networkName, listenAddress string, forward api.NetworkForwardPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkForward", networkName, listenAddress, forward, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkForward indicates an expected call of UpdateNetworkForward.
func (mr *MockInstanceServerMockRecorder) UpdateNetworkForward(networkName, listenAddress, forward, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkForward", reflect.TypeOf((*MockInstanceServer)(nil).UpdateNetworkForward), networkName, listenAddress, forward, ETag)
}

// UpdateNetworkLoadBalancer mocks base method.
func (m *MockInstanceServer) UpdateNetworkLoadBalancer(networkName, listenAddress string, forward api.NetworkLoadBalancerPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkLoadBalancer", networkName, listenAddress, forward, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkLoadBalancer indicates an expected call of UpdateNetworkLoadBalancer.
func (mr *MockInstanceServerMockRecorder) UpdateNetworkLoadBalancer(networkName, listenAddress, forward, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkLoadBalancer", reflect.TypeOf((*MockInstanceServer)(nil).UpdateNetworkLoadBalancer), networkName, listenAddress, forward, ETag)
}

// UpdateNetworkPeer mocks base method.
func (m *MockInstanceServer) UpdateNetworkPeer(networkName, peerName string, peer api.NetworkPeerPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkPeer", networkName, peerName, peer, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkPeer indicates an expected call of UpdateNetworkPeer.
func (mr *MockInstanceServerMockRecorder) UpdateNetworkPeer(networkName, peerName, peer, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkPeer", reflect.TypeOf((*MockInstanceServer)(nil).UpdateNetworkPeer), networkName, peerName, peer, ETag)
}

// UpdateNetworkZone mocks base method.
func (m *MockInstanceServer) UpdateNetworkZone(name string, zone api.NetworkZonePut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkZone", name, zone, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkZone indicates an expected call of UpdateNetworkZone.
func (mr *MockInstanceServerMockRecorder) UpdateNetworkZone(name, zone, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkZone", reflect.TypeOf((*MockInstanceServer)(nil).UpdateNetworkZone), name, zone, ETag)
}

// UpdateNetworkZoneRecord mocks base method.
func (m *MockInstanceServer) UpdateNetworkZoneRecord(zone, name string, record api.NetworkZoneRecordPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNetworkZoneRecord", zone, name, record, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateNetworkZoneRecord indicates an expected call of UpdateNetworkZoneRecord.
func (mr *MockInstanceServerMockRecorder) UpdateNetworkZoneRecord(zone, name, record, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNetworkZoneRecord", reflect.TypeOf((*MockInstanceServer)(nil).UpdateNetworkZoneRecord), zone, name, record, ETag)
}

// UpdateProfile mocks base method.
func (m *MockInstanceServer) UpdateProfile(name string, profile api.ProfilePut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", name, profile, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockInstanceServerMockRecorder) UpdateProfile(name, profile, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockInstanceServer)(nil).UpdateProfile), name, profile, ETag)
}

// UpdateProject mocks base method.
func (m *MockInstanceServer) UpdateProject(name string, project api.ProjectPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", name, project, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockInstanceServerMockRecorder) UpdateProject(name, project, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockInstanceServer)(nil).UpdateProject), name, project, ETag)
}

// UpdateServer mocks base method.
func (m *MockInstanceServer) UpdateServer(server api.ServerPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateServer", server, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateServer indicates an expected call of UpdateServer.
func (mr *MockInstanceServerMockRecorder) UpdateServer(server, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateServer", reflect.TypeOf((*MockInstanceServer)(nil).UpdateServer), server, ETag)
}

// UpdateStoragePool mocks base method.
func (m *MockInstanceServer) UpdateStoragePool(name string, pool api.StoragePoolPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStoragePool", name, pool, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStoragePool indicates an expected call of UpdateStoragePool.
func (mr *MockInstanceServerMockRecorder) UpdateStoragePool(name, pool, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStoragePool", reflect.TypeOf((*MockInstanceServer)(nil).UpdateStoragePool), name, pool, ETag)
}

// UpdateStoragePoolBucket mocks base method.
func (m *MockInstanceServer) UpdateStoragePoolBucket(poolName, bucketName string, bucket api.StorageBucketPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStoragePoolBucket", poolName, bucketName, bucket, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStoragePoolBucket indicates an expected call of UpdateStoragePoolBucket.
func (mr *MockInstanceServerMockRecorder) UpdateStoragePoolBucket(poolName, bucketName, bucket, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStoragePoolBucket", reflect.TypeOf((*MockInstanceServer)(nil).UpdateStoragePoolBucket), poolName, bucketName, bucket, ETag)
}

// UpdateStoragePoolBucketKey mocks base method.
func (m *MockInstanceServer) UpdateStoragePoolBucketKey(poolName, bucketName, keyName string, key api.StorageBucketKeyPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStoragePoolBucketKey", poolName, bucketName, keyName, key, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStoragePoolBucketKey indicates an expected call of UpdateStoragePoolBucketKey.
func (mr *MockInstanceServerMockRecorder) UpdateStoragePoolBucketKey(poolName, bucketName, keyName, key, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStoragePoolBucketKey", reflect.TypeOf((*MockInstanceServer)(nil).UpdateStoragePoolBucketKey), poolName, bucketName, keyName, key, ETag)
}

// UpdateStoragePoolVolume mocks base method.
func (m *MockInstanceServer) UpdateStoragePoolVolume(pool, volType, name string, volume api.StorageVolumePut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStoragePoolVolume", pool, volType, name, volume, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStoragePoolVolume indicates an expected call of UpdateStoragePoolVolume.
func (mr *MockInstanceServerMockRecorder) UpdateStoragePoolVolume(pool, volType, name, volume, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStoragePoolVolume", reflect.TypeOf((*MockInstanceServer)(nil).UpdateStoragePoolVolume), pool, volType, name, volume, ETag)
}

// UpdateStoragePoolVolumeSnapshot mocks base method.
func (m *MockInstanceServer) UpdateStoragePoolVolumeSnapshot(pool, volumeType, volumeName, snapshotName string, volume api.StorageVolumeSnapshotPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStoragePoolVolumeSnapshot", pool, volumeType, volumeName, snapshotName, volume, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStoragePoolVolumeSnapshot indicates an expected call of UpdateStoragePoolVolumeSnapshot.
func (mr *MockInstanceServerMockRecorder) UpdateStoragePoolVolumeSnapshot(pool, volumeType, volumeName, snapshotName, volume, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStoragePoolVolumeSnapshot", reflect.TypeOf((*MockInstanceServer)(nil).UpdateStoragePoolVolumeSnapshot), pool, volumeType, volumeName, snapshotName, volume, ETag)
}

// UpdateWarning mocks base method.
func (m *MockInstanceServer) UpdateWarning(UUID string, warning api.WarningPut, ETag string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWarning", UUID, warning, ETag)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWarning indicates an expected call of UpdateWarning.
func (mr *MockInstanceServerMockRecorder) UpdateWarning(UUID, warning, ETag any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWarning", reflect.TypeOf((*MockInstanceServer)(nil).UpdateWarning), UUID, warning, ETag)
}

// UseProject mocks base method.
func (m *MockInstanceServer) UseProject(name string) lxd.InstanceServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseProject", name)
	ret0, _ := ret[0].(lxd.InstanceServer)
	return ret0
}

// UseProject indicates an expected call of UseProject.
func (mr *MockInstanceServerMockRecorder) UseProject(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseProject", reflect.TypeOf((*MockInstanceServer)(nil).UseProject), name)
}

// UseTarget mocks base method.
func (m *MockInstanceServer) UseTarget(name string) lxd.InstanceServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UseTarget", name)
	ret0, _ := ret[0].(lxd.InstanceServer)
	return ret0
}

// UseTarget indicates an expected call of UseTarget.
func (mr *MockInstanceServerMockRecorder) UseTarget(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UseTarget", reflect.TypeOf((*MockInstanceServer)(nil).UseTarget), name)
}
