// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/resource (interfaces: DeprecatedResourcesState)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/cache_mock.go github.com/juju/juju/internal/resource DeprecatedResourcesState
//

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	resource "github.com/juju/juju/core/resource"
	resource0 "github.com/juju/juju/internal/charm/resource"
	gomock "go.uber.org/mock/gomock"
)

// MockDeprecatedResourcesState is a mock of DeprecatedResourcesState interface.
type MockDeprecatedResourcesState struct {
	ctrl     *gomock.Controller
	recorder *MockDeprecatedResourcesStateMockRecorder
}

// MockDeprecatedResourcesStateMockRecorder is the mock recorder for MockDeprecatedResourcesState.
type MockDeprecatedResourcesStateMockRecorder struct {
	mock *MockDeprecatedResourcesState
}

// NewMockDeprecatedResourcesState creates a new mock instance.
func NewMockDeprecatedResourcesState(ctrl *gomock.Controller) *MockDeprecatedResourcesState {
	mock := &MockDeprecatedResourcesState{ctrl: ctrl}
	mock.recorder = &MockDeprecatedResourcesStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeprecatedResourcesState) EXPECT() *MockDeprecatedResourcesStateMockRecorder {
	return m.recorder
}

// GetResource mocks base method.
func (m *MockDeprecatedResourcesState) GetResource(arg0, arg1 string) (resource.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", arg0, arg1)
	ret0, _ := ret[0].(resource.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockDeprecatedResourcesStateMockRecorder) GetResource(arg0, arg1 any) *MockDeprecatedResourcesStateGetResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockDeprecatedResourcesState)(nil).GetResource), arg0, arg1)
	return &MockDeprecatedResourcesStateGetResourceCall{Call: call}
}

// MockDeprecatedResourcesStateGetResourceCall wrap *gomock.Call
type MockDeprecatedResourcesStateGetResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeprecatedResourcesStateGetResourceCall) Return(arg0 resource.Resource, arg1 error) *MockDeprecatedResourcesStateGetResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeprecatedResourcesStateGetResourceCall) Do(f func(string, string) (resource.Resource, error)) *MockDeprecatedResourcesStateGetResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeprecatedResourcesStateGetResourceCall) DoAndReturn(f func(string, string) (resource.Resource, error)) *MockDeprecatedResourcesStateGetResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenResource mocks base method.
func (m *MockDeprecatedResourcesState) OpenResource(arg0, arg1 string) (resource.Resource, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenResource", arg0, arg1)
	ret0, _ := ret[0].(resource.Resource)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OpenResource indicates an expected call of OpenResource.
func (mr *MockDeprecatedResourcesStateMockRecorder) OpenResource(arg0, arg1 any) *MockDeprecatedResourcesStateOpenResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenResource", reflect.TypeOf((*MockDeprecatedResourcesState)(nil).OpenResource), arg0, arg1)
	return &MockDeprecatedResourcesStateOpenResourceCall{Call: call}
}

// MockDeprecatedResourcesStateOpenResourceCall wrap *gomock.Call
type MockDeprecatedResourcesStateOpenResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeprecatedResourcesStateOpenResourceCall) Return(arg0 resource.Resource, arg1 io.ReadCloser, arg2 error) *MockDeprecatedResourcesStateOpenResourceCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeprecatedResourcesStateOpenResourceCall) Do(f func(string, string) (resource.Resource, io.ReadCloser, error)) *MockDeprecatedResourcesStateOpenResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeprecatedResourcesStateOpenResourceCall) DoAndReturn(f func(string, string) (resource.Resource, io.ReadCloser, error)) *MockDeprecatedResourcesStateOpenResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenResourceForUniter mocks base method.
func (m *MockDeprecatedResourcesState) OpenResourceForUniter(arg0, arg1 string) (resource.Resource, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenResourceForUniter", arg0, arg1)
	ret0, _ := ret[0].(resource.Resource)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OpenResourceForUniter indicates an expected call of OpenResourceForUniter.
func (mr *MockDeprecatedResourcesStateMockRecorder) OpenResourceForUniter(arg0, arg1 any) *MockDeprecatedResourcesStateOpenResourceForUniterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenResourceForUniter", reflect.TypeOf((*MockDeprecatedResourcesState)(nil).OpenResourceForUniter), arg0, arg1)
	return &MockDeprecatedResourcesStateOpenResourceForUniterCall{Call: call}
}

// MockDeprecatedResourcesStateOpenResourceForUniterCall wrap *gomock.Call
type MockDeprecatedResourcesStateOpenResourceForUniterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeprecatedResourcesStateOpenResourceForUniterCall) Return(arg0 resource.Resource, arg1 io.ReadCloser, arg2 error) *MockDeprecatedResourcesStateOpenResourceForUniterCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeprecatedResourcesStateOpenResourceForUniterCall) Do(f func(string, string) (resource.Resource, io.ReadCloser, error)) *MockDeprecatedResourcesStateOpenResourceForUniterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeprecatedResourcesStateOpenResourceForUniterCall) DoAndReturn(f func(string, string) (resource.Resource, io.ReadCloser, error)) *MockDeprecatedResourcesStateOpenResourceForUniterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetResource mocks base method.
func (m *MockDeprecatedResourcesState) SetResource(arg0, arg1 string, arg2 resource0.Resource, arg3 io.Reader, arg4 bool) (resource.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetResource", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(resource.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetResource indicates an expected call of SetResource.
func (mr *MockDeprecatedResourcesStateMockRecorder) SetResource(arg0, arg1, arg2, arg3, arg4 any) *MockDeprecatedResourcesStateSetResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResource", reflect.TypeOf((*MockDeprecatedResourcesState)(nil).SetResource), arg0, arg1, arg2, arg3, arg4)
	return &MockDeprecatedResourcesStateSetResourceCall{Call: call}
}

// MockDeprecatedResourcesStateSetResourceCall wrap *gomock.Call
type MockDeprecatedResourcesStateSetResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeprecatedResourcesStateSetResourceCall) Return(arg0 resource.Resource, arg1 error) *MockDeprecatedResourcesStateSetResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeprecatedResourcesStateSetResourceCall) Do(f func(string, string, resource0.Resource, io.Reader, bool) (resource.Resource, error)) *MockDeprecatedResourcesStateSetResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeprecatedResourcesStateSetResourceCall) DoAndReturn(f func(string, string, resource0.Resource, io.Reader, bool) (resource.Resource, error)) *MockDeprecatedResourcesStateSetResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
