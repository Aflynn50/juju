// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/resource (interfaces: Resources)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/cache_mock.go github.com/juju/juju/internal/resource Resources
//

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"

	resources "github.com/juju/juju/core/resources"
	resource "github.com/juju/juju/internal/charm/resource"
	state "github.com/juju/juju/state"
	gomock "go.uber.org/mock/gomock"
)

// MockResources is a mock of Resources interface.
type MockResources struct {
	ctrl     *gomock.Controller
	recorder *MockResourcesMockRecorder
}

// MockResourcesMockRecorder is the mock recorder for MockResources.
type MockResourcesMockRecorder struct {
	mock *MockResources
}

// NewMockResources creates a new mock instance.
func NewMockResources(ctrl *gomock.Controller) *MockResources {
	mock := &MockResources{ctrl: ctrl}
	mock.recorder = &MockResourcesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResources) EXPECT() *MockResourcesMockRecorder {
	return m.recorder
}

// GetResource mocks base method.
func (m *MockResources) GetResource(arg0, arg1 string) (resources.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", arg0, arg1)
	ret0, _ := ret[0].(resources.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockResourcesMockRecorder) GetResource(arg0, arg1 any) *MockResourcesGetResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockResources)(nil).GetResource), arg0, arg1)
	return &MockResourcesGetResourceCall{Call: call}
}

// MockResourcesGetResourceCall wrap *gomock.Call
type MockResourcesGetResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourcesGetResourceCall) Return(arg0 resources.Resource, arg1 error) *MockResourcesGetResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourcesGetResourceCall) Do(f func(string, string) (resources.Resource, error)) *MockResourcesGetResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourcesGetResourceCall) DoAndReturn(f func(string, string) (resources.Resource, error)) *MockResourcesGetResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenResource mocks base method.
func (m *MockResources) OpenResource(arg0, arg1 string) (resources.Resource, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenResource", arg0, arg1)
	ret0, _ := ret[0].(resources.Resource)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OpenResource indicates an expected call of OpenResource.
func (mr *MockResourcesMockRecorder) OpenResource(arg0, arg1 any) *MockResourcesOpenResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenResource", reflect.TypeOf((*MockResources)(nil).OpenResource), arg0, arg1)
	return &MockResourcesOpenResourceCall{Call: call}
}

// MockResourcesOpenResourceCall wrap *gomock.Call
type MockResourcesOpenResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourcesOpenResourceCall) Return(arg0 resources.Resource, arg1 io.ReadCloser, arg2 error) *MockResourcesOpenResourceCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourcesOpenResourceCall) Do(f func(string, string) (resources.Resource, io.ReadCloser, error)) *MockResourcesOpenResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourcesOpenResourceCall) DoAndReturn(f func(string, string) (resources.Resource, io.ReadCloser, error)) *MockResourcesOpenResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenResourceForUniter mocks base method.
func (m *MockResources) OpenResourceForUniter(arg0, arg1 string) (resources.Resource, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenResourceForUniter", arg0, arg1)
	ret0, _ := ret[0].(resources.Resource)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OpenResourceForUniter indicates an expected call of OpenResourceForUniter.
func (mr *MockResourcesMockRecorder) OpenResourceForUniter(arg0, arg1 any) *MockResourcesOpenResourceForUniterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenResourceForUniter", reflect.TypeOf((*MockResources)(nil).OpenResourceForUniter), arg0, arg1)
	return &MockResourcesOpenResourceForUniterCall{Call: call}
}

// MockResourcesOpenResourceForUniterCall wrap *gomock.Call
type MockResourcesOpenResourceForUniterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourcesOpenResourceForUniterCall) Return(arg0 resources.Resource, arg1 io.ReadCloser, arg2 error) *MockResourcesOpenResourceForUniterCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourcesOpenResourceForUniterCall) Do(f func(string, string) (resources.Resource, io.ReadCloser, error)) *MockResourcesOpenResourceForUniterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourcesOpenResourceForUniterCall) DoAndReturn(f func(string, string) (resources.Resource, io.ReadCloser, error)) *MockResourcesOpenResourceForUniterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetResource mocks base method.
func (m *MockResources) SetResource(arg0, arg1 string, arg2 resource.Resource, arg3 io.Reader, arg4 state.IncrementCharmModifiedVersionType) (resources.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetResource", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(resources.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetResource indicates an expected call of SetResource.
func (mr *MockResourcesMockRecorder) SetResource(arg0, arg1, arg2, arg3, arg4 any) *MockResourcesSetResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResource", reflect.TypeOf((*MockResources)(nil).SetResource), arg0, arg1, arg2, arg3, arg4)
	return &MockResourcesSetResourceCall{Call: call}
}

// MockResourcesSetResourceCall wrap *gomock.Call
type MockResourcesSetResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourcesSetResourceCall) Return(arg0 resources.Resource, arg1 error) *MockResourcesSetResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourcesSetResourceCall) Do(f func(string, string, resource.Resource, io.Reader, state.IncrementCharmModifiedVersionType) (resources.Resource, error)) *MockResourcesSetResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourcesSetResourceCall) DoAndReturn(f func(string, string, resource.Resource, io.Reader, state.IncrementCharmModifiedVersionType) (resources.Resource, error)) *MockResourcesSetResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
