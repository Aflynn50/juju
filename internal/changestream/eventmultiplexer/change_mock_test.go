// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/changestream (interfaces: Term)

// Package eventmultiplexer is a generated GoMock package.
package eventmultiplexer

import (
	reflect "reflect"

	changestream "github.com/juju/juju/core/changestream"
	gomock "go.uber.org/mock/gomock"
)

// MockTerm is a mock of Term interface.
type MockTerm struct {
	ctrl     *gomock.Controller
	recorder *MockTermMockRecorder
}

// MockTermMockRecorder is the mock recorder for MockTerm.
type MockTermMockRecorder struct {
	mock *MockTerm
}

// NewMockTerm creates a new mock instance.
func NewMockTerm(ctrl *gomock.Controller) *MockTerm {
	mock := &MockTerm{ctrl: ctrl}
	mock.recorder = &MockTermMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTerm) EXPECT() *MockTermMockRecorder {
	return m.recorder
}

// Changes mocks base method.
func (m *MockTerm) Changes() []changestream.ChangeEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Changes")
	ret0, _ := ret[0].([]changestream.ChangeEvent)
	return ret0
}

// Changes indicates an expected call of Changes.
func (mr *MockTermMockRecorder) Changes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changes", reflect.TypeOf((*MockTerm)(nil).Changes))
}

// Done mocks base method.
func (m *MockTerm) Done(arg0 bool, arg1 <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Done", arg0, arg1)
}

// Done indicates an expected call of Done.
func (mr *MockTermMockRecorder) Done(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockTerm)(nil).Done), arg0, arg1)
}
