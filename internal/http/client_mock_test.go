// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/http (interfaces: HTTPClient,RequestRecorder)
//
// Generated by this command:
//
//	mockgen -typed -package http -destination client_mock_test.go github.com/juju/juju/internal/http HTTPClient,RequestRecorder
//

// Package http is a generated GoMock package.
package http

import (
	http "net/http"
	url "net/url"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Do mocks base method.
func (m *MockHTTPClient) Do(arg0 *http.Request) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Do", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Do indicates an expected call of Do.
func (mr *MockHTTPClientMockRecorder) Do(arg0 any) *MockHTTPClientDoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Do", reflect.TypeOf((*MockHTTPClient)(nil).Do), arg0)
	return &MockHTTPClientDoCall{Call: call}
}

// MockHTTPClientDoCall wrap *gomock.Call
type MockHTTPClientDoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockHTTPClientDoCall) Return(arg0 *http.Response, arg1 error) *MockHTTPClientDoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockHTTPClientDoCall) Do(f func(*http.Request) (*http.Response, error)) *MockHTTPClientDoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockHTTPClientDoCall) DoAndReturn(f func(*http.Request) (*http.Response, error)) *MockHTTPClientDoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRequestRecorder is a mock of RequestRecorder interface.
type MockRequestRecorder struct {
	ctrl     *gomock.Controller
	recorder *MockRequestRecorderMockRecorder
}

// MockRequestRecorderMockRecorder is the mock recorder for MockRequestRecorder.
type MockRequestRecorderMockRecorder struct {
	mock *MockRequestRecorder
}

// NewMockRequestRecorder creates a new mock instance.
func NewMockRequestRecorder(ctrl *gomock.Controller) *MockRequestRecorder {
	mock := &MockRequestRecorder{ctrl: ctrl}
	mock.recorder = &MockRequestRecorderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRequestRecorder) EXPECT() *MockRequestRecorderMockRecorder {
	return m.recorder
}

// Record mocks base method.
func (m *MockRequestRecorder) Record(arg0 string, arg1 *url.URL, arg2 *http.Response, arg3 time.Duration) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Record", arg0, arg1, arg2, arg3)
}

// Record indicates an expected call of Record.
func (mr *MockRequestRecorderMockRecorder) Record(arg0, arg1, arg2, arg3 any) *MockRequestRecorderRecordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockRequestRecorder)(nil).Record), arg0, arg1, arg2, arg3)
	return &MockRequestRecorderRecordCall{Call: call}
}

// MockRequestRecorderRecordCall wrap *gomock.Call
type MockRequestRecorderRecordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRequestRecorderRecordCall) Return() *MockRequestRecorderRecordCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRequestRecorderRecordCall) Do(f func(string, *url.URL, *http.Response, time.Duration)) *MockRequestRecorderRecordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRequestRecorderRecordCall) DoAndReturn(f func(string, *url.URL, *http.Response, time.Duration)) *MockRequestRecorderRecordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RecordError mocks base method.
func (m *MockRequestRecorder) RecordError(arg0 string, arg1 *url.URL, arg2 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RecordError", arg0, arg1, arg2)
}

// RecordError indicates an expected call of RecordError.
func (mr *MockRequestRecorderMockRecorder) RecordError(arg0, arg1, arg2 any) *MockRequestRecorderRecordErrorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordError", reflect.TypeOf((*MockRequestRecorder)(nil).RecordError), arg0, arg1, arg2)
	return &MockRequestRecorderRecordErrorCall{Call: call}
}

// MockRequestRecorderRecordErrorCall wrap *gomock.Call
type MockRequestRecorderRecordErrorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRequestRecorderRecordErrorCall) Return() *MockRequestRecorderRecordErrorCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRequestRecorderRecordErrorCall) Do(f func(string, *url.URL, error)) *MockRequestRecorderRecordErrorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRequestRecorderRecordErrorCall) DoAndReturn(f func(string, *url.URL, error)) *MockRequestRecorderRecordErrorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
