// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/charm/downloader (interfaces: CharmRepository)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/charm_archive_mocks.go github.com/juju/juju/internal/charm/downloader CharmRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	url "net/url"
	reflect "reflect"

	charm "github.com/juju/juju/core/charm"
	charmhub "github.com/juju/juju/internal/charmhub"
	gomock "go.uber.org/mock/gomock"
)

// MockCharmRepository is a mock of CharmRepository interface.
type MockCharmRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCharmRepositoryMockRecorder
}

// MockCharmRepositoryMockRecorder is the mock recorder for MockCharmRepository.
type MockCharmRepositoryMockRecorder struct {
	mock *MockCharmRepository
}

// NewMockCharmRepository creates a new mock instance.
func NewMockCharmRepository(ctrl *gomock.Controller) *MockCharmRepository {
	mock := &MockCharmRepository{ctrl: ctrl}
	mock.recorder = &MockCharmRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmRepository) EXPECT() *MockCharmRepositoryMockRecorder {
	return m.recorder
}

// DownloadCharm mocks base method.
func (m *MockCharmRepository) DownloadCharm(arg0 context.Context, arg1 string, arg2 charm.Origin, arg3 string) (charm.CharmArchive, charm.Origin, *charmhub.Digest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadCharm", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(charm.CharmArchive)
	ret1, _ := ret[1].(charm.Origin)
	ret2, _ := ret[2].(*charmhub.Digest)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// DownloadCharm indicates an expected call of DownloadCharm.
func (mr *MockCharmRepositoryMockRecorder) DownloadCharm(arg0, arg1, arg2, arg3 any) *MockCharmRepositoryDownloadCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadCharm", reflect.TypeOf((*MockCharmRepository)(nil).DownloadCharm), arg0, arg1, arg2, arg3)
	return &MockCharmRepositoryDownloadCharmCall{Call: call}
}

// MockCharmRepositoryDownloadCharmCall wrap *gomock.Call
type MockCharmRepositoryDownloadCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmRepositoryDownloadCharmCall) Return(arg0 charm.CharmArchive, arg1 charm.Origin, arg2 *charmhub.Digest, arg3 error) *MockCharmRepositoryDownloadCharmCall {
	c.Call = c.Call.Return(arg0, arg1, arg2, arg3)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmRepositoryDownloadCharmCall) Do(f func(context.Context, string, charm.Origin, string) (charm.CharmArchive, charm.Origin, *charmhub.Digest, error)) *MockCharmRepositoryDownloadCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmRepositoryDownloadCharmCall) DoAndReturn(f func(context.Context, string, charm.Origin, string) (charm.CharmArchive, charm.Origin, *charmhub.Digest, error)) *MockCharmRepositoryDownloadCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetDownloadURL mocks base method.
func (m *MockCharmRepository) GetDownloadURL(arg0 context.Context, arg1 string, arg2 charm.Origin) (*url.URL, charm.Origin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownloadURL", arg0, arg1, arg2)
	ret0, _ := ret[0].(*url.URL)
	ret1, _ := ret[1].(charm.Origin)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetDownloadURL indicates an expected call of GetDownloadURL.
func (mr *MockCharmRepositoryMockRecorder) GetDownloadURL(arg0, arg1, arg2 any) *MockCharmRepositoryGetDownloadURLCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadURL", reflect.TypeOf((*MockCharmRepository)(nil).GetDownloadURL), arg0, arg1, arg2)
	return &MockCharmRepositoryGetDownloadURLCall{Call: call}
}

// MockCharmRepositoryGetDownloadURLCall wrap *gomock.Call
type MockCharmRepositoryGetDownloadURLCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmRepositoryGetDownloadURLCall) Return(arg0 *url.URL, arg1 charm.Origin, arg2 error) *MockCharmRepositoryGetDownloadURLCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmRepositoryGetDownloadURLCall) Do(f func(context.Context, string, charm.Origin) (*url.URL, charm.Origin, error)) *MockCharmRepositoryGetDownloadURLCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmRepositoryGetDownloadURLCall) DoAndReturn(f func(context.Context, string, charm.Origin) (*url.URL, charm.Origin, error)) *MockCharmRepositoryGetDownloadURLCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResolveWithPreferredChannel mocks base method.
func (m *MockCharmRepository) ResolveWithPreferredChannel(arg0 context.Context, arg1 string, arg2 charm.Origin) (charm.ResolvedData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveWithPreferredChannel", arg0, arg1, arg2)
	ret0, _ := ret[0].(charm.ResolvedData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveWithPreferredChannel indicates an expected call of ResolveWithPreferredChannel.
func (mr *MockCharmRepositoryMockRecorder) ResolveWithPreferredChannel(arg0, arg1, arg2 any) *MockCharmRepositoryResolveWithPreferredChannelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveWithPreferredChannel", reflect.TypeOf((*MockCharmRepository)(nil).ResolveWithPreferredChannel), arg0, arg1, arg2)
	return &MockCharmRepositoryResolveWithPreferredChannelCall{Call: call}
}

// MockCharmRepositoryResolveWithPreferredChannelCall wrap *gomock.Call
type MockCharmRepositoryResolveWithPreferredChannelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmRepositoryResolveWithPreferredChannelCall) Return(arg0 charm.ResolvedData, arg1 error) *MockCharmRepositoryResolveWithPreferredChannelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmRepositoryResolveWithPreferredChannelCall) Do(f func(context.Context, string, charm.Origin) (charm.ResolvedData, error)) *MockCharmRepositoryResolveWithPreferredChannelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmRepositoryResolveWithPreferredChannelCall) DoAndReturn(f func(context.Context, string, charm.Origin) (charm.ResolvedData, error)) *MockCharmRepositoryResolveWithPreferredChannelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
