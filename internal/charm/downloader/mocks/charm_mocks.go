// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/charm/downloader (interfaces: CharmArchive)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/charm_mocks.go github.com/juju/juju/internal/charm/downloader CharmArchive
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	charm "github.com/juju/charm/v13"
	gomock "go.uber.org/mock/gomock"
)

// MockCharmArchive is a mock of CharmArchive interface.
type MockCharmArchive struct {
	ctrl     *gomock.Controller
	recorder *MockCharmArchiveMockRecorder
}

// MockCharmArchiveMockRecorder is the mock recorder for MockCharmArchive.
type MockCharmArchiveMockRecorder struct {
	mock *MockCharmArchive
}

// NewMockCharmArchive creates a new mock instance.
func NewMockCharmArchive(ctrl *gomock.Controller) *MockCharmArchive {
	mock := &MockCharmArchive{ctrl: ctrl}
	mock.recorder = &MockCharmArchiveMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmArchive) EXPECT() *MockCharmArchiveMockRecorder {
	return m.recorder
}

// Actions mocks base method.
func (m *MockCharmArchive) Actions() *charm.Actions {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Actions")
	ret0, _ := ret[0].(*charm.Actions)
	return ret0
}

// Actions indicates an expected call of Actions.
func (mr *MockCharmArchiveMockRecorder) Actions() *MockCharmArchiveActionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Actions", reflect.TypeOf((*MockCharmArchive)(nil).Actions))
	return &MockCharmArchiveActionsCall{Call: call}
}

// MockCharmArchiveActionsCall wrap *gomock.Call
type MockCharmArchiveActionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmArchiveActionsCall) Return(arg0 *charm.Actions) *MockCharmArchiveActionsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmArchiveActionsCall) Do(f func() *charm.Actions) *MockCharmArchiveActionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmArchiveActionsCall) DoAndReturn(f func() *charm.Actions) *MockCharmArchiveActionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Config mocks base method.
func (m *MockCharmArchive) Config() *charm.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*charm.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockCharmArchiveMockRecorder) Config() *MockCharmArchiveConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockCharmArchive)(nil).Config))
	return &MockCharmArchiveConfigCall{Call: call}
}

// MockCharmArchiveConfigCall wrap *gomock.Call
type MockCharmArchiveConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmArchiveConfigCall) Return(arg0 *charm.Config) *MockCharmArchiveConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmArchiveConfigCall) Do(f func() *charm.Config) *MockCharmArchiveConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmArchiveConfigCall) DoAndReturn(f func() *charm.Config) *MockCharmArchiveConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LXDProfile mocks base method.
func (m *MockCharmArchive) LXDProfile() *charm.LXDProfile {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LXDProfile")
	ret0, _ := ret[0].(*charm.LXDProfile)
	return ret0
}

// LXDProfile indicates an expected call of LXDProfile.
func (mr *MockCharmArchiveMockRecorder) LXDProfile() *MockCharmArchiveLXDProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LXDProfile", reflect.TypeOf((*MockCharmArchive)(nil).LXDProfile))
	return &MockCharmArchiveLXDProfileCall{Call: call}
}

// MockCharmArchiveLXDProfileCall wrap *gomock.Call
type MockCharmArchiveLXDProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmArchiveLXDProfileCall) Return(arg0 *charm.LXDProfile) *MockCharmArchiveLXDProfileCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmArchiveLXDProfileCall) Do(f func() *charm.LXDProfile) *MockCharmArchiveLXDProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmArchiveLXDProfileCall) DoAndReturn(f func() *charm.LXDProfile) *MockCharmArchiveLXDProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Manifest mocks base method.
func (m *MockCharmArchive) Manifest() *charm.Manifest {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Manifest")
	ret0, _ := ret[0].(*charm.Manifest)
	return ret0
}

// Manifest indicates an expected call of Manifest.
func (mr *MockCharmArchiveMockRecorder) Manifest() *MockCharmArchiveManifestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Manifest", reflect.TypeOf((*MockCharmArchive)(nil).Manifest))
	return &MockCharmArchiveManifestCall{Call: call}
}

// MockCharmArchiveManifestCall wrap *gomock.Call
type MockCharmArchiveManifestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmArchiveManifestCall) Return(arg0 *charm.Manifest) *MockCharmArchiveManifestCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmArchiveManifestCall) Do(f func() *charm.Manifest) *MockCharmArchiveManifestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmArchiveManifestCall) DoAndReturn(f func() *charm.Manifest) *MockCharmArchiveManifestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Meta mocks base method.
func (m *MockCharmArchive) Meta() *charm.Meta {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Meta")
	ret0, _ := ret[0].(*charm.Meta)
	return ret0
}

// Meta indicates an expected call of Meta.
func (mr *MockCharmArchiveMockRecorder) Meta() *MockCharmArchiveMetaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Meta", reflect.TypeOf((*MockCharmArchive)(nil).Meta))
	return &MockCharmArchiveMetaCall{Call: call}
}

// MockCharmArchiveMetaCall wrap *gomock.Call
type MockCharmArchiveMetaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmArchiveMetaCall) Return(arg0 *charm.Meta) *MockCharmArchiveMetaCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmArchiveMetaCall) Do(f func() *charm.Meta) *MockCharmArchiveMetaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmArchiveMetaCall) DoAndReturn(f func() *charm.Meta) *MockCharmArchiveMetaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Revision mocks base method.
func (m *MockCharmArchive) Revision() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revision")
	ret0, _ := ret[0].(int)
	return ret0
}

// Revision indicates an expected call of Revision.
func (mr *MockCharmArchiveMockRecorder) Revision() *MockCharmArchiveRevisionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revision", reflect.TypeOf((*MockCharmArchive)(nil).Revision))
	return &MockCharmArchiveRevisionCall{Call: call}
}

// MockCharmArchiveRevisionCall wrap *gomock.Call
type MockCharmArchiveRevisionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmArchiveRevisionCall) Return(arg0 int) *MockCharmArchiveRevisionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmArchiveRevisionCall) Do(f func() int) *MockCharmArchiveRevisionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmArchiveRevisionCall) DoAndReturn(f func() int) *MockCharmArchiveRevisionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Version mocks base method.
func (m *MockCharmArchive) Version() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Version")
	ret0, _ := ret[0].(string)
	return ret0
}

// Version indicates an expected call of Version.
func (mr *MockCharmArchiveMockRecorder) Version() *MockCharmArchiveVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Version", reflect.TypeOf((*MockCharmArchive)(nil).Version))
	return &MockCharmArchiveVersionCall{Call: call}
}

// MockCharmArchiveVersionCall wrap *gomock.Call
type MockCharmArchiveVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmArchiveVersionCall) Return(arg0 string) *MockCharmArchiveVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmArchiveVersionCall) Do(f func() string) *MockCharmArchiveVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmArchiveVersionCall) DoAndReturn(f func() string) *MockCharmArchiveVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
