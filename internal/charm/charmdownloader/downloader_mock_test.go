// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/charm/charmdownloader (interfaces: CharmRepository,RepositoryGetter)
//
// Generated by this command:
//
//	mockgen -typed -package charmdownloader -destination downloader_mock_test.go github.com/juju/juju/internal/charm/charmdownloader CharmRepository,RepositoryGetter
//

// Package charmdownloader is a generated GoMock package.
package charmdownloader

import (
	context "context"
	reflect "reflect"

	charm "github.com/juju/juju/core/charm"
	charmhub "github.com/juju/juju/internal/charmhub"
	gomock "go.uber.org/mock/gomock"
)

// MockCharmRepository is a mock of CharmRepository interface.
type MockCharmRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCharmRepositoryMockRecorder
}

// MockCharmRepositoryMockRecorder is the mock recorder for MockCharmRepository.
type MockCharmRepositoryMockRecorder struct {
	mock *MockCharmRepository
}

// NewMockCharmRepository creates a new mock instance.
func NewMockCharmRepository(ctrl *gomock.Controller) *MockCharmRepository {
	mock := &MockCharmRepository{ctrl: ctrl}
	mock.recorder = &MockCharmRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmRepository) EXPECT() *MockCharmRepositoryMockRecorder {
	return m.recorder
}

// Download mocks base method.
func (m *MockCharmRepository) Download(arg0 context.Context, arg1 string, arg2 charm.Origin, arg3 string) (charm.Origin, *charmhub.Digest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(charm.Origin)
	ret1, _ := ret[1].(*charmhub.Digest)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Download indicates an expected call of Download.
func (mr *MockCharmRepositoryMockRecorder) Download(arg0, arg1, arg2, arg3 any) *MockCharmRepositoryDownloadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockCharmRepository)(nil).Download), arg0, arg1, arg2, arg3)
	return &MockCharmRepositoryDownloadCall{Call: call}
}

// MockCharmRepositoryDownloadCall wrap *gomock.Call
type MockCharmRepositoryDownloadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmRepositoryDownloadCall) Return(arg0 charm.Origin, arg1 *charmhub.Digest, arg2 error) *MockCharmRepositoryDownloadCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmRepositoryDownloadCall) Do(f func(context.Context, string, charm.Origin, string) (charm.Origin, *charmhub.Digest, error)) *MockCharmRepositoryDownloadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmRepositoryDownloadCall) DoAndReturn(f func(context.Context, string, charm.Origin, string) (charm.Origin, *charmhub.Digest, error)) *MockCharmRepositoryDownloadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRepositoryGetter is a mock of RepositoryGetter interface.
type MockRepositoryGetter struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryGetterMockRecorder
}

// MockRepositoryGetterMockRecorder is the mock recorder for MockRepositoryGetter.
type MockRepositoryGetterMockRecorder struct {
	mock *MockRepositoryGetter
}

// NewMockRepositoryGetter creates a new mock instance.
func NewMockRepositoryGetter(ctrl *gomock.Controller) *MockRepositoryGetter {
	mock := &MockRepositoryGetter{ctrl: ctrl}
	mock.recorder = &MockRepositoryGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryGetter) EXPECT() *MockRepositoryGetterMockRecorder {
	return m.recorder
}

// GetCharmRepository mocks base method.
func (m *MockRepositoryGetter) GetCharmRepository(arg0 context.Context, arg1 charm.Source) (CharmRepository, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmRepository", arg0, arg1)
	ret0, _ := ret[0].(CharmRepository)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmRepository indicates an expected call of GetCharmRepository.
func (mr *MockRepositoryGetterMockRecorder) GetCharmRepository(arg0, arg1 any) *MockRepositoryGetterGetCharmRepositoryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmRepository", reflect.TypeOf((*MockRepositoryGetter)(nil).GetCharmRepository), arg0, arg1)
	return &MockRepositoryGetterGetCharmRepositoryCall{Call: call}
}

// MockRepositoryGetterGetCharmRepositoryCall wrap *gomock.Call
type MockRepositoryGetterGetCharmRepositoryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRepositoryGetterGetCharmRepositoryCall) Return(arg0 CharmRepository, arg1 error) *MockRepositoryGetterGetCharmRepositoryCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRepositoryGetterGetCharmRepositoryCall) Do(f func(context.Context, charm.Source) (CharmRepository, error)) *MockRepositoryGetterGetCharmRepositoryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRepositoryGetterGetCharmRepositoryCall) DoAndReturn(f func(context.Context, charm.Source) (CharmRepository, error)) *MockRepositoryGetterGetCharmRepositoryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
