// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/controlleragentconfig (interfaces: ConfigWatcher)
//
// Generated by this command:
//
//	mockgen -package dbaccessor -destination controllerconfig_mock_test.go github.com/juju/juju/internal/worker/controlleragentconfig ConfigWatcher
//

// Package dbaccessor is a generated GoMock package.
package dbaccessor

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockConfigWatcher is a mock of ConfigWatcher interface.
type MockConfigWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockConfigWatcherMockRecorder
}

// MockConfigWatcherMockRecorder is the mock recorder for MockConfigWatcher.
type MockConfigWatcherMockRecorder struct {
	mock *MockConfigWatcher
}

// NewMockConfigWatcher creates a new mock instance.
func NewMockConfigWatcher(ctrl *gomock.Controller) *MockConfigWatcher {
	mock := &MockConfigWatcher{ctrl: ctrl}
	mock.recorder = &MockConfigWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigWatcher) EXPECT() *MockConfigWatcherMockRecorder {
	return m.recorder
}

// Changes mocks base method.
func (m *MockConfigWatcher) Changes() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Changes")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Changes indicates an expected call of Changes.
func (mr *MockConfigWatcherMockRecorder) Changes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changes", reflect.TypeOf((*MockConfigWatcher)(nil).Changes))
}

// Done mocks base method.
func (m *MockConfigWatcher) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockConfigWatcherMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockConfigWatcher)(nil).Done))
}

// Unsubscribe mocks base method.
func (m *MockConfigWatcher) Unsubscribe() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe")
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockConfigWatcherMockRecorder) Unsubscribe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockConfigWatcher)(nil).Unsubscribe))
}
