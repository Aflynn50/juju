// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/logger (interfaces: LoggerContextGetter,LoggerContext)
//
// Generated by this command:
//
//	mockgen -typed -package domainservices -destination logger_mock_test.go github.com/juju/juju/core/logger LoggerContextGetter,LoggerContext
//

// Package domainservices is a generated GoMock package.
package domainservices

import (
	context "context"
	reflect "reflect"

	logger "github.com/juju/juju/core/logger"
	model "github.com/juju/juju/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockLoggerContextGetter is a mock of LoggerContextGetter interface.
type MockLoggerContextGetter struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerContextGetterMockRecorder
}

// MockLoggerContextGetterMockRecorder is the mock recorder for MockLoggerContextGetter.
type MockLoggerContextGetterMockRecorder struct {
	mock *MockLoggerContextGetter
}

// NewMockLoggerContextGetter creates a new mock instance.
func NewMockLoggerContextGetter(ctrl *gomock.Controller) *MockLoggerContextGetter {
	mock := &MockLoggerContextGetter{ctrl: ctrl}
	mock.recorder = &MockLoggerContextGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerContextGetter) EXPECT() *MockLoggerContextGetterMockRecorder {
	return m.recorder
}

// GetLoggerContext mocks base method.
func (m *MockLoggerContextGetter) GetLoggerContext(arg0 context.Context, arg1 model.UUID) (logger.LoggerContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLoggerContext", arg0, arg1)
	ret0, _ := ret[0].(logger.LoggerContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLoggerContext indicates an expected call of GetLoggerContext.
func (mr *MockLoggerContextGetterMockRecorder) GetLoggerContext(arg0, arg1 any) *MockLoggerContextGetterGetLoggerContextCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoggerContext", reflect.TypeOf((*MockLoggerContextGetter)(nil).GetLoggerContext), arg0, arg1)
	return &MockLoggerContextGetterGetLoggerContextCall{Call: call}
}

// MockLoggerContextGetterGetLoggerContextCall wrap *gomock.Call
type MockLoggerContextGetterGetLoggerContextCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerContextGetterGetLoggerContextCall) Return(arg0 logger.LoggerContext, arg1 error) *MockLoggerContextGetterGetLoggerContextCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerContextGetterGetLoggerContextCall) Do(f func(context.Context, model.UUID) (logger.LoggerContext, error)) *MockLoggerContextGetterGetLoggerContextCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerContextGetterGetLoggerContextCall) DoAndReturn(f func(context.Context, model.UUID) (logger.LoggerContext, error)) *MockLoggerContextGetterGetLoggerContextCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLoggerContext is a mock of LoggerContext interface.
type MockLoggerContext struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerContextMockRecorder
}

// MockLoggerContextMockRecorder is the mock recorder for MockLoggerContext.
type MockLoggerContextMockRecorder struct {
	mock *MockLoggerContext
}

// NewMockLoggerContext creates a new mock instance.
func NewMockLoggerContext(ctrl *gomock.Controller) *MockLoggerContext {
	mock := &MockLoggerContext{ctrl: ctrl}
	mock.recorder = &MockLoggerContextMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoggerContext) EXPECT() *MockLoggerContextMockRecorder {
	return m.recorder
}

// Config mocks base method.
func (m *MockLoggerContext) Config() logger.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(logger.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockLoggerContextMockRecorder) Config() *MockLoggerContextConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockLoggerContext)(nil).Config))
	return &MockLoggerContextConfigCall{Call: call}
}

// MockLoggerContextConfigCall wrap *gomock.Call
type MockLoggerContextConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerContextConfigCall) Return(arg0 logger.Config) *MockLoggerContextConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerContextConfigCall) Do(f func() logger.Config) *MockLoggerContextConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerContextConfigCall) DoAndReturn(f func() logger.Config) *MockLoggerContextConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ConfigureLoggers mocks base method.
func (m *MockLoggerContext) ConfigureLoggers(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigureLoggers", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConfigureLoggers indicates an expected call of ConfigureLoggers.
func (mr *MockLoggerContextMockRecorder) ConfigureLoggers(arg0 any) *MockLoggerContextConfigureLoggersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigureLoggers", reflect.TypeOf((*MockLoggerContext)(nil).ConfigureLoggers), arg0)
	return &MockLoggerContextConfigureLoggersCall{Call: call}
}

// MockLoggerContextConfigureLoggersCall wrap *gomock.Call
type MockLoggerContextConfigureLoggersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerContextConfigureLoggersCall) Return(arg0 error) *MockLoggerContextConfigureLoggersCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerContextConfigureLoggersCall) Do(f func(string) error) *MockLoggerContextConfigureLoggersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerContextConfigureLoggersCall) DoAndReturn(f func(string) error) *MockLoggerContextConfigureLoggersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetLogger mocks base method.
func (m *MockLoggerContext) GetLogger(arg0 string, arg1 ...string) logger.Logger {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLogger", varargs...)
	ret0, _ := ret[0].(logger.Logger)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockLoggerContextMockRecorder) GetLogger(arg0 any, arg1 ...any) *MockLoggerContextGetLoggerCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockLoggerContext)(nil).GetLogger), varargs...)
	return &MockLoggerContextGetLoggerCall{Call: call}
}

// MockLoggerContextGetLoggerCall wrap *gomock.Call
type MockLoggerContextGetLoggerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerContextGetLoggerCall) Return(arg0 logger.Logger) *MockLoggerContextGetLoggerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerContextGetLoggerCall) Do(f func(string, ...string) logger.Logger) *MockLoggerContextGetLoggerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerContextGetLoggerCall) DoAndReturn(f func(string, ...string) logger.Logger) *MockLoggerContextGetLoggerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResetLoggerLevels mocks base method.
func (m *MockLoggerContext) ResetLoggerLevels() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ResetLoggerLevels")
}

// ResetLoggerLevels indicates an expected call of ResetLoggerLevels.
func (mr *MockLoggerContextMockRecorder) ResetLoggerLevels() *MockLoggerContextResetLoggerLevelsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetLoggerLevels", reflect.TypeOf((*MockLoggerContext)(nil).ResetLoggerLevels))
	return &MockLoggerContextResetLoggerLevelsCall{Call: call}
}

// MockLoggerContextResetLoggerLevelsCall wrap *gomock.Call
type MockLoggerContextResetLoggerLevelsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerContextResetLoggerLevelsCall) Return() *MockLoggerContextResetLoggerLevelsCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerContextResetLoggerLevelsCall) Do(f func()) *MockLoggerContextResetLoggerLevelsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerContextResetLoggerLevelsCall) DoAndReturn(f func()) *MockLoggerContextResetLoggerLevelsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
