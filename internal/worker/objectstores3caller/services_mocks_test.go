// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/objectstores3caller (interfaces: ControllerService)
//
// Generated by this command:
//
//	mockgen -package objectstores3caller -destination services_mocks_test.go github.com/juju/juju/internal/worker/objectstores3caller ControllerService
//

// Package objectstores3caller is a generated GoMock package.
package objectstores3caller

import (
	context "context"
	reflect "reflect"

	controller "github.com/juju/juju/controller"
	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerService is a mock of ControllerService interface.
type MockControllerService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerServiceMockRecorder
}

// MockControllerServiceMockRecorder is the mock recorder for MockControllerService.
type MockControllerServiceMockRecorder struct {
	mock *MockControllerService
}

// NewMockControllerService creates a new mock instance.
func NewMockControllerService(ctrl *gomock.Controller) *MockControllerService {
	mock := &MockControllerService{ctrl: ctrl}
	mock.recorder = &MockControllerServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerService) EXPECT() *MockControllerServiceMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerService) ControllerConfig(arg0 context.Context) (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerServiceMockRecorder) ControllerConfig(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerService)(nil).ControllerConfig), arg0)
}

// Watch mocks base method.
func (m *MockControllerService) Watch() (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch")
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockControllerServiceMockRecorder) Watch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockControllerService)(nil).Watch))
}
