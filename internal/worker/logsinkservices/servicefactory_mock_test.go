// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/services (interfaces: LogSinkServices)
//
// Generated by this command:
//
//	mockgen -typed -package logsinkservices -destination servicefactory_mock_test.go github.com/juju/juju/internal/services LogSinkServices
//

// Package logsinkservices is a generated GoMock package.
package logsinkservices

import (
	reflect "reflect"

	service "github.com/juju/juju/domain/controllerconfig/service"
	service0 "github.com/juju/juju/domain/model/service"
	gomock "go.uber.org/mock/gomock"
)

// MockLogSinkServices is a mock of LogSinkServices interface.
type MockLogSinkServices struct {
	ctrl     *gomock.Controller
	recorder *MockLogSinkServicesMockRecorder
}

// MockLogSinkServicesMockRecorder is the mock recorder for MockLogSinkServices.
type MockLogSinkServicesMockRecorder struct {
	mock *MockLogSinkServices
}

// NewMockLogSinkServices creates a new mock instance.
func NewMockLogSinkServices(ctrl *gomock.Controller) *MockLogSinkServices {
	mock := &MockLogSinkServices{ctrl: ctrl}
	mock.recorder = &MockLogSinkServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogSinkServices) EXPECT() *MockLogSinkServicesMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockLogSinkServices) ControllerConfig() *service.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig")
	ret0, _ := ret[0].(*service.WatchableService)
	return ret0
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockLogSinkServicesMockRecorder) ControllerConfig() *MockLogSinkServicesControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockLogSinkServices)(nil).ControllerConfig))
	return &MockLogSinkServicesControllerConfigCall{Call: call}
}

// MockLogSinkServicesControllerConfigCall wrap *gomock.Call
type MockLogSinkServicesControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLogSinkServicesControllerConfigCall) Return(arg0 *service.WatchableService) *MockLogSinkServicesControllerConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLogSinkServicesControllerConfigCall) Do(f func() *service.WatchableService) *MockLogSinkServicesControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLogSinkServicesControllerConfigCall) DoAndReturn(f func() *service.WatchableService) *MockLogSinkServicesControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Model mocks base method.
func (m *MockLogSinkServices) Model() *service0.LogSinkService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model")
	ret0, _ := ret[0].(*service0.LogSinkService)
	return ret0
}

// Model indicates an expected call of Model.
func (mr *MockLogSinkServicesMockRecorder) Model() *MockLogSinkServicesModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockLogSinkServices)(nil).Model))
	return &MockLogSinkServicesModelCall{Call: call}
}

// MockLogSinkServicesModelCall wrap *gomock.Call
type MockLogSinkServicesModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLogSinkServicesModelCall) Return(arg0 *service0.LogSinkService) *MockLogSinkServicesModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLogSinkServicesModelCall) Do(f func() *service0.LogSinkService) *MockLogSinkServicesModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLogSinkServicesModelCall) DoAndReturn(f func() *service0.LogSinkService) *MockLogSinkServicesModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
