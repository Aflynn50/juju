// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/removal (interfaces: RemovalService)
//
// Generated by this command:
//
//	mockgen -typed -package removal -destination package_mocks_test.go github.com/juju/juju/internal/worker/removal RemovalService
//

// Package removal is a generated GoMock package.
package removal

import (
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockRemovalService is a mock of RemovalService interface.
type MockRemovalService struct {
	ctrl     *gomock.Controller
	recorder *MockRemovalServiceMockRecorder
}

// MockRemovalServiceMockRecorder is the mock recorder for MockRemovalService.
type MockRemovalServiceMockRecorder struct {
	mock *MockRemovalService
}

// NewMockRemovalService creates a new mock instance.
func NewMockRemovalService(ctrl *gomock.Controller) *MockRemovalService {
	mock := &MockRemovalService{ctrl: ctrl}
	mock.recorder = &MockRemovalServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemovalService) EXPECT() *MockRemovalServiceMockRecorder {
	return m.recorder
}

// WatchRemovals mocks base method.
func (m *MockRemovalService) WatchRemovals() (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRemovals")
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRemovals indicates an expected call of WatchRemovals.
func (mr *MockRemovalServiceMockRecorder) WatchRemovals() *MockRemovalServiceWatchRemovalsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRemovals", reflect.TypeOf((*MockRemovalService)(nil).WatchRemovals))
	return &MockRemovalServiceWatchRemovalsCall{Call: call}
}

// MockRemovalServiceWatchRemovalsCall wrap *gomock.Call
type MockRemovalServiceWatchRemovalsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRemovalServiceWatchRemovalsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockRemovalServiceWatchRemovalsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRemovalServiceWatchRemovalsCall) Do(f func() (watcher.Watcher[[]string], error)) *MockRemovalServiceWatchRemovalsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRemovalServiceWatchRemovalsCall) DoAndReturn(f func() (watcher.Watcher[[]string], error)) *MockRemovalServiceWatchRemovalsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
