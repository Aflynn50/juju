// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/charmdownloader (interfaces: CharmDownloaderAPI)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/mocks.go github.com/juju/juju/internal/worker/charmdownloader CharmDownloaderAPI
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	names "github.com/juju/names/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockCharmDownloaderAPI is a mock of CharmDownloaderAPI interface.
type MockCharmDownloaderAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCharmDownloaderAPIMockRecorder
}

// MockCharmDownloaderAPIMockRecorder is the mock recorder for MockCharmDownloaderAPI.
type MockCharmDownloaderAPIMockRecorder struct {
	mock *MockCharmDownloaderAPI
}

// NewMockCharmDownloaderAPI creates a new mock instance.
func NewMockCharmDownloaderAPI(ctrl *gomock.Controller) *MockCharmDownloaderAPI {
	mock := &MockCharmDownloaderAPI{ctrl: ctrl}
	mock.recorder = &MockCharmDownloaderAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmDownloaderAPI) EXPECT() *MockCharmDownloaderAPIMockRecorder {
	return m.recorder
}

// DownloadApplicationCharms mocks base method.
func (m *MockCharmDownloaderAPI) DownloadApplicationCharms(arg0 context.Context, arg1 []names.ApplicationTag) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadApplicationCharms", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadApplicationCharms indicates an expected call of DownloadApplicationCharms.
func (mr *MockCharmDownloaderAPIMockRecorder) DownloadApplicationCharms(arg0, arg1 any) *MockCharmDownloaderAPIDownloadApplicationCharmsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadApplicationCharms", reflect.TypeOf((*MockCharmDownloaderAPI)(nil).DownloadApplicationCharms), arg0, arg1)
	return &MockCharmDownloaderAPIDownloadApplicationCharmsCall{Call: call}
}

// MockCharmDownloaderAPIDownloadApplicationCharmsCall wrap *gomock.Call
type MockCharmDownloaderAPIDownloadApplicationCharmsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmDownloaderAPIDownloadApplicationCharmsCall) Return(arg0 error) *MockCharmDownloaderAPIDownloadApplicationCharmsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmDownloaderAPIDownloadApplicationCharmsCall) Do(f func(context.Context, []names.ApplicationTag) error) *MockCharmDownloaderAPIDownloadApplicationCharmsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmDownloaderAPIDownloadApplicationCharmsCall) DoAndReturn(f func(context.Context, []names.ApplicationTag) error) *MockCharmDownloaderAPIDownloadApplicationCharmsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchApplicationsWithPendingCharms mocks base method.
func (m *MockCharmDownloaderAPI) WatchApplicationsWithPendingCharms(arg0 context.Context) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchApplicationsWithPendingCharms", arg0)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchApplicationsWithPendingCharms indicates an expected call of WatchApplicationsWithPendingCharms.
func (mr *MockCharmDownloaderAPIMockRecorder) WatchApplicationsWithPendingCharms(arg0 any) *MockCharmDownloaderAPIWatchApplicationsWithPendingCharmsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApplicationsWithPendingCharms", reflect.TypeOf((*MockCharmDownloaderAPI)(nil).WatchApplicationsWithPendingCharms), arg0)
	return &MockCharmDownloaderAPIWatchApplicationsWithPendingCharmsCall{Call: call}
}

// MockCharmDownloaderAPIWatchApplicationsWithPendingCharmsCall wrap *gomock.Call
type MockCharmDownloaderAPIWatchApplicationsWithPendingCharmsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmDownloaderAPIWatchApplicationsWithPendingCharmsCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockCharmDownloaderAPIWatchApplicationsWithPendingCharmsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmDownloaderAPIWatchApplicationsWithPendingCharmsCall) Do(f func(context.Context) (watcher.Watcher[[]string], error)) *MockCharmDownloaderAPIWatchApplicationsWithPendingCharmsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmDownloaderAPIWatchApplicationsWithPendingCharmsCall) DoAndReturn(f func(context.Context) (watcher.Watcher[[]string], error)) *MockCharmDownloaderAPIWatchApplicationsWithPendingCharmsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
