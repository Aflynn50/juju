// Code generated by MockGen. DO NOT EDIT.
// Source: rotate.go
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/client_mock.go -source rotate.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// Mocklogger is a mock of logger interface.
type Mocklogger struct {
	ctrl     *gomock.Controller
	recorder *MockloggerMockRecorder
}

// MockloggerMockRecorder is the mock recorder for Mocklogger.
type MockloggerMockRecorder struct {
	mock *Mocklogger
}

// NewMocklogger creates a new mock instance.
func NewMocklogger(ctrl *gomock.Controller) *Mocklogger {
	mock := &Mocklogger{ctrl: ctrl}
	mock.recorder = &MockloggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklogger) EXPECT() *MockloggerMockRecorder {
	return m.recorder
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debugf mocks base method.
func (m *MockLogger) Debugf(arg0 string, arg1 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerMockRecorder) Debugf(arg0 any, arg1 ...any) *MockLoggerDebugfCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
	return &MockLoggerDebugfCall{Call: call}
}

// MockLoggerDebugfCall wrap *gomock.Call
type MockLoggerDebugfCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerDebugfCall) Return() *MockLoggerDebugfCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerDebugfCall) Do(f func(string, ...any)) *MockLoggerDebugfCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerDebugfCall) DoAndReturn(f func(string, ...any)) *MockLoggerDebugfCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSecretBackendManagerFacade is a mock of SecretBackendManagerFacade interface.
type MockSecretBackendManagerFacade struct {
	ctrl     *gomock.Controller
	recorder *MockSecretBackendManagerFacadeMockRecorder
}

// MockSecretBackendManagerFacadeMockRecorder is the mock recorder for MockSecretBackendManagerFacade.
type MockSecretBackendManagerFacadeMockRecorder struct {
	mock *MockSecretBackendManagerFacade
}

// NewMockSecretBackendManagerFacade creates a new mock instance.
func NewMockSecretBackendManagerFacade(ctrl *gomock.Controller) *MockSecretBackendManagerFacade {
	mock := &MockSecretBackendManagerFacade{ctrl: ctrl}
	mock.recorder = &MockSecretBackendManagerFacadeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretBackendManagerFacade) EXPECT() *MockSecretBackendManagerFacadeMockRecorder {
	return m.recorder
}

// RotateBackendTokens mocks base method.
func (m *MockSecretBackendManagerFacade) RotateBackendTokens(info ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range info {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RotateBackendTokens", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RotateBackendTokens indicates an expected call of RotateBackendTokens.
func (mr *MockSecretBackendManagerFacadeMockRecorder) RotateBackendTokens(info ...any) *MockSecretBackendManagerFacadeRotateBackendTokensCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateBackendTokens", reflect.TypeOf((*MockSecretBackendManagerFacade)(nil).RotateBackendTokens), info...)
	return &MockSecretBackendManagerFacadeRotateBackendTokensCall{Call: call}
}

// MockSecretBackendManagerFacadeRotateBackendTokensCall wrap *gomock.Call
type MockSecretBackendManagerFacadeRotateBackendTokensCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendManagerFacadeRotateBackendTokensCall) Return(arg0 error) *MockSecretBackendManagerFacadeRotateBackendTokensCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendManagerFacadeRotateBackendTokensCall) Do(f func(...string) error) *MockSecretBackendManagerFacadeRotateBackendTokensCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendManagerFacadeRotateBackendTokensCall) DoAndReturn(f func(...string) error) *MockSecretBackendManagerFacadeRotateBackendTokensCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchTokenRotationChanges mocks base method.
func (m *MockSecretBackendManagerFacade) WatchTokenRotationChanges() (watcher.SecretBackendRotateWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchTokenRotationChanges")
	ret0, _ := ret[0].(watcher.SecretBackendRotateWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchTokenRotationChanges indicates an expected call of WatchTokenRotationChanges.
func (mr *MockSecretBackendManagerFacadeMockRecorder) WatchTokenRotationChanges() *MockSecretBackendManagerFacadeWatchTokenRotationChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTokenRotationChanges", reflect.TypeOf((*MockSecretBackendManagerFacade)(nil).WatchTokenRotationChanges))
	return &MockSecretBackendManagerFacadeWatchTokenRotationChangesCall{Call: call}
}

// MockSecretBackendManagerFacadeWatchTokenRotationChangesCall wrap *gomock.Call
type MockSecretBackendManagerFacadeWatchTokenRotationChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendManagerFacadeWatchTokenRotationChangesCall) Return(arg0 watcher.SecretBackendRotateWatcher, arg1 error) *MockSecretBackendManagerFacadeWatchTokenRotationChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendManagerFacadeWatchTokenRotationChangesCall) Do(f func() (watcher.SecretBackendRotateWatcher, error)) *MockSecretBackendManagerFacadeWatchTokenRotationChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendManagerFacadeWatchTokenRotationChangesCall) DoAndReturn(f func() (watcher.SecretBackendRotateWatcher, error)) *MockSecretBackendManagerFacadeWatchTokenRotationChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
