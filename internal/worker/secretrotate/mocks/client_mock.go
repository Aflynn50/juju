// Code generated by MockGen. DO NOT EDIT.
// Source: secretrotate.go
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/client_mock.go -source secretrotate.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	names "github.com/juju/names/v5"
	gomock "go.uber.org/mock/gomock"
)

// Mocklogger is a mock of logger interface.
type Mocklogger struct {
	ctrl     *gomock.Controller
	recorder *MockloggerMockRecorder
}

// MockloggerMockRecorder is the mock recorder for Mocklogger.
type MockloggerMockRecorder struct {
	mock *Mocklogger
}

// NewMocklogger creates a new mock instance.
func NewMocklogger(ctrl *gomock.Controller) *Mocklogger {
	mock := &Mocklogger{ctrl: ctrl}
	mock.recorder = &MockloggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocklogger) EXPECT() *MockloggerMockRecorder {
	return m.recorder
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debugf mocks base method.
func (m *MockLogger) Debugf(arg0 string, arg1 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerMockRecorder) Debugf(arg0 any, arg1 ...any) *MockLoggerDebugfCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
	return &MockLoggerDebugfCall{Call: call}
}

// MockLoggerDebugfCall wrap *gomock.Call
type MockLoggerDebugfCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerDebugfCall) Return() *MockLoggerDebugfCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerDebugfCall) Do(f func(string, ...any)) *MockLoggerDebugfCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerDebugfCall) DoAndReturn(f func(string, ...any)) *MockLoggerDebugfCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSecretManagerFacade is a mock of SecretManagerFacade interface.
type MockSecretManagerFacade struct {
	ctrl     *gomock.Controller
	recorder *MockSecretManagerFacadeMockRecorder
}

// MockSecretManagerFacadeMockRecorder is the mock recorder for MockSecretManagerFacade.
type MockSecretManagerFacadeMockRecorder struct {
	mock *MockSecretManagerFacade
}

// NewMockSecretManagerFacade creates a new mock instance.
func NewMockSecretManagerFacade(ctrl *gomock.Controller) *MockSecretManagerFacade {
	mock := &MockSecretManagerFacade{ctrl: ctrl}
	mock.recorder = &MockSecretManagerFacadeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretManagerFacade) EXPECT() *MockSecretManagerFacadeMockRecorder {
	return m.recorder
}

// WatchSecretsRotationChanges mocks base method.
func (m *MockSecretManagerFacade) WatchSecretsRotationChanges(ownerTags ...names.Tag) (watcher.SecretTriggerWatcher, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range ownerTags {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchSecretsRotationChanges", varargs...)
	ret0, _ := ret[0].(watcher.SecretTriggerWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSecretsRotationChanges indicates an expected call of WatchSecretsRotationChanges.
func (mr *MockSecretManagerFacadeMockRecorder) WatchSecretsRotationChanges(ownerTags ...any) *MockSecretManagerFacadeWatchSecretsRotationChangesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSecretsRotationChanges", reflect.TypeOf((*MockSecretManagerFacade)(nil).WatchSecretsRotationChanges), ownerTags...)
	return &MockSecretManagerFacadeWatchSecretsRotationChangesCall{Call: call}
}

// MockSecretManagerFacadeWatchSecretsRotationChangesCall wrap *gomock.Call
type MockSecretManagerFacadeWatchSecretsRotationChangesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretManagerFacadeWatchSecretsRotationChangesCall) Return(arg0 watcher.SecretTriggerWatcher, arg1 error) *MockSecretManagerFacadeWatchSecretsRotationChangesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretManagerFacadeWatchSecretsRotationChangesCall) Do(f func(...names.Tag) (watcher.SecretTriggerWatcher, error)) *MockSecretManagerFacadeWatchSecretsRotationChangesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretManagerFacadeWatchSecretsRotationChangesCall) DoAndReturn(f func(...names.Tag) (watcher.SecretTriggerWatcher, error)) *MockSecretManagerFacadeWatchSecretsRotationChangesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
