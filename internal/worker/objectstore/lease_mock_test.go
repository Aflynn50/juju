// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/lease (interfaces: Manager)
//
// Generated by this command:
//
//	mockgen -package objectstore -destination lease_mock_test.go github.com/juju/juju/core/lease Manager
//

// Package objectstore is a generated GoMock package.
package objectstore

import (
	reflect "reflect"

	lease "github.com/juju/juju/core/lease"
	gomock "go.uber.org/mock/gomock"
)

// MockManager is a mock of Manager interface.
type MockManager struct {
	ctrl     *gomock.Controller
	recorder *MockManagerMockRecorder
}

// MockManagerMockRecorder is the mock recorder for MockManager.
type MockManagerMockRecorder struct {
	mock *MockManager
}

// NewMockManager creates a new mock instance.
func NewMockManager(ctrl *gomock.Controller) *MockManager {
	mock := &MockManager{ctrl: ctrl}
	mock.recorder = &MockManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManager) EXPECT() *MockManagerMockRecorder {
	return m.recorder
}

// Checker mocks base method.
func (m *MockManager) Checker(arg0, arg1 string) (lease.Checker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Checker", arg0, arg1)
	ret0, _ := ret[0].(lease.Checker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Checker indicates an expected call of Checker.
func (mr *MockManagerMockRecorder) Checker(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Checker", reflect.TypeOf((*MockManager)(nil).Checker), arg0, arg1)
}

// Claimer mocks base method.
func (m *MockManager) Claimer(arg0, arg1 string) (lease.Claimer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Claimer", arg0, arg1)
	ret0, _ := ret[0].(lease.Claimer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Claimer indicates an expected call of Claimer.
func (mr *MockManagerMockRecorder) Claimer(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Claimer", reflect.TypeOf((*MockManager)(nil).Claimer), arg0, arg1)
}

// Pinner mocks base method.
func (m *MockManager) Pinner(arg0, arg1 string) (lease.Pinner, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pinner", arg0, arg1)
	ret0, _ := ret[0].(lease.Pinner)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Pinner indicates an expected call of Pinner.
func (mr *MockManagerMockRecorder) Pinner(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pinner", reflect.TypeOf((*MockManager)(nil).Pinner), arg0, arg1)
}

// Reader mocks base method.
func (m *MockManager) Reader(arg0, arg1 string) (lease.Reader, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reader", arg0, arg1)
	ret0, _ := ret[0].(lease.Reader)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reader indicates an expected call of Reader.
func (mr *MockManagerMockRecorder) Reader(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reader", reflect.TypeOf((*MockManager)(nil).Reader), arg0, arg1)
}

// Revoker mocks base method.
func (m *MockManager) Revoker(arg0, arg1 string) (lease.Revoker, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Revoker", arg0, arg1)
	ret0, _ := ret[0].(lease.Revoker)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Revoker indicates an expected call of Revoker.
func (mr *MockManagerMockRecorder) Revoker(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Revoker", reflect.TypeOf((*MockManager)(nil).Revoker), arg0, arg1)
}
