// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/api/agent/reboot (interfaces: Client)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	params "github.com/juju/juju/rpc/params"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ClearReboot mocks base method.
func (m *MockClient) ClearReboot() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearReboot")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearReboot indicates an expected call of ClearReboot.
func (mr *MockClientMockRecorder) ClearReboot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearReboot", reflect.TypeOf((*MockClient)(nil).ClearReboot))
}

// GetRebootAction mocks base method.
func (m *MockClient) GetRebootAction() (params.RebootAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRebootAction")
	ret0, _ := ret[0].(params.RebootAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRebootAction indicates an expected call of GetRebootAction.
func (mr *MockClientMockRecorder) GetRebootAction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRebootAction", reflect.TypeOf((*MockClient)(nil).GetRebootAction))
}

// RequestReboot mocks base method.
func (m *MockClient) RequestReboot() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestReboot")
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestReboot indicates an expected call of RequestReboot.
func (mr *MockClientMockRecorder) RequestReboot() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestReboot", reflect.TypeOf((*MockClient)(nil).RequestReboot))
}

// WatchForRebootEvent mocks base method.
func (m *MockClient) WatchForRebootEvent() (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchForRebootEvent")
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchForRebootEvent indicates an expected call of WatchForRebootEvent.
func (mr *MockClientMockRecorder) WatchForRebootEvent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchForRebootEvent", reflect.TypeOf((*MockClient)(nil).WatchForRebootEvent))
}
