// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/jwtparser (interfaces: ControllerConfig,HTTPClient)
//
// Generated by this command:
//
//	mockgen -package jwtparser -destination service_mock.go github.com/juju/juju/internal/worker/jwtparser ControllerConfig,HTTPClient
//

// Package jwtparser is a generated GoMock package.
package jwtparser

import (
	http "net/http"
	reflect "reflect"

	controller "github.com/juju/juju/controller"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerConfig is a mock of ControllerConfig interface.
type MockControllerConfig struct {
	ctrl     *gomock.Controller
	recorder *MockControllerConfigMockRecorder
}

// MockControllerConfigMockRecorder is the mock recorder for MockControllerConfig.
type MockControllerConfigMockRecorder struct {
	mock *MockControllerConfig
}

// NewMockControllerConfig creates a new mock instance.
func NewMockControllerConfig(ctrl *gomock.Controller) *MockControllerConfig {
	mock := &MockControllerConfig{ctrl: ctrl}
	mock.recorder = &MockControllerConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerConfig) EXPECT() *MockControllerConfigMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerConfig) ControllerConfig() (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig")
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerConfigMockRecorder) ControllerConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerConfig)(nil).ControllerConfig))
}

// MockHTTPClient is a mock of HTTPClient interface.
type MockHTTPClient struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPClientMockRecorder
}

// MockHTTPClientMockRecorder is the mock recorder for MockHTTPClient.
type MockHTTPClientMockRecorder struct {
	mock *MockHTTPClient
}

// NewMockHTTPClient creates a new mock instance.
func NewMockHTTPClient(ctrl *gomock.Controller) *MockHTTPClient {
	mock := &MockHTTPClient{ctrl: ctrl}
	mock.recorder = &MockHTTPClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPClient) EXPECT() *MockHTTPClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockHTTPClient) Get(arg0 string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockHTTPClientMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockHTTPClient)(nil).Get), arg0)
}
