// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/servicefactory (interfaces: ObjectStoreServices,ObjectStoreServicesGetter)
//
// Generated by this command:
//
//	mockgen -typed -package objectstoreservices -destination servicefactory_mock_test.go github.com/juju/juju/internal/servicefactory ObjectStoreServices,ObjectStoreServicesGetter
//

// Package objectstoreservices is a generated GoMock package.
package objectstoreservices

import (
	reflect "reflect"

	model "github.com/juju/juju/core/model"
	service "github.com/juju/juju/domain/controllerconfig/service"
	service0 "github.com/juju/juju/domain/objectstore/service"
	servicefactory "github.com/juju/juju/internal/servicefactory"
	gomock "go.uber.org/mock/gomock"
)

// MockObjectStoreServices is a mock of ObjectStoreServices interface.
type MockObjectStoreServices struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStoreServicesMockRecorder
}

// MockObjectStoreServicesMockRecorder is the mock recorder for MockObjectStoreServices.
type MockObjectStoreServicesMockRecorder struct {
	mock *MockObjectStoreServices
}

// NewMockObjectStoreServices creates a new mock instance.
func NewMockObjectStoreServices(ctrl *gomock.Controller) *MockObjectStoreServices {
	mock := &MockObjectStoreServices{ctrl: ctrl}
	mock.recorder = &MockObjectStoreServicesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStoreServices) EXPECT() *MockObjectStoreServicesMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockObjectStoreServices) ControllerConfig() *service.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig")
	ret0, _ := ret[0].(*service.WatchableService)
	return ret0
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockObjectStoreServicesMockRecorder) ControllerConfig() *MockObjectStoreServicesControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockObjectStoreServices)(nil).ControllerConfig))
	return &MockObjectStoreServicesControllerConfigCall{Call: call}
}

// MockObjectStoreServicesControllerConfigCall wrap *gomock.Call
type MockObjectStoreServicesControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectStoreServicesControllerConfigCall) Return(arg0 *service.WatchableService) *MockObjectStoreServicesControllerConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectStoreServicesControllerConfigCall) Do(f func() *service.WatchableService) *MockObjectStoreServicesControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectStoreServicesControllerConfigCall) DoAndReturn(f func() *service.WatchableService) *MockObjectStoreServicesControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ObjectStore mocks base method.
func (m *MockObjectStoreServices) ObjectStore() *service0.WatchableService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectStore")
	ret0, _ := ret[0].(*service0.WatchableService)
	return ret0
}

// ObjectStore indicates an expected call of ObjectStore.
func (mr *MockObjectStoreServicesMockRecorder) ObjectStore() *MockObjectStoreServicesObjectStoreCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectStore", reflect.TypeOf((*MockObjectStoreServices)(nil).ObjectStore))
	return &MockObjectStoreServicesObjectStoreCall{Call: call}
}

// MockObjectStoreServicesObjectStoreCall wrap *gomock.Call
type MockObjectStoreServicesObjectStoreCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectStoreServicesObjectStoreCall) Return(arg0 *service0.WatchableService) *MockObjectStoreServicesObjectStoreCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectStoreServicesObjectStoreCall) Do(f func() *service0.WatchableService) *MockObjectStoreServicesObjectStoreCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectStoreServicesObjectStoreCall) DoAndReturn(f func() *service0.WatchableService) *MockObjectStoreServicesObjectStoreCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockObjectStoreServicesGetter is a mock of ObjectStoreServicesGetter interface.
type MockObjectStoreServicesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStoreServicesGetterMockRecorder
}

// MockObjectStoreServicesGetterMockRecorder is the mock recorder for MockObjectStoreServicesGetter.
type MockObjectStoreServicesGetterMockRecorder struct {
	mock *MockObjectStoreServicesGetter
}

// NewMockObjectStoreServicesGetter creates a new mock instance.
func NewMockObjectStoreServicesGetter(ctrl *gomock.Controller) *MockObjectStoreServicesGetter {
	mock := &MockObjectStoreServicesGetter{ctrl: ctrl}
	mock.recorder = &MockObjectStoreServicesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStoreServicesGetter) EXPECT() *MockObjectStoreServicesGetterMockRecorder {
	return m.recorder
}

// FactoryForModel mocks base method.
func (m *MockObjectStoreServicesGetter) FactoryForModel(arg0 model.UUID) servicefactory.ObjectStoreServices {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FactoryForModel", arg0)
	ret0, _ := ret[0].(servicefactory.ObjectStoreServices)
	return ret0
}

// FactoryForModel indicates an expected call of FactoryForModel.
func (mr *MockObjectStoreServicesGetterMockRecorder) FactoryForModel(arg0 any) *MockObjectStoreServicesGetterFactoryForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FactoryForModel", reflect.TypeOf((*MockObjectStoreServicesGetter)(nil).FactoryForModel), arg0)
	return &MockObjectStoreServicesGetterFactoryForModelCall{Call: call}
}

// MockObjectStoreServicesGetterFactoryForModelCall wrap *gomock.Call
type MockObjectStoreServicesGetterFactoryForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectStoreServicesGetterFactoryForModelCall) Return(arg0 servicefactory.ObjectStoreServices) *MockObjectStoreServicesGetterFactoryForModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectStoreServicesGetterFactoryForModelCall) Do(f func(model.UUID) servicefactory.ObjectStoreServices) *MockObjectStoreServicesGetterFactoryForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectStoreServicesGetterFactoryForModelCall) DoAndReturn(f func(model.UUID) servicefactory.ObjectStoreServices) *MockObjectStoreServicesGetterFactoryForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
