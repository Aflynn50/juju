// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/secretspruner (interfaces: Logger,SecretsFacade)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/worker_mock.go github.com/juju/juju/internal/worker/secretspruner Logger,SecretsFacade
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debugf mocks base method.
func (m *MockLogger) Debugf(arg0 string, arg1 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerMockRecorder) Debugf(arg0 any, arg1 ...any) *MockLoggerDebugfCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
	return &MockLoggerDebugfCall{Call: call}
}

// MockLoggerDebugfCall wrap *gomock.Call
type MockLoggerDebugfCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerDebugfCall) Return() *MockLoggerDebugfCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerDebugfCall) Do(f func(string, ...any)) *MockLoggerDebugfCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerDebugfCall) DoAndReturn(f func(string, ...any)) *MockLoggerDebugfCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Infof mocks base method.
func (m *MockLogger) Infof(arg0 string, arg1 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Infof", varargs...)
}

// Infof indicates an expected call of Infof.
func (mr *MockLoggerMockRecorder) Infof(arg0 any, arg1 ...any) *MockLoggerInfofCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Infof", reflect.TypeOf((*MockLogger)(nil).Infof), varargs...)
	return &MockLoggerInfofCall{Call: call}
}

// MockLoggerInfofCall wrap *gomock.Call
type MockLoggerInfofCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerInfofCall) Return() *MockLoggerInfofCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerInfofCall) Do(f func(string, ...any)) *MockLoggerInfofCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerInfofCall) DoAndReturn(f func(string, ...any)) *MockLoggerInfofCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Warningf mocks base method.
func (m *MockLogger) Warningf(arg0 string, arg1 ...any) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warningf", varargs...)
}

// Warningf indicates an expected call of Warningf.
func (mr *MockLoggerMockRecorder) Warningf(arg0 any, arg1 ...any) *MockLoggerWarningfCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warningf", reflect.TypeOf((*MockLogger)(nil).Warningf), varargs...)
	return &MockLoggerWarningfCall{Call: call}
}

// MockLoggerWarningfCall wrap *gomock.Call
type MockLoggerWarningfCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLoggerWarningfCall) Return() *MockLoggerWarningfCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLoggerWarningfCall) Do(f func(string, ...any)) *MockLoggerWarningfCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLoggerWarningfCall) DoAndReturn(f func(string, ...any)) *MockLoggerWarningfCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSecretsFacade is a mock of SecretsFacade interface.
type MockSecretsFacade struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsFacadeMockRecorder
}

// MockSecretsFacadeMockRecorder is the mock recorder for MockSecretsFacade.
type MockSecretsFacadeMockRecorder struct {
	mock *MockSecretsFacade
}

// NewMockSecretsFacade creates a new mock instance.
func NewMockSecretsFacade(ctrl *gomock.Controller) *MockSecretsFacade {
	mock := &MockSecretsFacade{ctrl: ctrl}
	mock.recorder = &MockSecretsFacadeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsFacade) EXPECT() *MockSecretsFacadeMockRecorder {
	return m.recorder
}

// DeleteObsoleteUserSecrets mocks base method.
func (m *MockSecretsFacade) DeleteObsoleteUserSecrets() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObsoleteUserSecrets")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObsoleteUserSecrets indicates an expected call of DeleteObsoleteUserSecrets.
func (mr *MockSecretsFacadeMockRecorder) DeleteObsoleteUserSecrets() *MockSecretsFacadeDeleteObsoleteUserSecretsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObsoleteUserSecrets", reflect.TypeOf((*MockSecretsFacade)(nil).DeleteObsoleteUserSecrets))
	return &MockSecretsFacadeDeleteObsoleteUserSecretsCall{Call: call}
}

// MockSecretsFacadeDeleteObsoleteUserSecretsCall wrap *gomock.Call
type MockSecretsFacadeDeleteObsoleteUserSecretsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsFacadeDeleteObsoleteUserSecretsCall) Return(arg0 error) *MockSecretsFacadeDeleteObsoleteUserSecretsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsFacadeDeleteObsoleteUserSecretsCall) Do(f func() error) *MockSecretsFacadeDeleteObsoleteUserSecretsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsFacadeDeleteObsoleteUserSecretsCall) DoAndReturn(f func() error) *MockSecretsFacadeDeleteObsoleteUserSecretsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchRevisionsToPrune mocks base method.
func (m *MockSecretsFacade) WatchRevisionsToPrune() (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchRevisionsToPrune")
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRevisionsToPrune indicates an expected call of WatchRevisionsToPrune.
func (mr *MockSecretsFacadeMockRecorder) WatchRevisionsToPrune() *MockSecretsFacadeWatchRevisionsToPruneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRevisionsToPrune", reflect.TypeOf((*MockSecretsFacade)(nil).WatchRevisionsToPrune))
	return &MockSecretsFacadeWatchRevisionsToPruneCall{Call: call}
}

// MockSecretsFacadeWatchRevisionsToPruneCall wrap *gomock.Call
type MockSecretsFacadeWatchRevisionsToPruneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsFacadeWatchRevisionsToPruneCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockSecretsFacadeWatchRevisionsToPruneCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsFacadeWatchRevisionsToPruneCall) Do(f func() (watcher.Watcher[struct{}], error)) *MockSecretsFacadeWatchRevisionsToPruneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsFacadeWatchRevisionsToPruneCall) DoAndReturn(f func() (watcher.Watcher[struct{}], error)) *MockSecretsFacadeWatchRevisionsToPruneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
