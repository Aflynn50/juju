// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/secretsdrainworker (interfaces: SecretsDrainFacade)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/secretsdrainworker_mock.go github.com/juju/juju/internal/worker/secretsdrainworker SecretsDrainFacade
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	secretsdrain "github.com/juju/juju/api/common/secretsdrain"
	secrets "github.com/juju/juju/core/secrets"
	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockSecretsDrainFacade is a mock of SecretsDrainFacade interface.
type MockSecretsDrainFacade struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsDrainFacadeMockRecorder
}

// MockSecretsDrainFacadeMockRecorder is the mock recorder for MockSecretsDrainFacade.
type MockSecretsDrainFacadeMockRecorder struct {
	mock *MockSecretsDrainFacade
}

// NewMockSecretsDrainFacade creates a new mock instance.
func NewMockSecretsDrainFacade(ctrl *gomock.Controller) *MockSecretsDrainFacade {
	mock := &MockSecretsDrainFacade{ctrl: ctrl}
	mock.recorder = &MockSecretsDrainFacadeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsDrainFacade) EXPECT() *MockSecretsDrainFacadeMockRecorder {
	return m.recorder
}

// ChangeSecretBackend mocks base method.
func (m *MockSecretsDrainFacade) ChangeSecretBackend(arg0 []secretsdrain.ChangeSecretBackendArg) (secretsdrain.ChangeSecretBackendResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeSecretBackend", arg0)
	ret0, _ := ret[0].(secretsdrain.ChangeSecretBackendResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChangeSecretBackend indicates an expected call of ChangeSecretBackend.
func (mr *MockSecretsDrainFacadeMockRecorder) ChangeSecretBackend(arg0 any) *MockSecretsDrainFacadeChangeSecretBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeSecretBackend", reflect.TypeOf((*MockSecretsDrainFacade)(nil).ChangeSecretBackend), arg0)
	return &MockSecretsDrainFacadeChangeSecretBackendCall{Call: call}
}

// MockSecretsDrainFacadeChangeSecretBackendCall wrap *gomock.Call
type MockSecretsDrainFacadeChangeSecretBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsDrainFacadeChangeSecretBackendCall) Return(arg0 secretsdrain.ChangeSecretBackendResult, arg1 error) *MockSecretsDrainFacadeChangeSecretBackendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsDrainFacadeChangeSecretBackendCall) Do(f func([]secretsdrain.ChangeSecretBackendArg) (secretsdrain.ChangeSecretBackendResult, error)) *MockSecretsDrainFacadeChangeSecretBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsDrainFacadeChangeSecretBackendCall) DoAndReturn(f func([]secretsdrain.ChangeSecretBackendArg) (secretsdrain.ChangeSecretBackendResult, error)) *MockSecretsDrainFacadeChangeSecretBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecretsToDrain mocks base method.
func (m *MockSecretsDrainFacade) GetSecretsToDrain() ([]secrets.SecretMetadataForDrain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretsToDrain")
	ret0, _ := ret[0].([]secrets.SecretMetadataForDrain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretsToDrain indicates an expected call of GetSecretsToDrain.
func (mr *MockSecretsDrainFacadeMockRecorder) GetSecretsToDrain() *MockSecretsDrainFacadeGetSecretsToDrainCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretsToDrain", reflect.TypeOf((*MockSecretsDrainFacade)(nil).GetSecretsToDrain))
	return &MockSecretsDrainFacadeGetSecretsToDrainCall{Call: call}
}

// MockSecretsDrainFacadeGetSecretsToDrainCall wrap *gomock.Call
type MockSecretsDrainFacadeGetSecretsToDrainCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsDrainFacadeGetSecretsToDrainCall) Return(arg0 []secrets.SecretMetadataForDrain, arg1 error) *MockSecretsDrainFacadeGetSecretsToDrainCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsDrainFacadeGetSecretsToDrainCall) Do(f func() ([]secrets.SecretMetadataForDrain, error)) *MockSecretsDrainFacadeGetSecretsToDrainCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsDrainFacadeGetSecretsToDrainCall) DoAndReturn(f func() ([]secrets.SecretMetadataForDrain, error)) *MockSecretsDrainFacadeGetSecretsToDrainCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchSecretBackendChanged mocks base method.
func (m *MockSecretsDrainFacade) WatchSecretBackendChanged() (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchSecretBackendChanged")
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSecretBackendChanged indicates an expected call of WatchSecretBackendChanged.
func (mr *MockSecretsDrainFacadeMockRecorder) WatchSecretBackendChanged() *MockSecretsDrainFacadeWatchSecretBackendChangedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSecretBackendChanged", reflect.TypeOf((*MockSecretsDrainFacade)(nil).WatchSecretBackendChanged))
	return &MockSecretsDrainFacadeWatchSecretBackendChangedCall{Call: call}
}

// MockSecretsDrainFacadeWatchSecretBackendChangedCall wrap *gomock.Call
type MockSecretsDrainFacadeWatchSecretBackendChangedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretsDrainFacadeWatchSecretBackendChangedCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockSecretsDrainFacadeWatchSecretBackendChangedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretsDrainFacadeWatchSecretBackendChangedCall) Do(f func() (watcher.Watcher[struct{}], error)) *MockSecretsDrainFacadeWatchSecretBackendChangedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretsDrainFacadeWatchSecretBackendChangedCall) DoAndReturn(f func() (watcher.Watcher[struct{}], error)) *MockSecretsDrainFacadeWatchSecretBackendChangedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
