// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/uniter/runner/context/payloads (interfaces: PayloadAPIClient)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination ../mocks/payload_mock.go github.com/juju/juju/internal/worker/uniter/runner/context/payloads PayloadAPIClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	payloads "github.com/juju/juju/core/payloads"
	gomock "go.uber.org/mock/gomock"
)

// MockPayloadAPIClient is a mock of PayloadAPIClient interface.
type MockPayloadAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockPayloadAPIClientMockRecorder
}

// MockPayloadAPIClientMockRecorder is the mock recorder for MockPayloadAPIClient.
type MockPayloadAPIClientMockRecorder struct {
	mock *MockPayloadAPIClient
}

// NewMockPayloadAPIClient creates a new mock instance.
func NewMockPayloadAPIClient(ctrl *gomock.Controller) *MockPayloadAPIClient {
	mock := &MockPayloadAPIClient{ctrl: ctrl}
	mock.recorder = &MockPayloadAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPayloadAPIClient) EXPECT() *MockPayloadAPIClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockPayloadAPIClient) List(arg0 ...string) ([]payloads.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].([]payloads.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockPayloadAPIClientMockRecorder) List(arg0 ...any) *MockPayloadAPIClientListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPayloadAPIClient)(nil).List), arg0...)
	return &MockPayloadAPIClientListCall{Call: call}
}

// MockPayloadAPIClientListCall wrap *gomock.Call
type MockPayloadAPIClientListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPayloadAPIClientListCall) Return(arg0 []payloads.Result, arg1 error) *MockPayloadAPIClientListCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPayloadAPIClientListCall) Do(f func(...string) ([]payloads.Result, error)) *MockPayloadAPIClientListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPayloadAPIClientListCall) DoAndReturn(f func(...string) ([]payloads.Result, error)) *MockPayloadAPIClientListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetStatus mocks base method.
func (m *MockPayloadAPIClient) SetStatus(arg0 string, arg1 ...string) ([]payloads.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetStatus", varargs...)
	ret0, _ := ret[0].([]payloads.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockPayloadAPIClientMockRecorder) SetStatus(arg0 any, arg1 ...any) *MockPayloadAPIClientSetStatusCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockPayloadAPIClient)(nil).SetStatus), varargs...)
	return &MockPayloadAPIClientSetStatusCall{Call: call}
}

// MockPayloadAPIClientSetStatusCall wrap *gomock.Call
type MockPayloadAPIClientSetStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPayloadAPIClientSetStatusCall) Return(arg0 []payloads.Result, arg1 error) *MockPayloadAPIClientSetStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPayloadAPIClientSetStatusCall) Do(f func(string, ...string) ([]payloads.Result, error)) *MockPayloadAPIClientSetStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPayloadAPIClientSetStatusCall) DoAndReturn(f func(string, ...string) ([]payloads.Result, error)) *MockPayloadAPIClientSetStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Track mocks base method.
func (m *MockPayloadAPIClient) Track(arg0 ...payloads.Payload) ([]payloads.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Track", varargs...)
	ret0, _ := ret[0].([]payloads.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Track indicates an expected call of Track.
func (mr *MockPayloadAPIClientMockRecorder) Track(arg0 ...any) *MockPayloadAPIClientTrackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Track", reflect.TypeOf((*MockPayloadAPIClient)(nil).Track), arg0...)
	return &MockPayloadAPIClientTrackCall{Call: call}
}

// MockPayloadAPIClientTrackCall wrap *gomock.Call
type MockPayloadAPIClientTrackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPayloadAPIClientTrackCall) Return(arg0 []payloads.Result, arg1 error) *MockPayloadAPIClientTrackCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPayloadAPIClientTrackCall) Do(f func(...payloads.Payload) ([]payloads.Result, error)) *MockPayloadAPIClientTrackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPayloadAPIClientTrackCall) DoAndReturn(f func(...payloads.Payload) ([]payloads.Result, error)) *MockPayloadAPIClientTrackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Untrack mocks base method.
func (m *MockPayloadAPIClient) Untrack(arg0 ...string) ([]payloads.Result, error) {
	m.ctrl.T.Helper()
	varargs := []any{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Untrack", varargs...)
	ret0, _ := ret[0].([]payloads.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Untrack indicates an expected call of Untrack.
func (mr *MockPayloadAPIClientMockRecorder) Untrack(arg0 ...any) *MockPayloadAPIClientUntrackCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Untrack", reflect.TypeOf((*MockPayloadAPIClient)(nil).Untrack), arg0...)
	return &MockPayloadAPIClientUntrackCall{Call: call}
}

// MockPayloadAPIClientUntrackCall wrap *gomock.Call
type MockPayloadAPIClientUntrackCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPayloadAPIClientUntrackCall) Return(arg0 []payloads.Result, arg1 error) *MockPayloadAPIClientUntrackCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPayloadAPIClientUntrackCall) Do(f func(...string) ([]payloads.Result, error)) *MockPayloadAPIClientUntrackCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPayloadAPIClientUntrackCall) DoAndReturn(f func(...string) ([]payloads.Result, error)) *MockPayloadAPIClientUntrackCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
