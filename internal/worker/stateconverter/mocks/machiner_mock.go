// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/stateconverter (interfaces: Machiner,Machine)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/machiner_mock.go github.com/juju/juju/internal/worker/stateconverter Machiner,Machine
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	stateconverter "github.com/juju/juju/internal/worker/stateconverter"
	params "github.com/juju/juju/rpc/params"
	names "github.com/juju/names/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockMachiner is a mock of Machiner interface.
type MockMachiner struct {
	ctrl     *gomock.Controller
	recorder *MockMachinerMockRecorder
}

// MockMachinerMockRecorder is the mock recorder for MockMachiner.
type MockMachinerMockRecorder struct {
	mock *MockMachiner
}

// NewMockMachiner creates a new mock instance.
func NewMockMachiner(ctrl *gomock.Controller) *MockMachiner {
	mock := &MockMachiner{ctrl: ctrl}
	mock.recorder = &MockMachinerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachiner) EXPECT() *MockMachinerMockRecorder {
	return m.recorder
}

// Machine mocks base method.
func (m *MockMachiner) Machine(arg0 context.Context, arg1 names.MachineTag) (stateconverter.Machine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine", arg0, arg1)
	ret0, _ := ret[0].(stateconverter.Machine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machine indicates an expected call of Machine.
func (mr *MockMachinerMockRecorder) Machine(arg0, arg1 any) *MockMachinerMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockMachiner)(nil).Machine), arg0, arg1)
	return &MockMachinerMachineCall{Call: call}
}

// MockMachinerMachineCall wrap *gomock.Call
type MockMachinerMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachinerMachineCall) Return(arg0 stateconverter.Machine, arg1 error) *MockMachinerMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachinerMachineCall) Do(f func(context.Context, names.MachineTag) (stateconverter.Machine, error)) *MockMachinerMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachinerMachineCall) DoAndReturn(f func(context.Context, names.MachineTag) (stateconverter.Machine, error)) *MockMachinerMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachine is a mock of Machine interface.
type MockMachine struct {
	ctrl     *gomock.Controller
	recorder *MockMachineMockRecorder
}

// MockMachineMockRecorder is the mock recorder for MockMachine.
type MockMachineMockRecorder struct {
	mock *MockMachine
}

// NewMockMachine creates a new mock instance.
func NewMockMachine(ctrl *gomock.Controller) *MockMachine {
	mock := &MockMachine{ctrl: ctrl}
	mock.recorder = &MockMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachine) EXPECT() *MockMachineMockRecorder {
	return m.recorder
}

// Jobs mocks base method.
func (m *MockMachine) Jobs(arg0 context.Context) (*params.JobsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Jobs", arg0)
	ret0, _ := ret[0].(*params.JobsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Jobs indicates an expected call of Jobs.
func (mr *MockMachineMockRecorder) Jobs(arg0 any) *MockMachineJobsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Jobs", reflect.TypeOf((*MockMachine)(nil).Jobs), arg0)
	return &MockMachineJobsCall{Call: call}
}

// MockMachineJobsCall wrap *gomock.Call
type MockMachineJobsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineJobsCall) Return(arg0 *params.JobsResult, arg1 error) *MockMachineJobsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineJobsCall) Do(f func(context.Context) (*params.JobsResult, error)) *MockMachineJobsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineJobsCall) DoAndReturn(f func(context.Context) (*params.JobsResult, error)) *MockMachineJobsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Watch mocks base method.
func (m *MockMachine) Watch(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockMachineMockRecorder) Watch(arg0 any) *MockMachineWatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockMachine)(nil).Watch), arg0)
	return &MockMachineWatchCall{Call: call}
}

// MockMachineWatchCall wrap *gomock.Call
type MockMachineWatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineWatchCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockMachineWatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineWatchCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockMachineWatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineWatchCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockMachineWatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
