// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/sshserver (interfaces: FacadeClient)
//
// Generated by this command:
//
//	mockgen -package sshserver -destination facade_client_mock_test.go github.com/juju/juju/internal/worker/sshserver FacadeClient
//

// Package sshserver is a generated GoMock package.
package sshserver

import (
	reflect "reflect"

	controller "github.com/juju/juju/controller"
	watcher "github.com/juju/juju/core/watcher"
	params "github.com/juju/juju/rpc/params"
	gomock "go.uber.org/mock/gomock"
)

// MockFacadeClient is a mock of FacadeClient interface.
type MockFacadeClient struct {
	ctrl     *gomock.Controller
	recorder *MockFacadeClientMockRecorder
}

// MockFacadeClientMockRecorder is the mock recorder for MockFacadeClient.
type MockFacadeClientMockRecorder struct {
	mock *MockFacadeClient
}

// NewMockFacadeClient creates a new mock instance.
func NewMockFacadeClient(ctrl *gomock.Controller) *MockFacadeClient {
	mock := &MockFacadeClient{ctrl: ctrl}
	mock.recorder = &MockFacadeClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFacadeClient) EXPECT() *MockFacadeClientMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockFacadeClient) ControllerConfig() (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig")
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockFacadeClientMockRecorder) ControllerConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockFacadeClient)(nil).ControllerConfig))
}

// HostKeyForTarget mocks base method.
func (m *MockFacadeClient) HostKeyForTarget(arg0 params.SSHHostKeyRequestArg) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HostKeyForTarget", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HostKeyForTarget indicates an expected call of HostKeyForTarget.
func (mr *MockFacadeClientMockRecorder) HostKeyForTarget(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HostKeyForTarget", reflect.TypeOf((*MockFacadeClient)(nil).HostKeyForTarget), arg0)
}

// SSHServerHostKey mocks base method.
func (m *MockFacadeClient) SSHServerHostKey() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHServerHostKey")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SSHServerHostKey indicates an expected call of SSHServerHostKey.
func (mr *MockFacadeClientMockRecorder) SSHServerHostKey() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHServerHostKey", reflect.TypeOf((*MockFacadeClient)(nil).SSHServerHostKey))
}

// WatchControllerConfig mocks base method.
func (m *MockFacadeClient) WatchControllerConfig() (watcher.NotifyWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchControllerConfig")
	ret0, _ := ret[0].(watcher.NotifyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchControllerConfig indicates an expected call of WatchControllerConfig.
func (mr *MockFacadeClientMockRecorder) WatchControllerConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchControllerConfig", reflect.TypeOf((*MockFacadeClient)(nil).WatchControllerConfig))
}
