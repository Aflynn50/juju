// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/worker/upgradeseries (interfaces: Facade,UnitDiscovery,Upgrader)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/package_mock.go github.com/juju/juju/internal/worker/upgradeseries Facade,UnitDiscovery,Upgrader
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	base "github.com/juju/juju/core/base"
	model "github.com/juju/juju/core/model"
	watcher "github.com/juju/juju/core/watcher"
	names "github.com/juju/names/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockFacade is a mock of Facade interface.
type MockFacade struct {
	ctrl     *gomock.Controller
	recorder *MockFacadeMockRecorder
}

// MockFacadeMockRecorder is the mock recorder for MockFacade.
type MockFacadeMockRecorder struct {
	mock *MockFacade
}

// NewMockFacade creates a new mock instance.
func NewMockFacade(ctrl *gomock.Controller) *MockFacade {
	mock := &MockFacade{ctrl: ctrl}
	mock.recorder = &MockFacadeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFacade) EXPECT() *MockFacadeMockRecorder {
	return m.recorder
}

// FinishUpgradeSeries mocks base method.
func (m *MockFacade) FinishUpgradeSeries(arg0 base.Base) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FinishUpgradeSeries", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// FinishUpgradeSeries indicates an expected call of FinishUpgradeSeries.
func (mr *MockFacadeMockRecorder) FinishUpgradeSeries(arg0 any) *MockFacadeFinishUpgradeSeriesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishUpgradeSeries", reflect.TypeOf((*MockFacade)(nil).FinishUpgradeSeries), arg0)
	return &MockFacadeFinishUpgradeSeriesCall{Call: call}
}

// MockFacadeFinishUpgradeSeriesCall wrap *gomock.Call
type MockFacadeFinishUpgradeSeriesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeFinishUpgradeSeriesCall) Return(arg0 error) *MockFacadeFinishUpgradeSeriesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeFinishUpgradeSeriesCall) Do(f func(base.Base) error) *MockFacadeFinishUpgradeSeriesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeFinishUpgradeSeriesCall) DoAndReturn(f func(base.Base) error) *MockFacadeFinishUpgradeSeriesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MachineStatus mocks base method.
func (m *MockFacade) MachineStatus() (model.UpgradeSeriesStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MachineStatus")
	ret0, _ := ret[0].(model.UpgradeSeriesStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MachineStatus indicates an expected call of MachineStatus.
func (mr *MockFacadeMockRecorder) MachineStatus() *MockFacadeMachineStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MachineStatus", reflect.TypeOf((*MockFacade)(nil).MachineStatus))
	return &MockFacadeMachineStatusCall{Call: call}
}

// MockFacadeMachineStatusCall wrap *gomock.Call
type MockFacadeMachineStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeMachineStatusCall) Return(arg0 model.UpgradeSeriesStatus, arg1 error) *MockFacadeMachineStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeMachineStatusCall) Do(f func() (model.UpgradeSeriesStatus, error)) *MockFacadeMachineStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeMachineStatusCall) DoAndReturn(f func() (model.UpgradeSeriesStatus, error)) *MockFacadeMachineStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PinMachineApplications mocks base method.
func (m *MockFacade) PinMachineApplications(arg0 context.Context) (map[string]error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PinMachineApplications", arg0)
	ret0, _ := ret[0].(map[string]error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PinMachineApplications indicates an expected call of PinMachineApplications.
func (mr *MockFacadeMockRecorder) PinMachineApplications(arg0 any) *MockFacadePinMachineApplicationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PinMachineApplications", reflect.TypeOf((*MockFacade)(nil).PinMachineApplications), arg0)
	return &MockFacadePinMachineApplicationsCall{Call: call}
}

// MockFacadePinMachineApplicationsCall wrap *gomock.Call
type MockFacadePinMachineApplicationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadePinMachineApplicationsCall) Return(arg0 map[string]error, arg1 error) *MockFacadePinMachineApplicationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadePinMachineApplicationsCall) Do(f func(context.Context) (map[string]error, error)) *MockFacadePinMachineApplicationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadePinMachineApplicationsCall) DoAndReturn(f func(context.Context) (map[string]error, error)) *MockFacadePinMachineApplicationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetInstanceStatus mocks base method.
func (m *MockFacade) SetInstanceStatus(arg0 model.UpgradeSeriesStatus, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInstanceStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInstanceStatus indicates an expected call of SetInstanceStatus.
func (mr *MockFacadeMockRecorder) SetInstanceStatus(arg0, arg1 any) *MockFacadeSetInstanceStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInstanceStatus", reflect.TypeOf((*MockFacade)(nil).SetInstanceStatus), arg0, arg1)
	return &MockFacadeSetInstanceStatusCall{Call: call}
}

// MockFacadeSetInstanceStatusCall wrap *gomock.Call
type MockFacadeSetInstanceStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeSetInstanceStatusCall) Return(arg0 error) *MockFacadeSetInstanceStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeSetInstanceStatusCall) Do(f func(model.UpgradeSeriesStatus, string) error) *MockFacadeSetInstanceStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeSetInstanceStatusCall) DoAndReturn(f func(model.UpgradeSeriesStatus, string) error) *MockFacadeSetInstanceStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetMachineStatus mocks base method.
func (m *MockFacade) SetMachineStatus(arg0 model.UpgradeSeriesStatus, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMachineStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMachineStatus indicates an expected call of SetMachineStatus.
func (mr *MockFacadeMockRecorder) SetMachineStatus(arg0, arg1 any) *MockFacadeSetMachineStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMachineStatus", reflect.TypeOf((*MockFacade)(nil).SetMachineStatus), arg0, arg1)
	return &MockFacadeSetMachineStatusCall{Call: call}
}

// MockFacadeSetMachineStatusCall wrap *gomock.Call
type MockFacadeSetMachineStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeSetMachineStatusCall) Return(arg0 error) *MockFacadeSetMachineStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeSetMachineStatusCall) Do(f func(model.UpgradeSeriesStatus, string) error) *MockFacadeSetMachineStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeSetMachineStatusCall) DoAndReturn(f func(model.UpgradeSeriesStatus, string) error) *MockFacadeSetMachineStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StartUnitCompletion mocks base method.
func (m *MockFacade) StartUnitCompletion(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartUnitCompletion", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartUnitCompletion indicates an expected call of StartUnitCompletion.
func (mr *MockFacadeMockRecorder) StartUnitCompletion(arg0 any) *MockFacadeStartUnitCompletionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartUnitCompletion", reflect.TypeOf((*MockFacade)(nil).StartUnitCompletion), arg0)
	return &MockFacadeStartUnitCompletionCall{Call: call}
}

// MockFacadeStartUnitCompletionCall wrap *gomock.Call
type MockFacadeStartUnitCompletionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeStartUnitCompletionCall) Return(arg0 error) *MockFacadeStartUnitCompletionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeStartUnitCompletionCall) Do(f func(string) error) *MockFacadeStartUnitCompletionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeStartUnitCompletionCall) DoAndReturn(f func(string) error) *MockFacadeStartUnitCompletionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnitsCompleted mocks base method.
func (m *MockFacade) UnitsCompleted() ([]names.UnitTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitsCompleted")
	ret0, _ := ret[0].([]names.UnitTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnitsCompleted indicates an expected call of UnitsCompleted.
func (mr *MockFacadeMockRecorder) UnitsCompleted() *MockFacadeUnitsCompletedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitsCompleted", reflect.TypeOf((*MockFacade)(nil).UnitsCompleted))
	return &MockFacadeUnitsCompletedCall{Call: call}
}

// MockFacadeUnitsCompletedCall wrap *gomock.Call
type MockFacadeUnitsCompletedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeUnitsCompletedCall) Return(arg0 []names.UnitTag, arg1 error) *MockFacadeUnitsCompletedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeUnitsCompletedCall) Do(f func() ([]names.UnitTag, error)) *MockFacadeUnitsCompletedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeUnitsCompletedCall) DoAndReturn(f func() ([]names.UnitTag, error)) *MockFacadeUnitsCompletedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnitsPrepared mocks base method.
func (m *MockFacade) UnitsPrepared() ([]names.UnitTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitsPrepared")
	ret0, _ := ret[0].([]names.UnitTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnitsPrepared indicates an expected call of UnitsPrepared.
func (mr *MockFacadeMockRecorder) UnitsPrepared() *MockFacadeUnitsPreparedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitsPrepared", reflect.TypeOf((*MockFacade)(nil).UnitsPrepared))
	return &MockFacadeUnitsPreparedCall{Call: call}
}

// MockFacadeUnitsPreparedCall wrap *gomock.Call
type MockFacadeUnitsPreparedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeUnitsPreparedCall) Return(arg0 []names.UnitTag, arg1 error) *MockFacadeUnitsPreparedCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeUnitsPreparedCall) Do(f func() ([]names.UnitTag, error)) *MockFacadeUnitsPreparedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeUnitsPreparedCall) DoAndReturn(f func() ([]names.UnitTag, error)) *MockFacadeUnitsPreparedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnpinMachineApplications mocks base method.
func (m *MockFacade) UnpinMachineApplications(arg0 context.Context) (map[string]error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnpinMachineApplications", arg0)
	ret0, _ := ret[0].(map[string]error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnpinMachineApplications indicates an expected call of UnpinMachineApplications.
func (mr *MockFacadeMockRecorder) UnpinMachineApplications(arg0 any) *MockFacadeUnpinMachineApplicationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnpinMachineApplications", reflect.TypeOf((*MockFacade)(nil).UnpinMachineApplications), arg0)
	return &MockFacadeUnpinMachineApplicationsCall{Call: call}
}

// MockFacadeUnpinMachineApplicationsCall wrap *gomock.Call
type MockFacadeUnpinMachineApplicationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeUnpinMachineApplicationsCall) Return(arg0 map[string]error, arg1 error) *MockFacadeUnpinMachineApplicationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeUnpinMachineApplicationsCall) Do(f func(context.Context) (map[string]error, error)) *MockFacadeUnpinMachineApplicationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeUnpinMachineApplicationsCall) DoAndReturn(f func(context.Context) (map[string]error, error)) *MockFacadeUnpinMachineApplicationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchUpgradeSeriesNotifications mocks base method.
func (m *MockFacade) WatchUpgradeSeriesNotifications(arg0 context.Context) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchUpgradeSeriesNotifications", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUpgradeSeriesNotifications indicates an expected call of WatchUpgradeSeriesNotifications.
func (mr *MockFacadeMockRecorder) WatchUpgradeSeriesNotifications(arg0 any) *MockFacadeWatchUpgradeSeriesNotificationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUpgradeSeriesNotifications", reflect.TypeOf((*MockFacade)(nil).WatchUpgradeSeriesNotifications), arg0)
	return &MockFacadeWatchUpgradeSeriesNotificationsCall{Call: call}
}

// MockFacadeWatchUpgradeSeriesNotificationsCall wrap *gomock.Call
type MockFacadeWatchUpgradeSeriesNotificationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFacadeWatchUpgradeSeriesNotificationsCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockFacadeWatchUpgradeSeriesNotificationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFacadeWatchUpgradeSeriesNotificationsCall) Do(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockFacadeWatchUpgradeSeriesNotificationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFacadeWatchUpgradeSeriesNotificationsCall) DoAndReturn(f func(context.Context) (watcher.Watcher[struct{}], error)) *MockFacadeWatchUpgradeSeriesNotificationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUnitDiscovery is a mock of UnitDiscovery interface.
type MockUnitDiscovery struct {
	ctrl     *gomock.Controller
	recorder *MockUnitDiscoveryMockRecorder
}

// MockUnitDiscoveryMockRecorder is the mock recorder for MockUnitDiscovery.
type MockUnitDiscoveryMockRecorder struct {
	mock *MockUnitDiscovery
}

// NewMockUnitDiscovery creates a new mock instance.
func NewMockUnitDiscovery(ctrl *gomock.Controller) *MockUnitDiscovery {
	mock := &MockUnitDiscovery{ctrl: ctrl}
	mock.recorder = &MockUnitDiscoveryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnitDiscovery) EXPECT() *MockUnitDiscoveryMockRecorder {
	return m.recorder
}

// Units mocks base method.
func (m *MockUnitDiscovery) Units() ([]names.UnitTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Units")
	ret0, _ := ret[0].([]names.UnitTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Units indicates an expected call of Units.
func (mr *MockUnitDiscoveryMockRecorder) Units() *MockUnitDiscoveryUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Units", reflect.TypeOf((*MockUnitDiscovery)(nil).Units))
	return &MockUnitDiscoveryUnitsCall{Call: call}
}

// MockUnitDiscoveryUnitsCall wrap *gomock.Call
type MockUnitDiscoveryUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitDiscoveryUnitsCall) Return(arg0 []names.UnitTag, arg1 error) *MockUnitDiscoveryUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitDiscoveryUnitsCall) Do(f func() ([]names.UnitTag, error)) *MockUnitDiscoveryUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitDiscoveryUnitsCall) DoAndReturn(f func() ([]names.UnitTag, error)) *MockUnitDiscoveryUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUpgrader is a mock of Upgrader interface.
type MockUpgrader struct {
	ctrl     *gomock.Controller
	recorder *MockUpgraderMockRecorder
}

// MockUpgraderMockRecorder is the mock recorder for MockUpgrader.
type MockUpgraderMockRecorder struct {
	mock *MockUpgrader
}

// NewMockUpgrader creates a new mock instance.
func NewMockUpgrader(ctrl *gomock.Controller) *MockUpgrader {
	mock := &MockUpgrader{ctrl: ctrl}
	mock.recorder = &MockUpgraderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpgrader) EXPECT() *MockUpgraderMockRecorder {
	return m.recorder
}

// PerformUpgrade mocks base method.
func (m *MockUpgrader) PerformUpgrade() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformUpgrade")
	ret0, _ := ret[0].(error)
	return ret0
}

// PerformUpgrade indicates an expected call of PerformUpgrade.
func (mr *MockUpgraderMockRecorder) PerformUpgrade() *MockUpgraderPerformUpgradeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformUpgrade", reflect.TypeOf((*MockUpgrader)(nil).PerformUpgrade))
	return &MockUpgraderPerformUpgradeCall{Call: call}
}

// MockUpgraderPerformUpgradeCall wrap *gomock.Call
type MockUpgraderPerformUpgradeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgraderPerformUpgradeCall) Return(arg0 error) *MockUpgraderPerformUpgradeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgraderPerformUpgradeCall) Do(f func() error) *MockUpgraderPerformUpgradeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgraderPerformUpgradeCall) DoAndReturn(f func() error) *MockUpgraderPerformUpgradeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
