// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/objectstore (interfaces: MongoSession,Locker)
//
// Generated by this command:
//
//	mockgen -package objectstore -destination state_mock_test.go github.com/juju/juju/internal/objectstore MongoSession,Locker
//

// Package objectstore is a generated GoMock package.
package objectstore

import (
	context "context"
	reflect "reflect"

	mgo "github.com/juju/mgo/v3"
	gomock "go.uber.org/mock/gomock"
)

// MockMongoSession is a mock of MongoSession interface.
type MockMongoSession struct {
	ctrl     *gomock.Controller
	recorder *MockMongoSessionMockRecorder
}

// MockMongoSessionMockRecorder is the mock recorder for MockMongoSession.
type MockMongoSessionMockRecorder struct {
	mock *MockMongoSession
}

// NewMockMongoSession creates a new mock instance.
func NewMockMongoSession(ctrl *gomock.Controller) *MockMongoSession {
	mock := &MockMongoSession{ctrl: ctrl}
	mock.recorder = &MockMongoSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMongoSession) EXPECT() *MockMongoSessionMockRecorder {
	return m.recorder
}

// MongoSession mocks base method.
func (m *MockMongoSession) MongoSession() *mgo.Session {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MongoSession")
	ret0, _ := ret[0].(*mgo.Session)
	return ret0
}

// MongoSession indicates an expected call of MongoSession.
func (mr *MockMongoSessionMockRecorder) MongoSession() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MongoSession", reflect.TypeOf((*MockMongoSession)(nil).MongoSession))
}

// MockLocker is a mock of Locker interface.
type MockLocker struct {
	ctrl     *gomock.Controller
	recorder *MockLockerMockRecorder
}

// MockLockerMockRecorder is the mock recorder for MockLocker.
type MockLockerMockRecorder struct {
	mock *MockLocker
}

// NewMockLocker creates a new mock instance.
func NewMockLocker(ctrl *gomock.Controller) *MockLocker {
	mock := &MockLocker{ctrl: ctrl}
	mock.recorder = &MockLockerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLocker) EXPECT() *MockLockerMockRecorder {
	return m.recorder
}

// Lock mocks base method.
func (m *MockLocker) Lock(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Lock indicates an expected call of Lock.
func (mr *MockLockerMockRecorder) Lock(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockLocker)(nil).Lock), arg0, arg1)
}

// Unlock mocks base method.
func (m *MockLocker) Unlock(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unlock indicates an expected call of Unlock.
func (mr *MockLockerMockRecorder) Unlock(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockLocker)(nil).Unlock), arg0, arg1)
}
