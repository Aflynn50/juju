// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/objectstore (interfaces: ObjectStoreMetadata,Session)
//
// Generated by this command:
//
//	mockgen -package objectstore -destination objectstore_mock_test.go github.com/juju/juju/core/objectstore ObjectStoreMetadata,Session
//

// Package objectstore is a generated GoMock package.
package objectstore

import (
	context "context"
	io "io"
	reflect "reflect"

	objectstore "github.com/juju/juju/core/objectstore"
	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockObjectStoreMetadata is a mock of ObjectStoreMetadata interface.
type MockObjectStoreMetadata struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStoreMetadataMockRecorder
}

// MockObjectStoreMetadataMockRecorder is the mock recorder for MockObjectStoreMetadata.
type MockObjectStoreMetadataMockRecorder struct {
	mock *MockObjectStoreMetadata
}

// NewMockObjectStoreMetadata creates a new mock instance.
func NewMockObjectStoreMetadata(ctrl *gomock.Controller) *MockObjectStoreMetadata {
	mock := &MockObjectStoreMetadata{ctrl: ctrl}
	mock.recorder = &MockObjectStoreMetadataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStoreMetadata) EXPECT() *MockObjectStoreMetadataMockRecorder {
	return m.recorder
}

// GetMetadata mocks base method.
func (m *MockObjectStoreMetadata) GetMetadata(arg0 context.Context, arg1 string) (objectstore.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetadata", arg0, arg1)
	ret0, _ := ret[0].(objectstore.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMetadata indicates an expected call of GetMetadata.
func (mr *MockObjectStoreMetadataMockRecorder) GetMetadata(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetadata", reflect.TypeOf((*MockObjectStoreMetadata)(nil).GetMetadata), arg0, arg1)
}

// PutMetadata mocks base method.
func (m *MockObjectStoreMetadata) PutMetadata(arg0 context.Context, arg1 objectstore.Metadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutMetadata", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutMetadata indicates an expected call of PutMetadata.
func (mr *MockObjectStoreMetadataMockRecorder) PutMetadata(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutMetadata", reflect.TypeOf((*MockObjectStoreMetadata)(nil).PutMetadata), arg0, arg1)
}

// RemoveMetadata mocks base method.
func (m *MockObjectStoreMetadata) RemoveMetadata(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveMetadata", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveMetadata indicates an expected call of RemoveMetadata.
func (mr *MockObjectStoreMetadataMockRecorder) RemoveMetadata(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveMetadata", reflect.TypeOf((*MockObjectStoreMetadata)(nil).RemoveMetadata), arg0, arg1)
}

// Watch mocks base method.
func (m *MockObjectStoreMetadata) Watch() (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch")
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockObjectStoreMetadataMockRecorder) Watch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockObjectStoreMetadata)(nil).Watch))
}

// MockSession is a mock of Session interface.
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession.
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance.
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// DeleteObject mocks base method.
func (m *MockSession) DeleteObject(arg0 context.Context, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteObject", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteObject indicates an expected call of DeleteObject.
func (mr *MockSessionMockRecorder) DeleteObject(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteObject", reflect.TypeOf((*MockSession)(nil).DeleteObject), arg0, arg1, arg2)
}

// GetObject mocks base method.
func (m *MockSession) GetObject(arg0 context.Context, arg1, arg2 string) (io.ReadCloser, int64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObject", arg0, arg1, arg2)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(string)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetObject indicates an expected call of GetObject.
func (mr *MockSessionMockRecorder) GetObject(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObject", reflect.TypeOf((*MockSession)(nil).GetObject), arg0, arg1, arg2)
}

// PutObject mocks base method.
func (m *MockSession) PutObject(arg0 context.Context, arg1, arg2 string, arg3 io.Reader, arg4 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// PutObject indicates an expected call of PutObject.
func (mr *MockSessionMockRecorder) PutObject(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockSession)(nil).PutObject), arg0, arg1, arg2, arg3, arg4)
}
