// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/internal/statushistory (interfaces: Recorder)
//
// Generated by this command:
//
//	mockgen -typed -package statushistory -destination package_mock_test.go github.com/juju/juju/internal/statushistory Recorder
//

// Package statushistory is a generated GoMock package.
package statushistory

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRecorder is a mock of Recorder interface.
type MockRecorder struct {
	ctrl     *gomock.Controller
	recorder *MockRecorderMockRecorder
}

// MockRecorderMockRecorder is the mock recorder for MockRecorder.
type MockRecorderMockRecorder struct {
	mock *MockRecorder
}

// NewMockRecorder creates a new mock instance.
func NewMockRecorder(ctrl *gomock.Controller) *MockRecorder {
	mock := &MockRecorder{ctrl: ctrl}
	mock.recorder = &MockRecorderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRecorder) EXPECT() *MockRecorderMockRecorder {
	return m.recorder
}

// Record mocks base method.
func (m *MockRecorder) Record(arg0 context.Context, arg1 Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Record", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Record indicates an expected call of Record.
func (mr *MockRecorderMockRecorder) Record(arg0, arg1 any) *MockRecorderRecordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Record", reflect.TypeOf((*MockRecorder)(nil).Record), arg0, arg1)
	return &MockRecorderRecordCall{Call: call}
}

// MockRecorderRecordCall wrap *gomock.Call
type MockRecorderRecordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRecorderRecordCall) Return(arg0 error) *MockRecorderRecordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRecorderRecordCall) Do(f func(context.Context, Record) error) *MockRecorderRecordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRecorderRecordCall) DoAndReturn(f func(context.Context, Record) error) *MockRecorderRecordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
