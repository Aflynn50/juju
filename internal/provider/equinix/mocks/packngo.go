// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/packethost/packngo (interfaces: DeviceService,OSService,PlanService,ProjectIPService)
//
// Generated by this command:
//
//	mockgen -typed -destination ./mocks/packngo.go -package mocks github.com/packethost/packngo DeviceService,OSService,PlanService,ProjectIPService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	packngo "github.com/packethost/packngo"
	gomock "go.uber.org/mock/gomock"
)

// MockDeviceService is a mock of DeviceService interface.
type MockDeviceService struct {
	ctrl     *gomock.Controller
	recorder *MockDeviceServiceMockRecorder
}

// MockDeviceServiceMockRecorder is the mock recorder for MockDeviceService.
type MockDeviceServiceMockRecorder struct {
	mock *MockDeviceService
}

// NewMockDeviceService creates a new mock instance.
func NewMockDeviceService(ctrl *gomock.Controller) *MockDeviceService {
	mock := &MockDeviceService{ctrl: ctrl}
	mock.recorder = &MockDeviceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeviceService) EXPECT() *MockDeviceServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockDeviceService) Create(arg0 *packngo.DeviceCreateRequest) (*packngo.Device, *packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(*packngo.Device)
	ret1, _ := ret[1].(*packngo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockDeviceServiceMockRecorder) Create(arg0 any) *MockDeviceServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockDeviceService)(nil).Create), arg0)
	return &MockDeviceServiceCreateCall{Call: call}
}

// MockDeviceServiceCreateCall wrap *gomock.Call
type MockDeviceServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeviceServiceCreateCall) Return(arg0 *packngo.Device, arg1 *packngo.Response, arg2 error) *MockDeviceServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeviceServiceCreateCall) Do(f func(*packngo.DeviceCreateRequest) (*packngo.Device, *packngo.Response, error)) *MockDeviceServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeviceServiceCreateCall) DoAndReturn(f func(*packngo.DeviceCreateRequest) (*packngo.Device, *packngo.Response, error)) *MockDeviceServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockDeviceService) Delete(arg0 string, arg1 bool) (*packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*packngo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockDeviceServiceMockRecorder) Delete(arg0, arg1 any) *MockDeviceServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockDeviceService)(nil).Delete), arg0, arg1)
	return &MockDeviceServiceDeleteCall{Call: call}
}

// MockDeviceServiceDeleteCall wrap *gomock.Call
type MockDeviceServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeviceServiceDeleteCall) Return(arg0 *packngo.Response, arg1 error) *MockDeviceServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeviceServiceDeleteCall) Do(f func(string, bool) (*packngo.Response, error)) *MockDeviceServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeviceServiceDeleteCall) DoAndReturn(f func(string, bool) (*packngo.Response, error)) *MockDeviceServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockDeviceService) Get(arg0 string, arg1 *packngo.GetOptions) (*packngo.Device, *packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*packngo.Device)
	ret1, _ := ret[1].(*packngo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockDeviceServiceMockRecorder) Get(arg0, arg1 any) *MockDeviceServiceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDeviceService)(nil).Get), arg0, arg1)
	return &MockDeviceServiceGetCall{Call: call}
}

// MockDeviceServiceGetCall wrap *gomock.Call
type MockDeviceServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeviceServiceGetCall) Return(arg0 *packngo.Device, arg1 *packngo.Response, arg2 error) *MockDeviceServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeviceServiceGetCall) Do(f func(string, *packngo.GetOptions) (*packngo.Device, *packngo.Response, error)) *MockDeviceServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeviceServiceGetCall) DoAndReturn(f func(string, *packngo.GetOptions) (*packngo.Device, *packngo.Response, error)) *MockDeviceServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetBandwidth mocks base method.
func (m *MockDeviceService) GetBandwidth(arg0 string, arg1 *packngo.BandwidthOpts) (*packngo.BandwidthIO, *packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBandwidth", arg0, arg1)
	ret0, _ := ret[0].(*packngo.BandwidthIO)
	ret1, _ := ret[1].(*packngo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBandwidth indicates an expected call of GetBandwidth.
func (mr *MockDeviceServiceMockRecorder) GetBandwidth(arg0, arg1 any) *MockDeviceServiceGetBandwidthCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBandwidth", reflect.TypeOf((*MockDeviceService)(nil).GetBandwidth), arg0, arg1)
	return &MockDeviceServiceGetBandwidthCall{Call: call}
}

// MockDeviceServiceGetBandwidthCall wrap *gomock.Call
type MockDeviceServiceGetBandwidthCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeviceServiceGetBandwidthCall) Return(arg0 *packngo.BandwidthIO, arg1 *packngo.Response, arg2 error) *MockDeviceServiceGetBandwidthCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeviceServiceGetBandwidthCall) Do(f func(string, *packngo.BandwidthOpts) (*packngo.BandwidthIO, *packngo.Response, error)) *MockDeviceServiceGetBandwidthCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeviceServiceGetBandwidthCall) DoAndReturn(f func(string, *packngo.BandwidthOpts) (*packngo.BandwidthIO, *packngo.Response, error)) *MockDeviceServiceGetBandwidthCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockDeviceService) List(arg0 string, arg1 *packngo.GetOptions) ([]packngo.Device, *packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]packngo.Device)
	ret1, _ := ret[1].(*packngo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockDeviceServiceMockRecorder) List(arg0, arg1 any) *MockDeviceServiceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockDeviceService)(nil).List), arg0, arg1)
	return &MockDeviceServiceListCall{Call: call}
}

// MockDeviceServiceListCall wrap *gomock.Call
type MockDeviceServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeviceServiceListCall) Return(arg0 []packngo.Device, arg1 *packngo.Response, arg2 error) *MockDeviceServiceListCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeviceServiceListCall) Do(f func(string, *packngo.GetOptions) ([]packngo.Device, *packngo.Response, error)) *MockDeviceServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeviceServiceListCall) DoAndReturn(f func(string, *packngo.GetOptions) ([]packngo.Device, *packngo.Response, error)) *MockDeviceServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListBGPNeighbors mocks base method.
func (m *MockDeviceService) ListBGPNeighbors(arg0 string, arg1 *packngo.GetOptions) ([]packngo.BGPNeighbor, *packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBGPNeighbors", arg0, arg1)
	ret0, _ := ret[0].([]packngo.BGPNeighbor)
	ret1, _ := ret[1].(*packngo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBGPNeighbors indicates an expected call of ListBGPNeighbors.
func (mr *MockDeviceServiceMockRecorder) ListBGPNeighbors(arg0, arg1 any) *MockDeviceServiceListBGPNeighborsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBGPNeighbors", reflect.TypeOf((*MockDeviceService)(nil).ListBGPNeighbors), arg0, arg1)
	return &MockDeviceServiceListBGPNeighborsCall{Call: call}
}

// MockDeviceServiceListBGPNeighborsCall wrap *gomock.Call
type MockDeviceServiceListBGPNeighborsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeviceServiceListBGPNeighborsCall) Return(arg0 []packngo.BGPNeighbor, arg1 *packngo.Response, arg2 error) *MockDeviceServiceListBGPNeighborsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeviceServiceListBGPNeighborsCall) Do(f func(string, *packngo.GetOptions) ([]packngo.BGPNeighbor, *packngo.Response, error)) *MockDeviceServiceListBGPNeighborsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeviceServiceListBGPNeighborsCall) DoAndReturn(f func(string, *packngo.GetOptions) ([]packngo.BGPNeighbor, *packngo.Response, error)) *MockDeviceServiceListBGPNeighborsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListBGPSessions mocks base method.
func (m *MockDeviceService) ListBGPSessions(arg0 string, arg1 *packngo.GetOptions) ([]packngo.BGPSession, *packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBGPSessions", arg0, arg1)
	ret0, _ := ret[0].([]packngo.BGPSession)
	ret1, _ := ret[1].(*packngo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListBGPSessions indicates an expected call of ListBGPSessions.
func (mr *MockDeviceServiceMockRecorder) ListBGPSessions(arg0, arg1 any) *MockDeviceServiceListBGPSessionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBGPSessions", reflect.TypeOf((*MockDeviceService)(nil).ListBGPSessions), arg0, arg1)
	return &MockDeviceServiceListBGPSessionsCall{Call: call}
}

// MockDeviceServiceListBGPSessionsCall wrap *gomock.Call
type MockDeviceServiceListBGPSessionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeviceServiceListBGPSessionsCall) Return(arg0 []packngo.BGPSession, arg1 *packngo.Response, arg2 error) *MockDeviceServiceListBGPSessionsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeviceServiceListBGPSessionsCall) Do(f func(string, *packngo.GetOptions) ([]packngo.BGPSession, *packngo.Response, error)) *MockDeviceServiceListBGPSessionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeviceServiceListBGPSessionsCall) DoAndReturn(f func(string, *packngo.GetOptions) ([]packngo.BGPSession, *packngo.Response, error)) *MockDeviceServiceListBGPSessionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListEvents mocks base method.
func (m *MockDeviceService) ListEvents(arg0 string, arg1 *packngo.GetOptions) ([]packngo.Event, *packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvents", arg0, arg1)
	ret0, _ := ret[0].([]packngo.Event)
	ret1, _ := ret[1].(*packngo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListEvents indicates an expected call of ListEvents.
func (mr *MockDeviceServiceMockRecorder) ListEvents(arg0, arg1 any) *MockDeviceServiceListEventsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvents", reflect.TypeOf((*MockDeviceService)(nil).ListEvents), arg0, arg1)
	return &MockDeviceServiceListEventsCall{Call: call}
}

// MockDeviceServiceListEventsCall wrap *gomock.Call
type MockDeviceServiceListEventsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeviceServiceListEventsCall) Return(arg0 []packngo.Event, arg1 *packngo.Response, arg2 error) *MockDeviceServiceListEventsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeviceServiceListEventsCall) Do(f func(string, *packngo.GetOptions) ([]packngo.Event, *packngo.Response, error)) *MockDeviceServiceListEventsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeviceServiceListEventsCall) DoAndReturn(f func(string, *packngo.GetOptions) ([]packngo.Event, *packngo.Response, error)) *MockDeviceServiceListEventsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Lock mocks base method.
func (m *MockDeviceService) Lock(arg0 string) (*packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Lock", arg0)
	ret0, _ := ret[0].(*packngo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Lock indicates an expected call of Lock.
func (mr *MockDeviceServiceMockRecorder) Lock(arg0 any) *MockDeviceServiceLockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockDeviceService)(nil).Lock), arg0)
	return &MockDeviceServiceLockCall{Call: call}
}

// MockDeviceServiceLockCall wrap *gomock.Call
type MockDeviceServiceLockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeviceServiceLockCall) Return(arg0 *packngo.Response, arg1 error) *MockDeviceServiceLockCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeviceServiceLockCall) Do(f func(string) (*packngo.Response, error)) *MockDeviceServiceLockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeviceServiceLockCall) DoAndReturn(f func(string) (*packngo.Response, error)) *MockDeviceServiceLockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PowerOff mocks base method.
func (m *MockDeviceService) PowerOff(arg0 string) (*packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOff", arg0)
	ret0, _ := ret[0].(*packngo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowerOff indicates an expected call of PowerOff.
func (mr *MockDeviceServiceMockRecorder) PowerOff(arg0 any) *MockDeviceServicePowerOffCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOff", reflect.TypeOf((*MockDeviceService)(nil).PowerOff), arg0)
	return &MockDeviceServicePowerOffCall{Call: call}
}

// MockDeviceServicePowerOffCall wrap *gomock.Call
type MockDeviceServicePowerOffCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeviceServicePowerOffCall) Return(arg0 *packngo.Response, arg1 error) *MockDeviceServicePowerOffCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeviceServicePowerOffCall) Do(f func(string) (*packngo.Response, error)) *MockDeviceServicePowerOffCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeviceServicePowerOffCall) DoAndReturn(f func(string) (*packngo.Response, error)) *MockDeviceServicePowerOffCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PowerOn mocks base method.
func (m *MockDeviceService) PowerOn(arg0 string) (*packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PowerOn", arg0)
	ret0, _ := ret[0].(*packngo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PowerOn indicates an expected call of PowerOn.
func (mr *MockDeviceServiceMockRecorder) PowerOn(arg0 any) *MockDeviceServicePowerOnCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PowerOn", reflect.TypeOf((*MockDeviceService)(nil).PowerOn), arg0)
	return &MockDeviceServicePowerOnCall{Call: call}
}

// MockDeviceServicePowerOnCall wrap *gomock.Call
type MockDeviceServicePowerOnCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeviceServicePowerOnCall) Return(arg0 *packngo.Response, arg1 error) *MockDeviceServicePowerOnCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeviceServicePowerOnCall) Do(f func(string) (*packngo.Response, error)) *MockDeviceServicePowerOnCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeviceServicePowerOnCall) DoAndReturn(f func(string) (*packngo.Response, error)) *MockDeviceServicePowerOnCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Reboot mocks base method.
func (m *MockDeviceService) Reboot(arg0 string) (*packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reboot", arg0)
	ret0, _ := ret[0].(*packngo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reboot indicates an expected call of Reboot.
func (mr *MockDeviceServiceMockRecorder) Reboot(arg0 any) *MockDeviceServiceRebootCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reboot", reflect.TypeOf((*MockDeviceService)(nil).Reboot), arg0)
	return &MockDeviceServiceRebootCall{Call: call}
}

// MockDeviceServiceRebootCall wrap *gomock.Call
type MockDeviceServiceRebootCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeviceServiceRebootCall) Return(arg0 *packngo.Response, arg1 error) *MockDeviceServiceRebootCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeviceServiceRebootCall) Do(f func(string) (*packngo.Response, error)) *MockDeviceServiceRebootCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeviceServiceRebootCall) DoAndReturn(f func(string) (*packngo.Response, error)) *MockDeviceServiceRebootCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Reinstall mocks base method.
func (m *MockDeviceService) Reinstall(arg0 string, arg1 *packngo.DeviceReinstallFields) (*packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Reinstall", arg0, arg1)
	ret0, _ := ret[0].(*packngo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reinstall indicates an expected call of Reinstall.
func (mr *MockDeviceServiceMockRecorder) Reinstall(arg0, arg1 any) *MockDeviceServiceReinstallCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reinstall", reflect.TypeOf((*MockDeviceService)(nil).Reinstall), arg0, arg1)
	return &MockDeviceServiceReinstallCall{Call: call}
}

// MockDeviceServiceReinstallCall wrap *gomock.Call
type MockDeviceServiceReinstallCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeviceServiceReinstallCall) Return(arg0 *packngo.Response, arg1 error) *MockDeviceServiceReinstallCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeviceServiceReinstallCall) Do(f func(string, *packngo.DeviceReinstallFields) (*packngo.Response, error)) *MockDeviceServiceReinstallCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeviceServiceReinstallCall) DoAndReturn(f func(string, *packngo.DeviceReinstallFields) (*packngo.Response, error)) *MockDeviceServiceReinstallCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unlock mocks base method.
func (m *MockDeviceService) Unlock(arg0 string) (*packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unlock", arg0)
	ret0, _ := ret[0].(*packngo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unlock indicates an expected call of Unlock.
func (mr *MockDeviceServiceMockRecorder) Unlock(arg0 any) *MockDeviceServiceUnlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unlock", reflect.TypeOf((*MockDeviceService)(nil).Unlock), arg0)
	return &MockDeviceServiceUnlockCall{Call: call}
}

// MockDeviceServiceUnlockCall wrap *gomock.Call
type MockDeviceServiceUnlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeviceServiceUnlockCall) Return(arg0 *packngo.Response, arg1 error) *MockDeviceServiceUnlockCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeviceServiceUnlockCall) Do(f func(string) (*packngo.Response, error)) *MockDeviceServiceUnlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeviceServiceUnlockCall) DoAndReturn(f func(string) (*packngo.Response, error)) *MockDeviceServiceUnlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockDeviceService) Update(arg0 string, arg1 *packngo.DeviceUpdateRequest) (*packngo.Device, *packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*packngo.Device)
	ret1, _ := ret[1].(*packngo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockDeviceServiceMockRecorder) Update(arg0, arg1 any) *MockDeviceServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockDeviceService)(nil).Update), arg0, arg1)
	return &MockDeviceServiceUpdateCall{Call: call}
}

// MockDeviceServiceUpdateCall wrap *gomock.Call
type MockDeviceServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeviceServiceUpdateCall) Return(arg0 *packngo.Device, arg1 *packngo.Response, arg2 error) *MockDeviceServiceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeviceServiceUpdateCall) Do(f func(string, *packngo.DeviceUpdateRequest) (*packngo.Device, *packngo.Response, error)) *MockDeviceServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeviceServiceUpdateCall) DoAndReturn(f func(string, *packngo.DeviceUpdateRequest) (*packngo.Device, *packngo.Response, error)) *MockDeviceServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockOSService is a mock of OSService interface.
type MockOSService struct {
	ctrl     *gomock.Controller
	recorder *MockOSServiceMockRecorder
}

// MockOSServiceMockRecorder is the mock recorder for MockOSService.
type MockOSServiceMockRecorder struct {
	mock *MockOSService
}

// NewMockOSService creates a new mock instance.
func NewMockOSService(ctrl *gomock.Controller) *MockOSService {
	mock := &MockOSService{ctrl: ctrl}
	mock.recorder = &MockOSServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOSService) EXPECT() *MockOSServiceMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockOSService) List() ([]packngo.OS, *packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List")
	ret0, _ := ret[0].([]packngo.OS)
	ret1, _ := ret[1].(*packngo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockOSServiceMockRecorder) List() *MockOSServiceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOSService)(nil).List))
	return &MockOSServiceListCall{Call: call}
}

// MockOSServiceListCall wrap *gomock.Call
type MockOSServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOSServiceListCall) Return(arg0 []packngo.OS, arg1 *packngo.Response, arg2 error) *MockOSServiceListCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOSServiceListCall) Do(f func() ([]packngo.OS, *packngo.Response, error)) *MockOSServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOSServiceListCall) DoAndReturn(f func() ([]packngo.OS, *packngo.Response, error)) *MockOSServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPlanService is a mock of PlanService interface.
type MockPlanService struct {
	ctrl     *gomock.Controller
	recorder *MockPlanServiceMockRecorder
}

// MockPlanServiceMockRecorder is the mock recorder for MockPlanService.
type MockPlanServiceMockRecorder struct {
	mock *MockPlanService
}

// NewMockPlanService creates a new mock instance.
func NewMockPlanService(ctrl *gomock.Controller) *MockPlanService {
	mock := &MockPlanService{ctrl: ctrl}
	mock.recorder = &MockPlanServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPlanService) EXPECT() *MockPlanServiceMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockPlanService) List(arg0 *packngo.GetOptions) ([]packngo.Plan, *packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]packngo.Plan)
	ret1, _ := ret[1].(*packngo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockPlanServiceMockRecorder) List(arg0 any) *MockPlanServiceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockPlanService)(nil).List), arg0)
	return &MockPlanServiceListCall{Call: call}
}

// MockPlanServiceListCall wrap *gomock.Call
type MockPlanServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPlanServiceListCall) Return(arg0 []packngo.Plan, arg1 *packngo.Response, arg2 error) *MockPlanServiceListCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPlanServiceListCall) Do(f func(*packngo.GetOptions) ([]packngo.Plan, *packngo.Response, error)) *MockPlanServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPlanServiceListCall) DoAndReturn(f func(*packngo.GetOptions) ([]packngo.Plan, *packngo.Response, error)) *MockPlanServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OrganizationList mocks base method.
func (m *MockPlanService) OrganizationList(arg0 string, arg1 *packngo.GetOptions) ([]packngo.Plan, *packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrganizationList", arg0, arg1)
	ret0, _ := ret[0].([]packngo.Plan)
	ret1, _ := ret[1].(*packngo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OrganizationList indicates an expected call of OrganizationList.
func (mr *MockPlanServiceMockRecorder) OrganizationList(arg0, arg1 any) *MockPlanServiceOrganizationListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrganizationList", reflect.TypeOf((*MockPlanService)(nil).OrganizationList), arg0, arg1)
	return &MockPlanServiceOrganizationListCall{Call: call}
}

// MockPlanServiceOrganizationListCall wrap *gomock.Call
type MockPlanServiceOrganizationListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPlanServiceOrganizationListCall) Return(arg0 []packngo.Plan, arg1 *packngo.Response, arg2 error) *MockPlanServiceOrganizationListCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPlanServiceOrganizationListCall) Do(f func(string, *packngo.GetOptions) ([]packngo.Plan, *packngo.Response, error)) *MockPlanServiceOrganizationListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPlanServiceOrganizationListCall) DoAndReturn(f func(string, *packngo.GetOptions) ([]packngo.Plan, *packngo.Response, error)) *MockPlanServiceOrganizationListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProjectList mocks base method.
func (m *MockPlanService) ProjectList(arg0 string, arg1 *packngo.GetOptions) ([]packngo.Plan, *packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectList", arg0, arg1)
	ret0, _ := ret[0].([]packngo.Plan)
	ret1, _ := ret[1].(*packngo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProjectList indicates an expected call of ProjectList.
func (mr *MockPlanServiceMockRecorder) ProjectList(arg0, arg1 any) *MockPlanServiceProjectListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectList", reflect.TypeOf((*MockPlanService)(nil).ProjectList), arg0, arg1)
	return &MockPlanServiceProjectListCall{Call: call}
}

// MockPlanServiceProjectListCall wrap *gomock.Call
type MockPlanServiceProjectListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPlanServiceProjectListCall) Return(arg0 []packngo.Plan, arg1 *packngo.Response, arg2 error) *MockPlanServiceProjectListCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPlanServiceProjectListCall) Do(f func(string, *packngo.GetOptions) ([]packngo.Plan, *packngo.Response, error)) *MockPlanServiceProjectListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPlanServiceProjectListCall) DoAndReturn(f func(string, *packngo.GetOptions) ([]packngo.Plan, *packngo.Response, error)) *MockPlanServiceProjectListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockProjectIPService is a mock of ProjectIPService interface.
type MockProjectIPService struct {
	ctrl     *gomock.Controller
	recorder *MockProjectIPServiceMockRecorder
}

// MockProjectIPServiceMockRecorder is the mock recorder for MockProjectIPService.
type MockProjectIPServiceMockRecorder struct {
	mock *MockProjectIPService
}

// NewMockProjectIPService creates a new mock instance.
func NewMockProjectIPService(ctrl *gomock.Controller) *MockProjectIPService {
	mock := &MockProjectIPService{ctrl: ctrl}
	mock.recorder = &MockProjectIPServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectIPService) EXPECT() *MockProjectIPServiceMockRecorder {
	return m.recorder
}

// AvailableAddresses mocks base method.
func (m *MockProjectIPService) AvailableAddresses(arg0 string, arg1 *packngo.AvailableRequest) ([]string, *packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvailableAddresses", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(*packngo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AvailableAddresses indicates an expected call of AvailableAddresses.
func (mr *MockProjectIPServiceMockRecorder) AvailableAddresses(arg0, arg1 any) *MockProjectIPServiceAvailableAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvailableAddresses", reflect.TypeOf((*MockProjectIPService)(nil).AvailableAddresses), arg0, arg1)
	return &MockProjectIPServiceAvailableAddressesCall{Call: call}
}

// MockProjectIPServiceAvailableAddressesCall wrap *gomock.Call
type MockProjectIPServiceAvailableAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectIPServiceAvailableAddressesCall) Return(arg0 []string, arg1 *packngo.Response, arg2 error) *MockProjectIPServiceAvailableAddressesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectIPServiceAvailableAddressesCall) Do(f func(string, *packngo.AvailableRequest) ([]string, *packngo.Response, error)) *MockProjectIPServiceAvailableAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectIPServiceAvailableAddressesCall) DoAndReturn(f func(string, *packngo.AvailableRequest) ([]string, *packngo.Response, error)) *MockProjectIPServiceAvailableAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Create mocks base method.
func (m *MockProjectIPService) Create(arg0 string, arg1 *packngo.IPReservationCreateRequest) (*packngo.IPAddressReservation, *packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*packngo.IPAddressReservation)
	ret1, _ := ret[1].(*packngo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Create indicates an expected call of Create.
func (mr *MockProjectIPServiceMockRecorder) Create(arg0, arg1 any) *MockProjectIPServiceCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProjectIPService)(nil).Create), arg0, arg1)
	return &MockProjectIPServiceCreateCall{Call: call}
}

// MockProjectIPServiceCreateCall wrap *gomock.Call
type MockProjectIPServiceCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectIPServiceCreateCall) Return(arg0 *packngo.IPAddressReservation, arg1 *packngo.Response, arg2 error) *MockProjectIPServiceCreateCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectIPServiceCreateCall) Do(f func(string, *packngo.IPReservationCreateRequest) (*packngo.IPAddressReservation, *packngo.Response, error)) *MockProjectIPServiceCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectIPServiceCreateCall) DoAndReturn(f func(string, *packngo.IPReservationCreateRequest) (*packngo.IPAddressReservation, *packngo.Response, error)) *MockProjectIPServiceCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockProjectIPService) Delete(arg0 string) (*packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(*packngo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockProjectIPServiceMockRecorder) Delete(arg0 any) *MockProjectIPServiceDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProjectIPService)(nil).Delete), arg0)
	return &MockProjectIPServiceDeleteCall{Call: call}
}

// MockProjectIPServiceDeleteCall wrap *gomock.Call
type MockProjectIPServiceDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectIPServiceDeleteCall) Return(arg0 *packngo.Response, arg1 error) *MockProjectIPServiceDeleteCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectIPServiceDeleteCall) Do(f func(string) (*packngo.Response, error)) *MockProjectIPServiceDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectIPServiceDeleteCall) DoAndReturn(f func(string) (*packngo.Response, error)) *MockProjectIPServiceDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockProjectIPService) Get(arg0 string, arg1 *packngo.GetOptions) (*packngo.IPAddressReservation, *packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*packngo.IPAddressReservation)
	ret1, _ := ret[1].(*packngo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Get indicates an expected call of Get.
func (mr *MockProjectIPServiceMockRecorder) Get(arg0, arg1 any) *MockProjectIPServiceGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProjectIPService)(nil).Get), arg0, arg1)
	return &MockProjectIPServiceGetCall{Call: call}
}

// MockProjectIPServiceGetCall wrap *gomock.Call
type MockProjectIPServiceGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectIPServiceGetCall) Return(arg0 *packngo.IPAddressReservation, arg1 *packngo.Response, arg2 error) *MockProjectIPServiceGetCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectIPServiceGetCall) Do(f func(string, *packngo.GetOptions) (*packngo.IPAddressReservation, *packngo.Response, error)) *MockProjectIPServiceGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectIPServiceGetCall) DoAndReturn(f func(string, *packngo.GetOptions) (*packngo.IPAddressReservation, *packngo.Response, error)) *MockProjectIPServiceGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// List mocks base method.
func (m *MockProjectIPService) List(arg0 string, arg1 *packngo.GetOptions) ([]packngo.IPAddressReservation, *packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]packngo.IPAddressReservation)
	ret1, _ := ret[1].(*packngo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockProjectIPServiceMockRecorder) List(arg0, arg1 any) *MockProjectIPServiceListCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockProjectIPService)(nil).List), arg0, arg1)
	return &MockProjectIPServiceListCall{Call: call}
}

// MockProjectIPServiceListCall wrap *gomock.Call
type MockProjectIPServiceListCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectIPServiceListCall) Return(arg0 []packngo.IPAddressReservation, arg1 *packngo.Response, arg2 error) *MockProjectIPServiceListCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectIPServiceListCall) Do(f func(string, *packngo.GetOptions) ([]packngo.IPAddressReservation, *packngo.Response, error)) *MockProjectIPServiceListCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectIPServiceListCall) DoAndReturn(f func(string, *packngo.GetOptions) ([]packngo.IPAddressReservation, *packngo.Response, error)) *MockProjectIPServiceListCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Remove mocks base method.
func (m *MockProjectIPService) Remove(arg0 string) (*packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(*packngo.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Remove indicates an expected call of Remove.
func (mr *MockProjectIPServiceMockRecorder) Remove(arg0 any) *MockProjectIPServiceRemoveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockProjectIPService)(nil).Remove), arg0)
	return &MockProjectIPServiceRemoveCall{Call: call}
}

// MockProjectIPServiceRemoveCall wrap *gomock.Call
type MockProjectIPServiceRemoveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectIPServiceRemoveCall) Return(arg0 *packngo.Response, arg1 error) *MockProjectIPServiceRemoveCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectIPServiceRemoveCall) Do(f func(string) (*packngo.Response, error)) *MockProjectIPServiceRemoveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectIPServiceRemoveCall) DoAndReturn(f func(string) (*packngo.Response, error)) *MockProjectIPServiceRemoveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Request mocks base method.
func (m *MockProjectIPService) Request(arg0 string, arg1 *packngo.IPReservationCreateRequest) (*packngo.IPAddressReservation, *packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", arg0, arg1)
	ret0, _ := ret[0].(*packngo.IPAddressReservation)
	ret1, _ := ret[1].(*packngo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Request indicates an expected call of Request.
func (mr *MockProjectIPServiceMockRecorder) Request(arg0, arg1 any) *MockProjectIPServiceRequestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockProjectIPService)(nil).Request), arg0, arg1)
	return &MockProjectIPServiceRequestCall{Call: call}
}

// MockProjectIPServiceRequestCall wrap *gomock.Call
type MockProjectIPServiceRequestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectIPServiceRequestCall) Return(arg0 *packngo.IPAddressReservation, arg1 *packngo.Response, arg2 error) *MockProjectIPServiceRequestCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectIPServiceRequestCall) Do(f func(string, *packngo.IPReservationCreateRequest) (*packngo.IPAddressReservation, *packngo.Response, error)) *MockProjectIPServiceRequestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectIPServiceRequestCall) DoAndReturn(f func(string, *packngo.IPReservationCreateRequest) (*packngo.IPAddressReservation, *packngo.Response, error)) *MockProjectIPServiceRequestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockProjectIPService) Update(arg0 string, arg1 *packngo.IPAddressUpdateRequest, arg2 *packngo.GetOptions) (*packngo.IPAddressReservation, *packngo.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*packngo.IPAddressReservation)
	ret1, _ := ret[1].(*packngo.Response)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Update indicates an expected call of Update.
func (mr *MockProjectIPServiceMockRecorder) Update(arg0, arg1, arg2 any) *MockProjectIPServiceUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockProjectIPService)(nil).Update), arg0, arg1, arg2)
	return &MockProjectIPServiceUpdateCall{Call: call}
}

// MockProjectIPServiceUpdateCall wrap *gomock.Call
type MockProjectIPServiceUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProjectIPServiceUpdateCall) Return(arg0 *packngo.IPAddressReservation, arg1 *packngo.Response, arg2 error) *MockProjectIPServiceUpdateCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProjectIPServiceUpdateCall) Do(f func(string, *packngo.IPAddressUpdateRequest, *packngo.GetOptions) (*packngo.IPAddressReservation, *packngo.Response, error)) *MockProjectIPServiceUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProjectIPServiceUpdateCall) DoAndReturn(f func(string, *packngo.IPAddressUpdateRequest, *packngo.GetOptions) (*packngo.IPAddressReservation, *packngo.Response, error)) *MockProjectIPServiceUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
