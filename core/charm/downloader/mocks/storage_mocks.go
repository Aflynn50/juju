// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/charm/downloader (interfaces: Storage)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/storage_mocks.go github.com/juju/juju/core/charm/downloader Storage
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	downloader "github.com/juju/juju/core/charm/downloader"
	gomock "go.uber.org/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// PrepareToStoreCharm mocks base method.
func (m *MockStorage) PrepareToStoreCharm(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrepareToStoreCharm", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PrepareToStoreCharm indicates an expected call of PrepareToStoreCharm.
func (mr *MockStorageMockRecorder) PrepareToStoreCharm(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrepareToStoreCharm", reflect.TypeOf((*MockStorage)(nil).PrepareToStoreCharm), arg0)
}

// Store mocks base method.
func (m *MockStorage) Store(arg0 context.Context, arg1 string, arg2 downloader.DownloadedCharm) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockStorageMockRecorder) Store(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockStorage)(nil).Store), arg0, arg1, arg2)
}
