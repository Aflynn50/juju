// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/base (interfaces: DistroSource)
//
// Generated by this command:
//
//	mockgen -typed -package base -destination distrosource_mock_test.go github.com/juju/juju/core/base DistroSource
//

// Package base is a generated GoMock package.
package base

import (
	reflect "reflect"

	series "github.com/juju/os/v2/series"
	gomock "go.uber.org/mock/gomock"
)

// MockDistroSource is a mock of DistroSource interface.
type MockDistroSource struct {
	ctrl     *gomock.Controller
	recorder *MockDistroSourceMockRecorder
}

// MockDistroSourceMockRecorder is the mock recorder for MockDistroSource.
type MockDistroSourceMockRecorder struct {
	mock *MockDistroSource
}

// NewMockDistroSource creates a new mock instance.
func NewMockDistroSource(ctrl *gomock.Controller) *MockDistroSource {
	mock := &MockDistroSource{ctrl: ctrl}
	mock.recorder = &MockDistroSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDistroSource) EXPECT() *MockDistroSourceMockRecorder {
	return m.recorder
}

// Refresh mocks base method.
func (m *MockDistroSource) Refresh() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Refresh")
	ret0, _ := ret[0].(error)
	return ret0
}

// Refresh indicates an expected call of Refresh.
func (mr *MockDistroSourceMockRecorder) Refresh() *MockDistroSourceRefreshCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Refresh", reflect.TypeOf((*MockDistroSource)(nil).Refresh))
	return &MockDistroSourceRefreshCall{Call: call}
}

// MockDistroSourceRefreshCall wrap *gomock.Call
type MockDistroSourceRefreshCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDistroSourceRefreshCall) Return(arg0 error) *MockDistroSourceRefreshCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDistroSourceRefreshCall) Do(f func() error) *MockDistroSourceRefreshCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDistroSourceRefreshCall) DoAndReturn(f func() error) *MockDistroSourceRefreshCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SeriesInfo mocks base method.
func (m *MockDistroSource) SeriesInfo(arg0 string) (series.DistroInfoSerie, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeriesInfo", arg0)
	ret0, _ := ret[0].(series.DistroInfoSerie)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// SeriesInfo indicates an expected call of SeriesInfo.
func (mr *MockDistroSourceMockRecorder) SeriesInfo(arg0 any) *MockDistroSourceSeriesInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeriesInfo", reflect.TypeOf((*MockDistroSource)(nil).SeriesInfo), arg0)
	return &MockDistroSourceSeriesInfoCall{Call: call}
}

// MockDistroSourceSeriesInfoCall wrap *gomock.Call
type MockDistroSourceSeriesInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDistroSourceSeriesInfoCall) Return(arg0 series.DistroInfoSerie, arg1 bool) *MockDistroSourceSeriesInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDistroSourceSeriesInfoCall) Do(f func(string) (series.DistroInfoSerie, bool)) *MockDistroSourceSeriesInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDistroSourceSeriesInfoCall) DoAndReturn(f func(string) (series.DistroInfoSerie, bool)) *MockDistroSourceSeriesInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
