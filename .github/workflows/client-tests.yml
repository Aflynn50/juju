name: "Client Tests"
on:
  push:
    branches: [2.*, 3.*, 4.*, main]
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  should-run:
    # This job checks if files have been changed according
    # to the filter, and sets a should-run output if
    # the filter is satisfied.
    name: Check changed files
    runs-on: ubuntu-latest
    outputs:
      should-run: ${{ steps.set-flag.outputs.SHOULD_RUN }}
    steps:
      - name: Check changed files
        id: should-run
        uses: dorny/paths-filter@v3
        with:
          filters: |
            should_run:
              - '**.go'
              - 'go.mod'
              - '.github/workflows/client-tests.yml'
              - 'scripts/dqlite/**'
              - 'Makefile'
              - 'make_functions.sh'

      - name: Set flag
        id: set-flag
        run: |
          echo "SHOULD_RUN=steps.should-run.outputs.should_run" >> $GITHUB_OUTPUT

  test-client-ubuntu:
    needs: [should-run]
    name: "Client Tests"
    runs-on: ${{ matrix.os }}
    if: github.event.pull_request.draft == false && needs.should-run.outputs.should-run == true
    strategy:
      fail-fast: false
      matrix:
        os: [macOS-latest]

    steps:
    - name: "Checkout"
      uses: actions/checkout@v4

    - name: "Set up Go"
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: "Install musl & dqlite (Ubuntu)"
      if: (matrix.os == 'ubuntu-latest')
      shell: bash
      run: |
        sudo make MUSL_CROSS_COMPILE=0 musl-install dqlite-install

    - name: "Test client (Ubuntu)"
      if: (matrix.os == 'ubuntu-latest')
      shell: bash
      run: |
        # Jenkins can perform the full jujud testing.
        TEST_PACKAGES=./cmd/juju/... COVERAGE_CHECK=1 TEST_TIMEOUT="15m" make run-go-tests
        TEST_PACKAGES=./cmd/plugins/... COVERAGE_CHECK=1 TEST_TIMEOUT="15m" make run-go-tests

    - name: "Test client (macOS)"
      if: (matrix.os == 'macOS-latest')
      shell: bash
      run: |
        go test -race -v ./cmd/juju/... -check.v -coverprofile=coverage.txt -covermode=atomic -timeout=15m
        go test -race -v ./cmd/plugins/... -check.v -coverprofile=coverage.txt -covermode=atomic -timeout=15m
