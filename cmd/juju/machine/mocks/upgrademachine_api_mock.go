// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/machine (interfaces: UpgradeMachineAPI)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/upgrademachine_api_mock.go github.com/juju/juju/cmd/juju/machine UpgradeMachineAPI
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockUpgradeMachineAPI is a mock of UpgradeMachineAPI interface.
type MockUpgradeMachineAPI struct {
	ctrl     *gomock.Controller
	recorder *MockUpgradeMachineAPIMockRecorder
}

// MockUpgradeMachineAPIMockRecorder is the mock recorder for MockUpgradeMachineAPI.
type MockUpgradeMachineAPIMockRecorder struct {
	mock *MockUpgradeMachineAPI
}

// NewMockUpgradeMachineAPI creates a new mock instance.
func NewMockUpgradeMachineAPI(ctrl *gomock.Controller) *MockUpgradeMachineAPI {
	mock := &MockUpgradeMachineAPI{ctrl: ctrl}
	mock.recorder = &MockUpgradeMachineAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpgradeMachineAPI) EXPECT() *MockUpgradeMachineAPIMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockUpgradeMachineAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockUpgradeMachineAPIMockRecorder) Close() *MockUpgradeMachineAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockUpgradeMachineAPI)(nil).Close))
	return &MockUpgradeMachineAPICloseCall{Call: call}
}

// MockUpgradeMachineAPICloseCall wrap *gomock.Call
type MockUpgradeMachineAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeMachineAPICloseCall) Return(arg0 error) *MockUpgradeMachineAPICloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeMachineAPICloseCall) Do(f func() error) *MockUpgradeMachineAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeMachineAPICloseCall) DoAndReturn(f func() error) *MockUpgradeMachineAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUpgradeSeriesMessages mocks base method.
func (m *MockUpgradeMachineAPI) GetUpgradeSeriesMessages(arg0, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpgradeSeriesMessages", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpgradeSeriesMessages indicates an expected call of GetUpgradeSeriesMessages.
func (mr *MockUpgradeMachineAPIMockRecorder) GetUpgradeSeriesMessages(arg0, arg1 any) *MockUpgradeMachineAPIGetUpgradeSeriesMessagesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpgradeSeriesMessages", reflect.TypeOf((*MockUpgradeMachineAPI)(nil).GetUpgradeSeriesMessages), arg0, arg1)
	return &MockUpgradeMachineAPIGetUpgradeSeriesMessagesCall{Call: call}
}

// MockUpgradeMachineAPIGetUpgradeSeriesMessagesCall wrap *gomock.Call
type MockUpgradeMachineAPIGetUpgradeSeriesMessagesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeMachineAPIGetUpgradeSeriesMessagesCall) Return(arg0 []string, arg1 error) *MockUpgradeMachineAPIGetUpgradeSeriesMessagesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeMachineAPIGetUpgradeSeriesMessagesCall) Do(f func(string, string) ([]string, error)) *MockUpgradeMachineAPIGetUpgradeSeriesMessagesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeMachineAPIGetUpgradeSeriesMessagesCall) DoAndReturn(f func(string, string) ([]string, error)) *MockUpgradeMachineAPIGetUpgradeSeriesMessagesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeSeriesComplete mocks base method.
func (m *MockUpgradeMachineAPI) UpgradeSeriesComplete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeSeriesComplete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradeSeriesComplete indicates an expected call of UpgradeSeriesComplete.
func (mr *MockUpgradeMachineAPIMockRecorder) UpgradeSeriesComplete(arg0 any) *MockUpgradeMachineAPIUpgradeSeriesCompleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeSeriesComplete", reflect.TypeOf((*MockUpgradeMachineAPI)(nil).UpgradeSeriesComplete), arg0)
	return &MockUpgradeMachineAPIUpgradeSeriesCompleteCall{Call: call}
}

// MockUpgradeMachineAPIUpgradeSeriesCompleteCall wrap *gomock.Call
type MockUpgradeMachineAPIUpgradeSeriesCompleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeMachineAPIUpgradeSeriesCompleteCall) Return(arg0 error) *MockUpgradeMachineAPIUpgradeSeriesCompleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeMachineAPIUpgradeSeriesCompleteCall) Do(f func(string) error) *MockUpgradeMachineAPIUpgradeSeriesCompleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeMachineAPIUpgradeSeriesCompleteCall) DoAndReturn(f func(string) error) *MockUpgradeMachineAPIUpgradeSeriesCompleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeSeriesPrepare mocks base method.
func (m *MockUpgradeMachineAPI) UpgradeSeriesPrepare(arg0, arg1 string, arg2 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeSeriesPrepare", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpgradeSeriesPrepare indicates an expected call of UpgradeSeriesPrepare.
func (mr *MockUpgradeMachineAPIMockRecorder) UpgradeSeriesPrepare(arg0, arg1, arg2 any) *MockUpgradeMachineAPIUpgradeSeriesPrepareCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeSeriesPrepare", reflect.TypeOf((*MockUpgradeMachineAPI)(nil).UpgradeSeriesPrepare), arg0, arg1, arg2)
	return &MockUpgradeMachineAPIUpgradeSeriesPrepareCall{Call: call}
}

// MockUpgradeMachineAPIUpgradeSeriesPrepareCall wrap *gomock.Call
type MockUpgradeMachineAPIUpgradeSeriesPrepareCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeMachineAPIUpgradeSeriesPrepareCall) Return(arg0 error) *MockUpgradeMachineAPIUpgradeSeriesPrepareCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeMachineAPIUpgradeSeriesPrepareCall) Do(f func(string, string, bool) error) *MockUpgradeMachineAPIUpgradeSeriesPrepareCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeMachineAPIUpgradeSeriesPrepareCall) DoAndReturn(f func(string, string, bool) error) *MockUpgradeMachineAPIUpgradeSeriesPrepareCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchUpgradeSeriesNotifications mocks base method.
func (m *MockUpgradeMachineAPI) WatchUpgradeSeriesNotifications(arg0 string) (watcher.Watcher[struct{}], string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchUpgradeSeriesNotifications", arg0)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// WatchUpgradeSeriesNotifications indicates an expected call of WatchUpgradeSeriesNotifications.
func (mr *MockUpgradeMachineAPIMockRecorder) WatchUpgradeSeriesNotifications(arg0 any) *MockUpgradeMachineAPIWatchUpgradeSeriesNotificationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUpgradeSeriesNotifications", reflect.TypeOf((*MockUpgradeMachineAPI)(nil).WatchUpgradeSeriesNotifications), arg0)
	return &MockUpgradeMachineAPIWatchUpgradeSeriesNotificationsCall{Call: call}
}

// MockUpgradeMachineAPIWatchUpgradeSeriesNotificationsCall wrap *gomock.Call
type MockUpgradeMachineAPIWatchUpgradeSeriesNotificationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeMachineAPIWatchUpgradeSeriesNotificationsCall) Return(arg0 watcher.Watcher[struct{}], arg1 string, arg2 error) *MockUpgradeMachineAPIWatchUpgradeSeriesNotificationsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeMachineAPIWatchUpgradeSeriesNotificationsCall) Do(f func(string) (watcher.Watcher[struct{}], string, error)) *MockUpgradeMachineAPIWatchUpgradeSeriesNotificationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeMachineAPIWatchUpgradeSeriesNotificationsCall) DoAndReturn(f func(string) (watcher.Watcher[struct{}], string, error)) *MockUpgradeMachineAPIWatchUpgradeSeriesNotificationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
