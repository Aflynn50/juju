// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/application/store (interfaces: CharmAdder,CharmsAPI,DownloadBundleClient)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination ./mocks/store_mock.go github.com/juju/juju/cmd/juju/application/store CharmAdder,CharmsAPI,DownloadBundleClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	url "net/url"
	reflect "reflect"

	charm "github.com/juju/charm/v13"
	charms "github.com/juju/juju/api/client/charms"
	charm0 "github.com/juju/juju/api/common/charm"
	charmhub "github.com/juju/juju/internal/charmhub"
	gomock "go.uber.org/mock/gomock"
)

// MockCharmAdder is a mock of CharmAdder interface.
type MockCharmAdder struct {
	ctrl     *gomock.Controller
	recorder *MockCharmAdderMockRecorder
}

// MockCharmAdderMockRecorder is the mock recorder for MockCharmAdder.
type MockCharmAdderMockRecorder struct {
	mock *MockCharmAdder
}

// NewMockCharmAdder creates a new mock instance.
func NewMockCharmAdder(ctrl *gomock.Controller) *MockCharmAdder {
	mock := &MockCharmAdder{ctrl: ctrl}
	mock.recorder = &MockCharmAdderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmAdder) EXPECT() *MockCharmAdderMockRecorder {
	return m.recorder
}

// AddCharm mocks base method.
func (m *MockCharmAdder) AddCharm(arg0 *charm.URL, arg1 charm0.Origin, arg2 bool) (charm0.Origin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddCharm", arg0, arg1, arg2)
	ret0, _ := ret[0].(charm0.Origin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddCharm indicates an expected call of AddCharm.
func (mr *MockCharmAdderMockRecorder) AddCharm(arg0, arg1, arg2 any) *MockCharmAdderAddCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddCharm", reflect.TypeOf((*MockCharmAdder)(nil).AddCharm), arg0, arg1, arg2)
	return &MockCharmAdderAddCharmCall{Call: call}
}

// MockCharmAdderAddCharmCall wrap *gomock.Call
type MockCharmAdderAddCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmAdderAddCharmCall) Return(arg0 charm0.Origin, arg1 error) *MockCharmAdderAddCharmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmAdderAddCharmCall) Do(f func(*charm.URL, charm0.Origin, bool) (charm0.Origin, error)) *MockCharmAdderAddCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmAdderAddCharmCall) DoAndReturn(f func(*charm.URL, charm0.Origin, bool) (charm0.Origin, error)) *MockCharmAdderAddCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddLocalCharm mocks base method.
func (m *MockCharmAdder) AddLocalCharm(arg0 *charm.URL, arg1 charm.Charm, arg2 bool) (*charm.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLocalCharm", arg0, arg1, arg2)
	ret0, _ := ret[0].(*charm.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLocalCharm indicates an expected call of AddLocalCharm.
func (mr *MockCharmAdderMockRecorder) AddLocalCharm(arg0, arg1, arg2 any) *MockCharmAdderAddLocalCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLocalCharm", reflect.TypeOf((*MockCharmAdder)(nil).AddLocalCharm), arg0, arg1, arg2)
	return &MockCharmAdderAddLocalCharmCall{Call: call}
}

// MockCharmAdderAddLocalCharmCall wrap *gomock.Call
type MockCharmAdderAddLocalCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmAdderAddLocalCharmCall) Return(arg0 *charm.URL, arg1 error) *MockCharmAdderAddLocalCharmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmAdderAddLocalCharmCall) Do(f func(*charm.URL, charm.Charm, bool) (*charm.URL, error)) *MockCharmAdderAddLocalCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmAdderAddLocalCharmCall) DoAndReturn(f func(*charm.URL, charm.Charm, bool) (*charm.URL, error)) *MockCharmAdderAddLocalCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CheckCharmPlacement mocks base method.
func (m *MockCharmAdder) CheckCharmPlacement(arg0 string, arg1 *charm.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCharmPlacement", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckCharmPlacement indicates an expected call of CheckCharmPlacement.
func (mr *MockCharmAdderMockRecorder) CheckCharmPlacement(arg0, arg1 any) *MockCharmAdderCheckCharmPlacementCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCharmPlacement", reflect.TypeOf((*MockCharmAdder)(nil).CheckCharmPlacement), arg0, arg1)
	return &MockCharmAdderCheckCharmPlacementCall{Call: call}
}

// MockCharmAdderCheckCharmPlacementCall wrap *gomock.Call
type MockCharmAdderCheckCharmPlacementCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmAdderCheckCharmPlacementCall) Return(arg0 error) *MockCharmAdderCheckCharmPlacementCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmAdderCheckCharmPlacementCall) Do(f func(string, *charm.URL) error) *MockCharmAdderCheckCharmPlacementCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmAdderCheckCharmPlacementCall) DoAndReturn(f func(string, *charm.URL) error) *MockCharmAdderCheckCharmPlacementCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCharmsAPI is a mock of CharmsAPI interface.
type MockCharmsAPI struct {
	ctrl     *gomock.Controller
	recorder *MockCharmsAPIMockRecorder
}

// MockCharmsAPIMockRecorder is the mock recorder for MockCharmsAPI.
type MockCharmsAPIMockRecorder struct {
	mock *MockCharmsAPI
}

// NewMockCharmsAPI creates a new mock instance.
func NewMockCharmsAPI(ctrl *gomock.Controller) *MockCharmsAPI {
	mock := &MockCharmsAPI{ctrl: ctrl}
	mock.recorder = &MockCharmsAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmsAPI) EXPECT() *MockCharmsAPIMockRecorder {
	return m.recorder
}

// GetDownloadInfo mocks base method.
func (m *MockCharmsAPI) GetDownloadInfo(arg0 *charm.URL, arg1 charm0.Origin) (charms.DownloadInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDownloadInfo", arg0, arg1)
	ret0, _ := ret[0].(charms.DownloadInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDownloadInfo indicates an expected call of GetDownloadInfo.
func (mr *MockCharmsAPIMockRecorder) GetDownloadInfo(arg0, arg1 any) *MockCharmsAPIGetDownloadInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDownloadInfo", reflect.TypeOf((*MockCharmsAPI)(nil).GetDownloadInfo), arg0, arg1)
	return &MockCharmsAPIGetDownloadInfoCall{Call: call}
}

// MockCharmsAPIGetDownloadInfoCall wrap *gomock.Call
type MockCharmsAPIGetDownloadInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmsAPIGetDownloadInfoCall) Return(arg0 charms.DownloadInfo, arg1 error) *MockCharmsAPIGetDownloadInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmsAPIGetDownloadInfoCall) Do(f func(*charm.URL, charm0.Origin) (charms.DownloadInfo, error)) *MockCharmsAPIGetDownloadInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmsAPIGetDownloadInfoCall) DoAndReturn(f func(*charm.URL, charm0.Origin) (charms.DownloadInfo, error)) *MockCharmsAPIGetDownloadInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResolveCharms mocks base method.
func (m *MockCharmsAPI) ResolveCharms(arg0 []charms.CharmToResolve) ([]charms.ResolvedCharm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveCharms", arg0)
	ret0, _ := ret[0].([]charms.ResolvedCharm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveCharms indicates an expected call of ResolveCharms.
func (mr *MockCharmsAPIMockRecorder) ResolveCharms(arg0 any) *MockCharmsAPIResolveCharmsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveCharms", reflect.TypeOf((*MockCharmsAPI)(nil).ResolveCharms), arg0)
	return &MockCharmsAPIResolveCharmsCall{Call: call}
}

// MockCharmsAPIResolveCharmsCall wrap *gomock.Call
type MockCharmsAPIResolveCharmsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmsAPIResolveCharmsCall) Return(arg0 []charms.ResolvedCharm, arg1 error) *MockCharmsAPIResolveCharmsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmsAPIResolveCharmsCall) Do(f func([]charms.CharmToResolve) ([]charms.ResolvedCharm, error)) *MockCharmsAPIResolveCharmsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmsAPIResolveCharmsCall) DoAndReturn(f func([]charms.CharmToResolve) ([]charms.ResolvedCharm, error)) *MockCharmsAPIResolveCharmsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDownloadBundleClient is a mock of DownloadBundleClient interface.
type MockDownloadBundleClient struct {
	ctrl     *gomock.Controller
	recorder *MockDownloadBundleClientMockRecorder
}

// MockDownloadBundleClientMockRecorder is the mock recorder for MockDownloadBundleClient.
type MockDownloadBundleClientMockRecorder struct {
	mock *MockDownloadBundleClient
}

// NewMockDownloadBundleClient creates a new mock instance.
func NewMockDownloadBundleClient(ctrl *gomock.Controller) *MockDownloadBundleClient {
	mock := &MockDownloadBundleClient{ctrl: ctrl}
	mock.recorder = &MockDownloadBundleClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDownloadBundleClient) EXPECT() *MockDownloadBundleClientMockRecorder {
	return m.recorder
}

// DownloadAndReadBundle mocks base method.
func (m *MockDownloadBundleClient) DownloadAndReadBundle(arg0 context.Context, arg1 *url.URL, arg2 string, arg3 ...charmhub.DownloadOption) (charm.Bundle, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DownloadAndReadBundle", varargs...)
	ret0, _ := ret[0].(charm.Bundle)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DownloadAndReadBundle indicates an expected call of DownloadAndReadBundle.
func (mr *MockDownloadBundleClientMockRecorder) DownloadAndReadBundle(arg0, arg1, arg2 any, arg3 ...any) *MockDownloadBundleClientDownloadAndReadBundleCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadAndReadBundle", reflect.TypeOf((*MockDownloadBundleClient)(nil).DownloadAndReadBundle), varargs...)
	return &MockDownloadBundleClientDownloadAndReadBundleCall{Call: call}
}

// MockDownloadBundleClientDownloadAndReadBundleCall wrap *gomock.Call
type MockDownloadBundleClientDownloadAndReadBundleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDownloadBundleClientDownloadAndReadBundleCall) Return(arg0 charm.Bundle, arg1 error) *MockDownloadBundleClientDownloadAndReadBundleCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDownloadBundleClientDownloadAndReadBundleCall) Do(f func(context.Context, *url.URL, string, ...charmhub.DownloadOption) (charm.Bundle, error)) *MockDownloadBundleClientDownloadAndReadBundleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDownloadBundleClientDownloadAndReadBundleCall) DoAndReturn(f func(context.Context, *url.URL, string, ...charmhub.DownloadOption) (charm.Bundle, error)) *MockDownloadBundleClientDownloadAndReadBundleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
