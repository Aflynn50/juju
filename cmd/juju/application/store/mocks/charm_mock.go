// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/charm/v13 (interfaces: Bundle)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination ./mocks/charm_mock.go github.com/juju/charm/v13 Bundle
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	charm "github.com/juju/charm/v13"
	gomock "go.uber.org/mock/gomock"
)

// MockBundle is a mock of Bundle interface.
type MockBundle struct {
	ctrl     *gomock.Controller
	recorder *MockBundleMockRecorder
}

// MockBundleMockRecorder is the mock recorder for MockBundle.
type MockBundleMockRecorder struct {
	mock *MockBundle
}

// NewMockBundle creates a new mock instance.
func NewMockBundle(ctrl *gomock.Controller) *MockBundle {
	mock := &MockBundle{ctrl: ctrl}
	mock.recorder = &MockBundleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBundle) EXPECT() *MockBundleMockRecorder {
	return m.recorder
}

// ContainsOverlays mocks base method.
func (m *MockBundle) ContainsOverlays() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainsOverlays")
	ret0, _ := ret[0].(bool)
	return ret0
}

// ContainsOverlays indicates an expected call of ContainsOverlays.
func (mr *MockBundleMockRecorder) ContainsOverlays() *MockBundleContainsOverlaysCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainsOverlays", reflect.TypeOf((*MockBundle)(nil).ContainsOverlays))
	return &MockBundleContainsOverlaysCall{Call: call}
}

// MockBundleContainsOverlaysCall wrap *gomock.Call
type MockBundleContainsOverlaysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBundleContainsOverlaysCall) Return(arg0 bool) *MockBundleContainsOverlaysCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBundleContainsOverlaysCall) Do(f func() bool) *MockBundleContainsOverlaysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBundleContainsOverlaysCall) DoAndReturn(f func() bool) *MockBundleContainsOverlaysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Data mocks base method.
func (m *MockBundle) Data() *charm.BundleData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(*charm.BundleData)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockBundleMockRecorder) Data() *MockBundleDataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockBundle)(nil).Data))
	return &MockBundleDataCall{Call: call}
}

// MockBundleDataCall wrap *gomock.Call
type MockBundleDataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBundleDataCall) Return(arg0 *charm.BundleData) *MockBundleDataCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBundleDataCall) Do(f func() *charm.BundleData) *MockBundleDataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBundleDataCall) DoAndReturn(f func() *charm.BundleData) *MockBundleDataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadMe mocks base method.
func (m *MockBundle) ReadMe() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadMe")
	ret0, _ := ret[0].(string)
	return ret0
}

// ReadMe indicates an expected call of ReadMe.
func (mr *MockBundleMockRecorder) ReadMe() *MockBundleReadMeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadMe", reflect.TypeOf((*MockBundle)(nil).ReadMe))
	return &MockBundleReadMeCall{Call: call}
}

// MockBundleReadMeCall wrap *gomock.Call
type MockBundleReadMeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBundleReadMeCall) Return(arg0 string) *MockBundleReadMeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBundleReadMeCall) Do(f func() string) *MockBundleReadMeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBundleReadMeCall) DoAndReturn(f func() string) *MockBundleReadMeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
