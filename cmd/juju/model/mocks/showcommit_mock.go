// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/model (interfaces: ShowCommitCommandAPI)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination ./mocks/showcommit_mock.go github.com/juju/juju/cmd/juju/model ShowCommitCommandAPI
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	model "github.com/juju/juju/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockShowCommitCommandAPI is a mock of ShowCommitCommandAPI interface.
type MockShowCommitCommandAPI struct {
	ctrl     *gomock.Controller
	recorder *MockShowCommitCommandAPIMockRecorder
}

// MockShowCommitCommandAPIMockRecorder is the mock recorder for MockShowCommitCommandAPI.
type MockShowCommitCommandAPIMockRecorder struct {
	mock *MockShowCommitCommandAPI
}

// NewMockShowCommitCommandAPI creates a new mock instance.
func NewMockShowCommitCommandAPI(ctrl *gomock.Controller) *MockShowCommitCommandAPI {
	mock := &MockShowCommitCommandAPI{ctrl: ctrl}
	mock.recorder = &MockShowCommitCommandAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShowCommitCommandAPI) EXPECT() *MockShowCommitCommandAPIMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockShowCommitCommandAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockShowCommitCommandAPIMockRecorder) Close() *MockShowCommitCommandAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockShowCommitCommandAPI)(nil).Close))
	return &MockShowCommitCommandAPICloseCall{Call: call}
}

// MockShowCommitCommandAPICloseCall wrap *gomock.Call
type MockShowCommitCommandAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockShowCommitCommandAPICloseCall) Return(arg0 error) *MockShowCommitCommandAPICloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockShowCommitCommandAPICloseCall) Do(f func() error) *MockShowCommitCommandAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockShowCommitCommandAPICloseCall) DoAndReturn(f func() error) *MockShowCommitCommandAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ShowCommit mocks base method.
func (m *MockShowCommitCommandAPI) ShowCommit(arg0 int) (model.GenerationCommit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShowCommit", arg0)
	ret0, _ := ret[0].(model.GenerationCommit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShowCommit indicates an expected call of ShowCommit.
func (mr *MockShowCommitCommandAPIMockRecorder) ShowCommit(arg0 any) *MockShowCommitCommandAPIShowCommitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShowCommit", reflect.TypeOf((*MockShowCommitCommandAPI)(nil).ShowCommit), arg0)
	return &MockShowCommitCommandAPIShowCommitCall{Call: call}
}

// MockShowCommitCommandAPIShowCommitCall wrap *gomock.Call
type MockShowCommitCommandAPIShowCommitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockShowCommitCommandAPIShowCommitCall) Return(arg0 model.GenerationCommit, arg1 error) *MockShowCommitCommandAPIShowCommitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockShowCommitCommandAPIShowCommitCall) Do(f func(int) (model.GenerationCommit, error)) *MockShowCommitCommandAPIShowCommitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockShowCommitCommandAPIShowCommitCall) DoAndReturn(f func(int) (model.GenerationCommit, error)) *MockShowCommitCommandAPIShowCommitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
