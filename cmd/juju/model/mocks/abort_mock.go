// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/model (interfaces: AbortCommandAPI)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination ./mocks/abort_mock.go github.com/juju/juju/cmd/juju/model AbortCommandAPI
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockAbortCommandAPI is a mock of AbortCommandAPI interface.
type MockAbortCommandAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAbortCommandAPIMockRecorder
}

// MockAbortCommandAPIMockRecorder is the mock recorder for MockAbortCommandAPI.
type MockAbortCommandAPIMockRecorder struct {
	mock *MockAbortCommandAPI
}

// NewMockAbortCommandAPI creates a new mock instance.
func NewMockAbortCommandAPI(ctrl *gomock.Controller) *MockAbortCommandAPI {
	mock := &MockAbortCommandAPI{ctrl: ctrl}
	mock.recorder = &MockAbortCommandAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAbortCommandAPI) EXPECT() *MockAbortCommandAPIMockRecorder {
	return m.recorder
}

// AbortBranch mocks base method.
func (m *MockAbortCommandAPI) AbortBranch(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbortBranch", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AbortBranch indicates an expected call of AbortBranch.
func (mr *MockAbortCommandAPIMockRecorder) AbortBranch(arg0 any) *MockAbortCommandAPIAbortBranchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbortBranch", reflect.TypeOf((*MockAbortCommandAPI)(nil).AbortBranch), arg0)
	return &MockAbortCommandAPIAbortBranchCall{Call: call}
}

// MockAbortCommandAPIAbortBranchCall wrap *gomock.Call
type MockAbortCommandAPIAbortBranchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAbortCommandAPIAbortBranchCall) Return(arg0 error) *MockAbortCommandAPIAbortBranchCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAbortCommandAPIAbortBranchCall) Do(f func(string) error) *MockAbortCommandAPIAbortBranchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAbortCommandAPIAbortBranchCall) DoAndReturn(f func(string) error) *MockAbortCommandAPIAbortBranchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Close mocks base method.
func (m *MockAbortCommandAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockAbortCommandAPIMockRecorder) Close() *MockAbortCommandAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockAbortCommandAPI)(nil).Close))
	return &MockAbortCommandAPICloseCall{Call: call}
}

// MockAbortCommandAPICloseCall wrap *gomock.Call
type MockAbortCommandAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAbortCommandAPICloseCall) Return(arg0 error) *MockAbortCommandAPICloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAbortCommandAPICloseCall) Do(f func() error) *MockAbortCommandAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAbortCommandAPICloseCall) DoAndReturn(f func() error) *MockAbortCommandAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HasActiveBranch mocks base method.
func (m *MockAbortCommandAPI) HasActiveBranch(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasActiveBranch", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasActiveBranch indicates an expected call of HasActiveBranch.
func (mr *MockAbortCommandAPIMockRecorder) HasActiveBranch(arg0 any) *MockAbortCommandAPIHasActiveBranchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasActiveBranch", reflect.TypeOf((*MockAbortCommandAPI)(nil).HasActiveBranch), arg0)
	return &MockAbortCommandAPIHasActiveBranchCall{Call: call}
}

// MockAbortCommandAPIHasActiveBranchCall wrap *gomock.Call
type MockAbortCommandAPIHasActiveBranchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAbortCommandAPIHasActiveBranchCall) Return(arg0 bool, arg1 error) *MockAbortCommandAPIHasActiveBranchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAbortCommandAPIHasActiveBranchCall) Do(f func(string) (bool, error)) *MockAbortCommandAPIHasActiveBranchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAbortCommandAPIHasActiveBranchCall) DoAndReturn(f func(string) (bool, error)) *MockAbortCommandAPIHasActiveBranchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
