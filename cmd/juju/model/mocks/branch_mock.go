// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/cmd/juju/model (interfaces: BranchCommandAPI)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination ./mocks/branch_mock.go github.com/juju/juju/cmd/juju/model BranchCommandAPI
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBranchCommandAPI is a mock of BranchCommandAPI interface.
type MockBranchCommandAPI struct {
	ctrl     *gomock.Controller
	recorder *MockBranchCommandAPIMockRecorder
}

// MockBranchCommandAPIMockRecorder is the mock recorder for MockBranchCommandAPI.
type MockBranchCommandAPIMockRecorder struct {
	mock *MockBranchCommandAPI
}

// NewMockBranchCommandAPI creates a new mock instance.
func NewMockBranchCommandAPI(ctrl *gomock.Controller) *MockBranchCommandAPI {
	mock := &MockBranchCommandAPI{ctrl: ctrl}
	mock.recorder = &MockBranchCommandAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBranchCommandAPI) EXPECT() *MockBranchCommandAPIMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockBranchCommandAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockBranchCommandAPIMockRecorder) Close() *MockBranchCommandAPICloseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBranchCommandAPI)(nil).Close))
	return &MockBranchCommandAPICloseCall{Call: call}
}

// MockBranchCommandAPICloseCall wrap *gomock.Call
type MockBranchCommandAPICloseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBranchCommandAPICloseCall) Return(arg0 error) *MockBranchCommandAPICloseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBranchCommandAPICloseCall) Do(f func() error) *MockBranchCommandAPICloseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBranchCommandAPICloseCall) DoAndReturn(f func() error) *MockBranchCommandAPICloseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// HasActiveBranch mocks base method.
func (m *MockBranchCommandAPI) HasActiveBranch(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasActiveBranch", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HasActiveBranch indicates an expected call of HasActiveBranch.
func (mr *MockBranchCommandAPIMockRecorder) HasActiveBranch(arg0 any) *MockBranchCommandAPIHasActiveBranchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasActiveBranch", reflect.TypeOf((*MockBranchCommandAPI)(nil).HasActiveBranch), arg0)
	return &MockBranchCommandAPIHasActiveBranchCall{Call: call}
}

// MockBranchCommandAPIHasActiveBranchCall wrap *gomock.Call
type MockBranchCommandAPIHasActiveBranchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBranchCommandAPIHasActiveBranchCall) Return(arg0 bool, arg1 error) *MockBranchCommandAPIHasActiveBranchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBranchCommandAPIHasActiveBranchCall) Do(f func(string) (bool, error)) *MockBranchCommandAPIHasActiveBranchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBranchCommandAPIHasActiveBranchCall) DoAndReturn(f func(string) (bool, error)) *MockBranchCommandAPIHasActiveBranchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
