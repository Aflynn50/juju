// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/common (interfaces: LeadershipPinningBackend,LeadershipMachine)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/leadership.go github.com/juju/juju/apiserver/common LeadershipPinningBackend,LeadershipMachine
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	common "github.com/juju/juju/apiserver/common"
	gomock "go.uber.org/mock/gomock"
)

// MockLeadershipPinningBackend is a mock of LeadershipPinningBackend interface.
type MockLeadershipPinningBackend struct {
	ctrl     *gomock.Controller
	recorder *MockLeadershipPinningBackendMockRecorder
}

// MockLeadershipPinningBackendMockRecorder is the mock recorder for MockLeadershipPinningBackend.
type MockLeadershipPinningBackendMockRecorder struct {
	mock *MockLeadershipPinningBackend
}

// NewMockLeadershipPinningBackend creates a new mock instance.
func NewMockLeadershipPinningBackend(ctrl *gomock.Controller) *MockLeadershipPinningBackend {
	mock := &MockLeadershipPinningBackend{ctrl: ctrl}
	mock.recorder = &MockLeadershipPinningBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeadershipPinningBackend) EXPECT() *MockLeadershipPinningBackendMockRecorder {
	return m.recorder
}

// Machine mocks base method.
func (m *MockLeadershipPinningBackend) Machine(arg0 string) (common.LeadershipMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine", arg0)
	ret0, _ := ret[0].(common.LeadershipMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machine indicates an expected call of Machine.
func (mr *MockLeadershipPinningBackendMockRecorder) Machine(arg0 any) *MockLeadershipPinningBackendMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockLeadershipPinningBackend)(nil).Machine), arg0)
	return &MockLeadershipPinningBackendMachineCall{Call: call}
}

// MockLeadershipPinningBackendMachineCall wrap *gomock.Call
type MockLeadershipPinningBackendMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLeadershipPinningBackendMachineCall) Return(arg0 common.LeadershipMachine, arg1 error) *MockLeadershipPinningBackendMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLeadershipPinningBackendMachineCall) Do(f func(string) (common.LeadershipMachine, error)) *MockLeadershipPinningBackendMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLeadershipPinningBackendMachineCall) DoAndReturn(f func(string) (common.LeadershipMachine, error)) *MockLeadershipPinningBackendMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockLeadershipMachine is a mock of LeadershipMachine interface.
type MockLeadershipMachine struct {
	ctrl     *gomock.Controller
	recorder *MockLeadershipMachineMockRecorder
}

// MockLeadershipMachineMockRecorder is the mock recorder for MockLeadershipMachine.
type MockLeadershipMachineMockRecorder struct {
	mock *MockLeadershipMachine
}

// NewMockLeadershipMachine creates a new mock instance.
func NewMockLeadershipMachine(ctrl *gomock.Controller) *MockLeadershipMachine {
	mock := &MockLeadershipMachine{ctrl: ctrl}
	mock.recorder = &MockLeadershipMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLeadershipMachine) EXPECT() *MockLeadershipMachineMockRecorder {
	return m.recorder
}

// ApplicationNames mocks base method.
func (m *MockLeadershipMachine) ApplicationNames() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationNames")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ApplicationNames indicates an expected call of ApplicationNames.
func (mr *MockLeadershipMachineMockRecorder) ApplicationNames() *MockLeadershipMachineApplicationNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationNames", reflect.TypeOf((*MockLeadershipMachine)(nil).ApplicationNames))
	return &MockLeadershipMachineApplicationNamesCall{Call: call}
}

// MockLeadershipMachineApplicationNamesCall wrap *gomock.Call
type MockLeadershipMachineApplicationNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockLeadershipMachineApplicationNamesCall) Return(arg0 []string, arg1 error) *MockLeadershipMachineApplicationNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockLeadershipMachineApplicationNamesCall) Do(f func() ([]string, error)) *MockLeadershipMachineApplicationNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockLeadershipMachineApplicationNamesCall) DoAndReturn(f func() ([]string, error)) *MockLeadershipMachineApplicationNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
