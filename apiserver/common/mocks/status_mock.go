// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/status (interfaces: StatusGetter,StatusSetter)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/status_mock.go github.com/juju/juju/core/status StatusGetter,StatusSetter
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	status "github.com/juju/juju/core/status"
	gomock "go.uber.org/mock/gomock"
)

// MockStatusGetter is a mock of StatusGetter interface.
type MockStatusGetter struct {
	ctrl     *gomock.Controller
	recorder *MockStatusGetterMockRecorder
}

// MockStatusGetterMockRecorder is the mock recorder for MockStatusGetter.
type MockStatusGetterMockRecorder struct {
	mock *MockStatusGetter
}

// NewMockStatusGetter creates a new mock instance.
func NewMockStatusGetter(ctrl *gomock.Controller) *MockStatusGetter {
	mock := &MockStatusGetter{ctrl: ctrl}
	mock.recorder = &MockStatusGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusGetter) EXPECT() *MockStatusGetterMockRecorder {
	return m.recorder
}

// Status mocks base method.
func (m *MockStatusGetter) Status() (status.StatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Status")
	ret0, _ := ret[0].(status.StatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Status indicates an expected call of Status.
func (mr *MockStatusGetterMockRecorder) Status() *MockStatusGetterStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Status", reflect.TypeOf((*MockStatusGetter)(nil).Status))
	return &MockStatusGetterStatusCall{Call: call}
}

// MockStatusGetterStatusCall wrap *gomock.Call
type MockStatusGetterStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusGetterStatusCall) Return(arg0 status.StatusInfo, arg1 error) *MockStatusGetterStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusGetterStatusCall) Do(f func() (status.StatusInfo, error)) *MockStatusGetterStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusGetterStatusCall) DoAndReturn(f func() (status.StatusInfo, error)) *MockStatusGetterStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStatusSetter is a mock of StatusSetter interface.
type MockStatusSetter struct {
	ctrl     *gomock.Controller
	recorder *MockStatusSetterMockRecorder
}

// MockStatusSetterMockRecorder is the mock recorder for MockStatusSetter.
type MockStatusSetterMockRecorder struct {
	mock *MockStatusSetter
}

// NewMockStatusSetter creates a new mock instance.
func NewMockStatusSetter(ctrl *gomock.Controller) *MockStatusSetter {
	mock := &MockStatusSetter{ctrl: ctrl}
	mock.recorder = &MockStatusSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusSetter) EXPECT() *MockStatusSetterMockRecorder {
	return m.recorder
}

// SetStatus mocks base method.
func (m *MockStatusSetter) SetStatus(arg0 status.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockStatusSetterMockRecorder) SetStatus(arg0 any) *MockStatusSetterSetStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockStatusSetter)(nil).SetStatus), arg0)
	return &MockStatusSetterSetStatusCall{Call: call}
}

// MockStatusSetterSetStatusCall wrap *gomock.Call
type MockStatusSetterSetStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusSetterSetStatusCall) Return(arg0 error) *MockStatusSetterSetStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusSetterSetStatusCall) Do(f func(status.StatusInfo) error) *MockStatusSetterSetStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusSetterSetStatusCall) DoAndReturn(f func(status.StatusInfo) error) *MockStatusSetterSetStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
