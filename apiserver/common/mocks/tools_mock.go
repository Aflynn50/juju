// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/common (interfaces: ToolsFinder,ToolsFindEntity,ToolsURLGetter,APIHostPortsForAgentsGetter,ToolsStorageGetter,AgentTooler)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/tools_mock.go github.com/juju/juju/apiserver/common ToolsFinder,ToolsFindEntity,ToolsURLGetter,APIHostPortsForAgentsGetter,ToolsStorageGetter,AgentTooler
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	common "github.com/juju/juju/apiserver/common"
	controller "github.com/juju/juju/controller"
	network "github.com/juju/juju/core/network"
	objectstore "github.com/juju/juju/core/objectstore"
	tools "github.com/juju/juju/internal/tools"
	state "github.com/juju/juju/state"
	binarystorage "github.com/juju/juju/state/binarystorage"
	names "github.com/juju/names/v5"
	version "github.com/juju/version/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockToolsFinder is a mock of ToolsFinder interface.
type MockToolsFinder struct {
	ctrl     *gomock.Controller
	recorder *MockToolsFinderMockRecorder
}

// MockToolsFinderMockRecorder is the mock recorder for MockToolsFinder.
type MockToolsFinderMockRecorder struct {
	mock *MockToolsFinder
}

// NewMockToolsFinder creates a new mock instance.
func NewMockToolsFinder(ctrl *gomock.Controller) *MockToolsFinder {
	mock := &MockToolsFinder{ctrl: ctrl}
	mock.recorder = &MockToolsFinderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToolsFinder) EXPECT() *MockToolsFinderMockRecorder {
	return m.recorder
}

// FindAgents mocks base method.
func (m *MockToolsFinder) FindAgents(arg0 context.Context, arg1 common.FindAgentsParams) (tools.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAgents", arg0, arg1)
	ret0, _ := ret[0].(tools.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAgents indicates an expected call of FindAgents.
func (mr *MockToolsFinderMockRecorder) FindAgents(arg0, arg1 any) *MockToolsFinderFindAgentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAgents", reflect.TypeOf((*MockToolsFinder)(nil).FindAgents), arg0, arg1)
	return &MockToolsFinderFindAgentsCall{Call: call}
}

// MockToolsFinderFindAgentsCall wrap *gomock.Call
type MockToolsFinderFindAgentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockToolsFinderFindAgentsCall) Return(arg0 tools.List, arg1 error) *MockToolsFinderFindAgentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockToolsFinderFindAgentsCall) Do(f func(context.Context, common.FindAgentsParams) (tools.List, error)) *MockToolsFinderFindAgentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockToolsFinderFindAgentsCall) DoAndReturn(f func(context.Context, common.FindAgentsParams) (tools.List, error)) *MockToolsFinderFindAgentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockToolsFindEntity is a mock of ToolsFindEntity interface.
type MockToolsFindEntity struct {
	ctrl     *gomock.Controller
	recorder *MockToolsFindEntityMockRecorder
}

// MockToolsFindEntityMockRecorder is the mock recorder for MockToolsFindEntity.
type MockToolsFindEntityMockRecorder struct {
	mock *MockToolsFindEntity
}

// NewMockToolsFindEntity creates a new mock instance.
func NewMockToolsFindEntity(ctrl *gomock.Controller) *MockToolsFindEntity {
	mock := &MockToolsFindEntity{ctrl: ctrl}
	mock.recorder = &MockToolsFindEntityMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToolsFindEntity) EXPECT() *MockToolsFindEntityMockRecorder {
	return m.recorder
}

// FindEntity mocks base method.
func (m *MockToolsFindEntity) FindEntity(arg0 names.Tag) (state.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEntity", arg0)
	ret0, _ := ret[0].(state.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEntity indicates an expected call of FindEntity.
func (mr *MockToolsFindEntityMockRecorder) FindEntity(arg0 any) *MockToolsFindEntityFindEntityCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEntity", reflect.TypeOf((*MockToolsFindEntity)(nil).FindEntity), arg0)
	return &MockToolsFindEntityFindEntityCall{Call: call}
}

// MockToolsFindEntityFindEntityCall wrap *gomock.Call
type MockToolsFindEntityFindEntityCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockToolsFindEntityFindEntityCall) Return(arg0 state.Entity, arg1 error) *MockToolsFindEntityFindEntityCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockToolsFindEntityFindEntityCall) Do(f func(names.Tag) (state.Entity, error)) *MockToolsFindEntityFindEntityCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockToolsFindEntityFindEntityCall) DoAndReturn(f func(names.Tag) (state.Entity, error)) *MockToolsFindEntityFindEntityCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockToolsURLGetter is a mock of ToolsURLGetter interface.
type MockToolsURLGetter struct {
	ctrl     *gomock.Controller
	recorder *MockToolsURLGetterMockRecorder
}

// MockToolsURLGetterMockRecorder is the mock recorder for MockToolsURLGetter.
type MockToolsURLGetterMockRecorder struct {
	mock *MockToolsURLGetter
}

// NewMockToolsURLGetter creates a new mock instance.
func NewMockToolsURLGetter(ctrl *gomock.Controller) *MockToolsURLGetter {
	mock := &MockToolsURLGetter{ctrl: ctrl}
	mock.recorder = &MockToolsURLGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToolsURLGetter) EXPECT() *MockToolsURLGetterMockRecorder {
	return m.recorder
}

// ToolsURLs mocks base method.
func (m *MockToolsURLGetter) ToolsURLs(arg0 context.Context, arg1 controller.Config, arg2 version.Binary) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToolsURLs", arg0, arg1, arg2)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToolsURLs indicates an expected call of ToolsURLs.
func (mr *MockToolsURLGetterMockRecorder) ToolsURLs(arg0, arg1, arg2 any) *MockToolsURLGetterToolsURLsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToolsURLs", reflect.TypeOf((*MockToolsURLGetter)(nil).ToolsURLs), arg0, arg1, arg2)
	return &MockToolsURLGetterToolsURLsCall{Call: call}
}

// MockToolsURLGetterToolsURLsCall wrap *gomock.Call
type MockToolsURLGetterToolsURLsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockToolsURLGetterToolsURLsCall) Return(arg0 []string, arg1 error) *MockToolsURLGetterToolsURLsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockToolsURLGetterToolsURLsCall) Do(f func(context.Context, controller.Config, version.Binary) ([]string, error)) *MockToolsURLGetterToolsURLsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockToolsURLGetterToolsURLsCall) DoAndReturn(f func(context.Context, controller.Config, version.Binary) ([]string, error)) *MockToolsURLGetterToolsURLsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAPIHostPortsForAgentsGetter is a mock of APIHostPortsForAgentsGetter interface.
type MockAPIHostPortsForAgentsGetter struct {
	ctrl     *gomock.Controller
	recorder *MockAPIHostPortsForAgentsGetterMockRecorder
}

// MockAPIHostPortsForAgentsGetterMockRecorder is the mock recorder for MockAPIHostPortsForAgentsGetter.
type MockAPIHostPortsForAgentsGetterMockRecorder struct {
	mock *MockAPIHostPortsForAgentsGetter
}

// NewMockAPIHostPortsForAgentsGetter creates a new mock instance.
func NewMockAPIHostPortsForAgentsGetter(ctrl *gomock.Controller) *MockAPIHostPortsForAgentsGetter {
	mock := &MockAPIHostPortsForAgentsGetter{ctrl: ctrl}
	mock.recorder = &MockAPIHostPortsForAgentsGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIHostPortsForAgentsGetter) EXPECT() *MockAPIHostPortsForAgentsGetterMockRecorder {
	return m.recorder
}

// APIHostPortsForAgents mocks base method.
func (m *MockAPIHostPortsForAgentsGetter) APIHostPortsForAgents(arg0 controller.Config) ([]network.SpaceHostPorts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIHostPortsForAgents", arg0)
	ret0, _ := ret[0].([]network.SpaceHostPorts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// APIHostPortsForAgents indicates an expected call of APIHostPortsForAgents.
func (mr *MockAPIHostPortsForAgentsGetterMockRecorder) APIHostPortsForAgents(arg0 any) *MockAPIHostPortsForAgentsGetterAPIHostPortsForAgentsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIHostPortsForAgents", reflect.TypeOf((*MockAPIHostPortsForAgentsGetter)(nil).APIHostPortsForAgents), arg0)
	return &MockAPIHostPortsForAgentsGetterAPIHostPortsForAgentsCall{Call: call}
}

// MockAPIHostPortsForAgentsGetterAPIHostPortsForAgentsCall wrap *gomock.Call
type MockAPIHostPortsForAgentsGetterAPIHostPortsForAgentsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAPIHostPortsForAgentsGetterAPIHostPortsForAgentsCall) Return(arg0 []network.SpaceHostPorts, arg1 error) *MockAPIHostPortsForAgentsGetterAPIHostPortsForAgentsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAPIHostPortsForAgentsGetterAPIHostPortsForAgentsCall) Do(f func(controller.Config) ([]network.SpaceHostPorts, error)) *MockAPIHostPortsForAgentsGetterAPIHostPortsForAgentsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAPIHostPortsForAgentsGetterAPIHostPortsForAgentsCall) DoAndReturn(f func(controller.Config) ([]network.SpaceHostPorts, error)) *MockAPIHostPortsForAgentsGetterAPIHostPortsForAgentsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockToolsStorageGetter is a mock of ToolsStorageGetter interface.
type MockToolsStorageGetter struct {
	ctrl     *gomock.Controller
	recorder *MockToolsStorageGetterMockRecorder
}

// MockToolsStorageGetterMockRecorder is the mock recorder for MockToolsStorageGetter.
type MockToolsStorageGetterMockRecorder struct {
	mock *MockToolsStorageGetter
}

// NewMockToolsStorageGetter creates a new mock instance.
func NewMockToolsStorageGetter(ctrl *gomock.Controller) *MockToolsStorageGetter {
	mock := &MockToolsStorageGetter{ctrl: ctrl}
	mock.recorder = &MockToolsStorageGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockToolsStorageGetter) EXPECT() *MockToolsStorageGetterMockRecorder {
	return m.recorder
}

// ToolsStorage mocks base method.
func (m *MockToolsStorageGetter) ToolsStorage(arg0 objectstore.ObjectStore) (binarystorage.StorageCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToolsStorage", arg0)
	ret0, _ := ret[0].(binarystorage.StorageCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ToolsStorage indicates an expected call of ToolsStorage.
func (mr *MockToolsStorageGetterMockRecorder) ToolsStorage(arg0 any) *MockToolsStorageGetterToolsStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToolsStorage", reflect.TypeOf((*MockToolsStorageGetter)(nil).ToolsStorage), arg0)
	return &MockToolsStorageGetterToolsStorageCall{Call: call}
}

// MockToolsStorageGetterToolsStorageCall wrap *gomock.Call
type MockToolsStorageGetterToolsStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockToolsStorageGetterToolsStorageCall) Return(arg0 binarystorage.StorageCloser, arg1 error) *MockToolsStorageGetterToolsStorageCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockToolsStorageGetterToolsStorageCall) Do(f func(objectstore.ObjectStore) (binarystorage.StorageCloser, error)) *MockToolsStorageGetterToolsStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockToolsStorageGetterToolsStorageCall) DoAndReturn(f func(objectstore.ObjectStore) (binarystorage.StorageCloser, error)) *MockToolsStorageGetterToolsStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAgentTooler is a mock of AgentTooler interface.
type MockAgentTooler struct {
	ctrl     *gomock.Controller
	recorder *MockAgentToolerMockRecorder
}

// MockAgentToolerMockRecorder is the mock recorder for MockAgentTooler.
type MockAgentToolerMockRecorder struct {
	mock *MockAgentTooler
}

// NewMockAgentTooler creates a new mock instance.
func NewMockAgentTooler(ctrl *gomock.Controller) *MockAgentTooler {
	mock := &MockAgentTooler{ctrl: ctrl}
	mock.recorder = &MockAgentToolerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentTooler) EXPECT() *MockAgentToolerMockRecorder {
	return m.recorder
}

// AgentTools mocks base method.
func (m *MockAgentTooler) AgentTools() (*tools.Tools, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentTools")
	ret0, _ := ret[0].(*tools.Tools)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentTools indicates an expected call of AgentTools.
func (mr *MockAgentToolerMockRecorder) AgentTools() *MockAgentToolerAgentToolsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentTools", reflect.TypeOf((*MockAgentTooler)(nil).AgentTools))
	return &MockAgentToolerAgentToolsCall{Call: call}
}

// MockAgentToolerAgentToolsCall wrap *gomock.Call
type MockAgentToolerAgentToolsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentToolerAgentToolsCall) Return(arg0 *tools.Tools, arg1 error) *MockAgentToolerAgentToolsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentToolerAgentToolsCall) Do(f func() (*tools.Tools, error)) *MockAgentToolerAgentToolsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentToolerAgentToolsCall) DoAndReturn(f func() (*tools.Tools, error)) *MockAgentToolerAgentToolsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetAgentVersion mocks base method.
func (m *MockAgentTooler) SetAgentVersion(arg0 version.Binary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetAgentVersion", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetAgentVersion indicates an expected call of SetAgentVersion.
func (mr *MockAgentToolerMockRecorder) SetAgentVersion(arg0 any) *MockAgentToolerSetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetAgentVersion", reflect.TypeOf((*MockAgentTooler)(nil).SetAgentVersion), arg0)
	return &MockAgentToolerSetAgentVersionCall{Call: call}
}

// MockAgentToolerSetAgentVersionCall wrap *gomock.Call
type MockAgentToolerSetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentToolerSetAgentVersionCall) Return(arg0 error) *MockAgentToolerSetAgentVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentToolerSetAgentVersionCall) Do(f func(version.Binary) error) *MockAgentToolerSetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentToolerSetAgentVersionCall) DoAndReturn(f func(version.Binary) error) *MockAgentToolerSetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tag mocks base method.
func (m *MockAgentTooler) Tag() names.Tag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names.Tag)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockAgentToolerMockRecorder) Tag() *MockAgentToolerTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockAgentTooler)(nil).Tag))
	return &MockAgentToolerTagCall{Call: call}
}

// MockAgentToolerTagCall wrap *gomock.Call
type MockAgentToolerTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentToolerTagCall) Return(arg0 names.Tag) *MockAgentToolerTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentToolerTagCall) Do(f func() names.Tag) *MockAgentToolerTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentToolerTagCall) DoAndReturn(f func() names.Tag) *MockAgentToolerTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
