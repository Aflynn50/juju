// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/state (interfaces: ModelOperation)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/modeloperation.go github.com/juju/juju/state ModelOperation
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	txn "github.com/juju/mgo/v3/txn"
	gomock "go.uber.org/mock/gomock"
)

// MockModelOperation is a mock of ModelOperation interface.
type MockModelOperation struct {
	ctrl     *gomock.Controller
	recorder *MockModelOperationMockRecorder
}

// MockModelOperationMockRecorder is the mock recorder for MockModelOperation.
type MockModelOperationMockRecorder struct {
	mock *MockModelOperation
}

// NewMockModelOperation creates a new mock instance.
func NewMockModelOperation(ctrl *gomock.Controller) *MockModelOperation {
	mock := &MockModelOperation{ctrl: ctrl}
	mock.recorder = &MockModelOperationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelOperation) EXPECT() *MockModelOperationMockRecorder {
	return m.recorder
}

// Build mocks base method.
func (m *MockModelOperation) Build(arg0 int) ([]txn.Op, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Build", arg0)
	ret0, _ := ret[0].([]txn.Op)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Build indicates an expected call of Build.
func (mr *MockModelOperationMockRecorder) Build(arg0 any) *MockModelOperationBuildCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Build", reflect.TypeOf((*MockModelOperation)(nil).Build), arg0)
	return &MockModelOperationBuildCall{Call: call}
}

// MockModelOperationBuildCall wrap *gomock.Call
type MockModelOperationBuildCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelOperationBuildCall) Return(arg0 []txn.Op, arg1 error) *MockModelOperationBuildCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelOperationBuildCall) Do(f func(int) ([]txn.Op, error)) *MockModelOperationBuildCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelOperationBuildCall) DoAndReturn(f func(int) ([]txn.Op, error)) *MockModelOperationBuildCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Done mocks base method.
func (m *MockModelOperation) Done(arg0 error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockModelOperationMockRecorder) Done(arg0 any) *MockModelOperationDoneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockModelOperation)(nil).Done), arg0)
	return &MockModelOperationDoneCall{Call: call}
}

// MockModelOperationDoneCall wrap *gomock.Call
type MockModelOperationDoneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelOperationDoneCall) Return(arg0 error) *MockModelOperationDoneCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelOperationDoneCall) Do(f func(error) error) *MockModelOperationDoneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelOperationDoneCall) DoAndReturn(f func(error) error) *MockModelOperationDoneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
