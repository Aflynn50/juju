// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/common (interfaces: UpgradeSeriesBackend,UpgradeSeriesMachine,UpgradeSeriesUnit)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/upgradeseries.go github.com/juju/juju/apiserver/common UpgradeSeriesBackend,UpgradeSeriesMachine,UpgradeSeriesUnit
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	common "github.com/juju/juju/apiserver/common"
	model "github.com/juju/juju/core/model"
	status "github.com/juju/juju/core/status"
	state "github.com/juju/juju/state"
	names "github.com/juju/names/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockUpgradeSeriesBackend is a mock of UpgradeSeriesBackend interface.
type MockUpgradeSeriesBackend struct {
	ctrl     *gomock.Controller
	recorder *MockUpgradeSeriesBackendMockRecorder
}

// MockUpgradeSeriesBackendMockRecorder is the mock recorder for MockUpgradeSeriesBackend.
type MockUpgradeSeriesBackendMockRecorder struct {
	mock *MockUpgradeSeriesBackend
}

// NewMockUpgradeSeriesBackend creates a new mock instance.
func NewMockUpgradeSeriesBackend(ctrl *gomock.Controller) *MockUpgradeSeriesBackend {
	mock := &MockUpgradeSeriesBackend{ctrl: ctrl}
	mock.recorder = &MockUpgradeSeriesBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpgradeSeriesBackend) EXPECT() *MockUpgradeSeriesBackendMockRecorder {
	return m.recorder
}

// Machine mocks base method.
func (m *MockUpgradeSeriesBackend) Machine(arg0 string) (common.UpgradeSeriesMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Machine", arg0)
	ret0, _ := ret[0].(common.UpgradeSeriesMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Machine indicates an expected call of Machine.
func (mr *MockUpgradeSeriesBackendMockRecorder) Machine(arg0 any) *MockUpgradeSeriesBackendMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Machine", reflect.TypeOf((*MockUpgradeSeriesBackend)(nil).Machine), arg0)
	return &MockUpgradeSeriesBackendMachineCall{Call: call}
}

// MockUpgradeSeriesBackendMachineCall wrap *gomock.Call
type MockUpgradeSeriesBackendMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeSeriesBackendMachineCall) Return(arg0 common.UpgradeSeriesMachine, arg1 error) *MockUpgradeSeriesBackendMachineCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeSeriesBackendMachineCall) Do(f func(string) (common.UpgradeSeriesMachine, error)) *MockUpgradeSeriesBackendMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeSeriesBackendMachineCall) DoAndReturn(f func(string) (common.UpgradeSeriesMachine, error)) *MockUpgradeSeriesBackendMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unit mocks base method.
func (m *MockUpgradeSeriesBackend) Unit(arg0 string) (common.UpgradeSeriesUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unit", arg0)
	ret0, _ := ret[0].(common.UpgradeSeriesUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unit indicates an expected call of Unit.
func (mr *MockUpgradeSeriesBackendMockRecorder) Unit(arg0 any) *MockUpgradeSeriesBackendUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unit", reflect.TypeOf((*MockUpgradeSeriesBackend)(nil).Unit), arg0)
	return &MockUpgradeSeriesBackendUnitCall{Call: call}
}

// MockUpgradeSeriesBackendUnitCall wrap *gomock.Call
type MockUpgradeSeriesBackendUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeSeriesBackendUnitCall) Return(arg0 common.UpgradeSeriesUnit, arg1 error) *MockUpgradeSeriesBackendUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeSeriesBackendUnitCall) Do(f func(string) (common.UpgradeSeriesUnit, error)) *MockUpgradeSeriesBackendUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeSeriesBackendUnitCall) DoAndReturn(f func(string) (common.UpgradeSeriesUnit, error)) *MockUpgradeSeriesBackendUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUpgradeSeriesMachine is a mock of UpgradeSeriesMachine interface.
type MockUpgradeSeriesMachine struct {
	ctrl     *gomock.Controller
	recorder *MockUpgradeSeriesMachineMockRecorder
}

// MockUpgradeSeriesMachineMockRecorder is the mock recorder for MockUpgradeSeriesMachine.
type MockUpgradeSeriesMachineMockRecorder struct {
	mock *MockUpgradeSeriesMachine
}

// NewMockUpgradeSeriesMachine creates a new mock instance.
func NewMockUpgradeSeriesMachine(ctrl *gomock.Controller) *MockUpgradeSeriesMachine {
	mock := &MockUpgradeSeriesMachine{ctrl: ctrl}
	mock.recorder = &MockUpgradeSeriesMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpgradeSeriesMachine) EXPECT() *MockUpgradeSeriesMachineMockRecorder {
	return m.recorder
}

// Base mocks base method.
func (m *MockUpgradeSeriesMachine) Base() state.Base {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Base")
	ret0, _ := ret[0].(state.Base)
	return ret0
}

// Base indicates an expected call of Base.
func (mr *MockUpgradeSeriesMachineMockRecorder) Base() *MockUpgradeSeriesMachineBaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Base", reflect.TypeOf((*MockUpgradeSeriesMachine)(nil).Base))
	return &MockUpgradeSeriesMachineBaseCall{Call: call}
}

// MockUpgradeSeriesMachineBaseCall wrap *gomock.Call
type MockUpgradeSeriesMachineBaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeSeriesMachineBaseCall) Return(arg0 state.Base) *MockUpgradeSeriesMachineBaseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeSeriesMachineBaseCall) Do(f func() state.Base) *MockUpgradeSeriesMachineBaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeSeriesMachineBaseCall) DoAndReturn(f func() state.Base) *MockUpgradeSeriesMachineBaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveUpgradeSeriesLock mocks base method.
func (m *MockUpgradeSeriesMachine) RemoveUpgradeSeriesLock() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUpgradeSeriesLock")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUpgradeSeriesLock indicates an expected call of RemoveUpgradeSeriesLock.
func (mr *MockUpgradeSeriesMachineMockRecorder) RemoveUpgradeSeriesLock() *MockUpgradeSeriesMachineRemoveUpgradeSeriesLockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUpgradeSeriesLock", reflect.TypeOf((*MockUpgradeSeriesMachine)(nil).RemoveUpgradeSeriesLock))
	return &MockUpgradeSeriesMachineRemoveUpgradeSeriesLockCall{Call: call}
}

// MockUpgradeSeriesMachineRemoveUpgradeSeriesLockCall wrap *gomock.Call
type MockUpgradeSeriesMachineRemoveUpgradeSeriesLockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeSeriesMachineRemoveUpgradeSeriesLockCall) Return(arg0 error) *MockUpgradeSeriesMachineRemoveUpgradeSeriesLockCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeSeriesMachineRemoveUpgradeSeriesLockCall) Do(f func() error) *MockUpgradeSeriesMachineRemoveUpgradeSeriesLockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeSeriesMachineRemoveUpgradeSeriesLockCall) DoAndReturn(f func() error) *MockUpgradeSeriesMachineRemoveUpgradeSeriesLockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetInstanceStatus mocks base method.
func (m *MockUpgradeSeriesMachine) SetInstanceStatus(arg0 status.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetInstanceStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetInstanceStatus indicates an expected call of SetInstanceStatus.
func (mr *MockUpgradeSeriesMachineMockRecorder) SetInstanceStatus(arg0 any) *MockUpgradeSeriesMachineSetInstanceStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetInstanceStatus", reflect.TypeOf((*MockUpgradeSeriesMachine)(nil).SetInstanceStatus), arg0)
	return &MockUpgradeSeriesMachineSetInstanceStatusCall{Call: call}
}

// MockUpgradeSeriesMachineSetInstanceStatusCall wrap *gomock.Call
type MockUpgradeSeriesMachineSetInstanceStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeSeriesMachineSetInstanceStatusCall) Return(arg0 error) *MockUpgradeSeriesMachineSetInstanceStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeSeriesMachineSetInstanceStatusCall) Do(f func(status.StatusInfo) error) *MockUpgradeSeriesMachineSetInstanceStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeSeriesMachineSetInstanceStatusCall) DoAndReturn(f func(status.StatusInfo) error) *MockUpgradeSeriesMachineSetInstanceStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUpgradeSeriesStatus mocks base method.
func (m *MockUpgradeSeriesMachine) SetUpgradeSeriesStatus(arg0 model.UpgradeSeriesStatus, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUpgradeSeriesStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUpgradeSeriesStatus indicates an expected call of SetUpgradeSeriesStatus.
func (mr *MockUpgradeSeriesMachineMockRecorder) SetUpgradeSeriesStatus(arg0, arg1 any) *MockUpgradeSeriesMachineSetUpgradeSeriesStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpgradeSeriesStatus", reflect.TypeOf((*MockUpgradeSeriesMachine)(nil).SetUpgradeSeriesStatus), arg0, arg1)
	return &MockUpgradeSeriesMachineSetUpgradeSeriesStatusCall{Call: call}
}

// MockUpgradeSeriesMachineSetUpgradeSeriesStatusCall wrap *gomock.Call
type MockUpgradeSeriesMachineSetUpgradeSeriesStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeSeriesMachineSetUpgradeSeriesStatusCall) Return(arg0 error) *MockUpgradeSeriesMachineSetUpgradeSeriesStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeSeriesMachineSetUpgradeSeriesStatusCall) Do(f func(model.UpgradeSeriesStatus, string) error) *MockUpgradeSeriesMachineSetUpgradeSeriesStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeSeriesMachineSetUpgradeSeriesStatusCall) DoAndReturn(f func(model.UpgradeSeriesStatus, string) error) *MockUpgradeSeriesMachineSetUpgradeSeriesStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StartUpgradeSeriesUnitCompletion mocks base method.
func (m *MockUpgradeSeriesMachine) StartUpgradeSeriesUnitCompletion(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartUpgradeSeriesUnitCompletion", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StartUpgradeSeriesUnitCompletion indicates an expected call of StartUpgradeSeriesUnitCompletion.
func (mr *MockUpgradeSeriesMachineMockRecorder) StartUpgradeSeriesUnitCompletion(arg0 any) *MockUpgradeSeriesMachineStartUpgradeSeriesUnitCompletionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartUpgradeSeriesUnitCompletion", reflect.TypeOf((*MockUpgradeSeriesMachine)(nil).StartUpgradeSeriesUnitCompletion), arg0)
	return &MockUpgradeSeriesMachineStartUpgradeSeriesUnitCompletionCall{Call: call}
}

// MockUpgradeSeriesMachineStartUpgradeSeriesUnitCompletionCall wrap *gomock.Call
type MockUpgradeSeriesMachineStartUpgradeSeriesUnitCompletionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeSeriesMachineStartUpgradeSeriesUnitCompletionCall) Return(arg0 error) *MockUpgradeSeriesMachineStartUpgradeSeriesUnitCompletionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeSeriesMachineStartUpgradeSeriesUnitCompletionCall) Do(f func(string) error) *MockUpgradeSeriesMachineStartUpgradeSeriesUnitCompletionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeSeriesMachineStartUpgradeSeriesUnitCompletionCall) DoAndReturn(f func(string) error) *MockUpgradeSeriesMachineStartUpgradeSeriesUnitCompletionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Units mocks base method.
func (m *MockUpgradeSeriesMachine) Units() ([]common.UpgradeSeriesUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Units")
	ret0, _ := ret[0].([]common.UpgradeSeriesUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Units indicates an expected call of Units.
func (mr *MockUpgradeSeriesMachineMockRecorder) Units() *MockUpgradeSeriesMachineUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Units", reflect.TypeOf((*MockUpgradeSeriesMachine)(nil).Units))
	return &MockUpgradeSeriesMachineUnitsCall{Call: call}
}

// MockUpgradeSeriesMachineUnitsCall wrap *gomock.Call
type MockUpgradeSeriesMachineUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeSeriesMachineUnitsCall) Return(arg0 []common.UpgradeSeriesUnit, arg1 error) *MockUpgradeSeriesMachineUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeSeriesMachineUnitsCall) Do(f func() ([]common.UpgradeSeriesUnit, error)) *MockUpgradeSeriesMachineUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeSeriesMachineUnitsCall) DoAndReturn(f func() ([]common.UpgradeSeriesUnit, error)) *MockUpgradeSeriesMachineUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateMachineSeries mocks base method.
func (m *MockUpgradeSeriesMachine) UpdateMachineSeries(arg0 state.Base) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMachineSeries", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMachineSeries indicates an expected call of UpdateMachineSeries.
func (mr *MockUpgradeSeriesMachineMockRecorder) UpdateMachineSeries(arg0 any) *MockUpgradeSeriesMachineUpdateMachineSeriesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMachineSeries", reflect.TypeOf((*MockUpgradeSeriesMachine)(nil).UpdateMachineSeries), arg0)
	return &MockUpgradeSeriesMachineUpdateMachineSeriesCall{Call: call}
}

// MockUpgradeSeriesMachineUpdateMachineSeriesCall wrap *gomock.Call
type MockUpgradeSeriesMachineUpdateMachineSeriesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeSeriesMachineUpdateMachineSeriesCall) Return(arg0 error) *MockUpgradeSeriesMachineUpdateMachineSeriesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeSeriesMachineUpdateMachineSeriesCall) Do(f func(state.Base) error) *MockUpgradeSeriesMachineUpdateMachineSeriesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeSeriesMachineUpdateMachineSeriesCall) DoAndReturn(f func(state.Base) error) *MockUpgradeSeriesMachineUpdateMachineSeriesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeSeriesStatus mocks base method.
func (m *MockUpgradeSeriesMachine) UpgradeSeriesStatus() (model.UpgradeSeriesStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeSeriesStatus")
	ret0, _ := ret[0].(model.UpgradeSeriesStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeSeriesStatus indicates an expected call of UpgradeSeriesStatus.
func (mr *MockUpgradeSeriesMachineMockRecorder) UpgradeSeriesStatus() *MockUpgradeSeriesMachineUpgradeSeriesStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeSeriesStatus", reflect.TypeOf((*MockUpgradeSeriesMachine)(nil).UpgradeSeriesStatus))
	return &MockUpgradeSeriesMachineUpgradeSeriesStatusCall{Call: call}
}

// MockUpgradeSeriesMachineUpgradeSeriesStatusCall wrap *gomock.Call
type MockUpgradeSeriesMachineUpgradeSeriesStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeSeriesMachineUpgradeSeriesStatusCall) Return(arg0 model.UpgradeSeriesStatus, arg1 error) *MockUpgradeSeriesMachineUpgradeSeriesStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeSeriesMachineUpgradeSeriesStatusCall) Do(f func() (model.UpgradeSeriesStatus, error)) *MockUpgradeSeriesMachineUpgradeSeriesStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeSeriesMachineUpgradeSeriesStatusCall) DoAndReturn(f func() (model.UpgradeSeriesStatus, error)) *MockUpgradeSeriesMachineUpgradeSeriesStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeSeriesTarget mocks base method.
func (m *MockUpgradeSeriesMachine) UpgradeSeriesTarget() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeSeriesTarget")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeSeriesTarget indicates an expected call of UpgradeSeriesTarget.
func (mr *MockUpgradeSeriesMachineMockRecorder) UpgradeSeriesTarget() *MockUpgradeSeriesMachineUpgradeSeriesTargetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeSeriesTarget", reflect.TypeOf((*MockUpgradeSeriesMachine)(nil).UpgradeSeriesTarget))
	return &MockUpgradeSeriesMachineUpgradeSeriesTargetCall{Call: call}
}

// MockUpgradeSeriesMachineUpgradeSeriesTargetCall wrap *gomock.Call
type MockUpgradeSeriesMachineUpgradeSeriesTargetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeSeriesMachineUpgradeSeriesTargetCall) Return(arg0 string, arg1 error) *MockUpgradeSeriesMachineUpgradeSeriesTargetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeSeriesMachineUpgradeSeriesTargetCall) Do(f func() (string, error)) *MockUpgradeSeriesMachineUpgradeSeriesTargetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeSeriesMachineUpgradeSeriesTargetCall) DoAndReturn(f func() (string, error)) *MockUpgradeSeriesMachineUpgradeSeriesTargetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeSeriesUnitStatuses mocks base method.
func (m *MockUpgradeSeriesMachine) UpgradeSeriesUnitStatuses() (map[string]state.UpgradeSeriesUnitStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeSeriesUnitStatuses")
	ret0, _ := ret[0].(map[string]state.UpgradeSeriesUnitStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeSeriesUnitStatuses indicates an expected call of UpgradeSeriesUnitStatuses.
func (mr *MockUpgradeSeriesMachineMockRecorder) UpgradeSeriesUnitStatuses() *MockUpgradeSeriesMachineUpgradeSeriesUnitStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeSeriesUnitStatuses", reflect.TypeOf((*MockUpgradeSeriesMachine)(nil).UpgradeSeriesUnitStatuses))
	return &MockUpgradeSeriesMachineUpgradeSeriesUnitStatusesCall{Call: call}
}

// MockUpgradeSeriesMachineUpgradeSeriesUnitStatusesCall wrap *gomock.Call
type MockUpgradeSeriesMachineUpgradeSeriesUnitStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeSeriesMachineUpgradeSeriesUnitStatusesCall) Return(arg0 map[string]state.UpgradeSeriesUnitStatus, arg1 error) *MockUpgradeSeriesMachineUpgradeSeriesUnitStatusesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeSeriesMachineUpgradeSeriesUnitStatusesCall) Do(f func() (map[string]state.UpgradeSeriesUnitStatus, error)) *MockUpgradeSeriesMachineUpgradeSeriesUnitStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeSeriesMachineUpgradeSeriesUnitStatusesCall) DoAndReturn(f func() (map[string]state.UpgradeSeriesUnitStatus, error)) *MockUpgradeSeriesMachineUpgradeSeriesUnitStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchUpgradeSeriesNotifications mocks base method.
func (m *MockUpgradeSeriesMachine) WatchUpgradeSeriesNotifications() (state.NotifyWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchUpgradeSeriesNotifications")
	ret0, _ := ret[0].(state.NotifyWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUpgradeSeriesNotifications indicates an expected call of WatchUpgradeSeriesNotifications.
func (mr *MockUpgradeSeriesMachineMockRecorder) WatchUpgradeSeriesNotifications() *MockUpgradeSeriesMachineWatchUpgradeSeriesNotificationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUpgradeSeriesNotifications", reflect.TypeOf((*MockUpgradeSeriesMachine)(nil).WatchUpgradeSeriesNotifications))
	return &MockUpgradeSeriesMachineWatchUpgradeSeriesNotificationsCall{Call: call}
}

// MockUpgradeSeriesMachineWatchUpgradeSeriesNotificationsCall wrap *gomock.Call
type MockUpgradeSeriesMachineWatchUpgradeSeriesNotificationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeSeriesMachineWatchUpgradeSeriesNotificationsCall) Return(arg0 state.NotifyWatcher, arg1 error) *MockUpgradeSeriesMachineWatchUpgradeSeriesNotificationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeSeriesMachineWatchUpgradeSeriesNotificationsCall) Do(f func() (state.NotifyWatcher, error)) *MockUpgradeSeriesMachineWatchUpgradeSeriesNotificationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeSeriesMachineWatchUpgradeSeriesNotificationsCall) DoAndReturn(f func() (state.NotifyWatcher, error)) *MockUpgradeSeriesMachineWatchUpgradeSeriesNotificationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUpgradeSeriesUnit is a mock of UpgradeSeriesUnit interface.
type MockUpgradeSeriesUnit struct {
	ctrl     *gomock.Controller
	recorder *MockUpgradeSeriesUnitMockRecorder
}

// MockUpgradeSeriesUnitMockRecorder is the mock recorder for MockUpgradeSeriesUnit.
type MockUpgradeSeriesUnitMockRecorder struct {
	mock *MockUpgradeSeriesUnit
}

// NewMockUpgradeSeriesUnit creates a new mock instance.
func NewMockUpgradeSeriesUnit(ctrl *gomock.Controller) *MockUpgradeSeriesUnit {
	mock := &MockUpgradeSeriesUnit{ctrl: ctrl}
	mock.recorder = &MockUpgradeSeriesUnitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpgradeSeriesUnit) EXPECT() *MockUpgradeSeriesUnitMockRecorder {
	return m.recorder
}

// AssignedMachineId mocks base method.
func (m *MockUpgradeSeriesUnit) AssignedMachineId() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignedMachineId")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssignedMachineId indicates an expected call of AssignedMachineId.
func (mr *MockUpgradeSeriesUnitMockRecorder) AssignedMachineId() *MockUpgradeSeriesUnitAssignedMachineIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignedMachineId", reflect.TypeOf((*MockUpgradeSeriesUnit)(nil).AssignedMachineId))
	return &MockUpgradeSeriesUnitAssignedMachineIdCall{Call: call}
}

// MockUpgradeSeriesUnitAssignedMachineIdCall wrap *gomock.Call
type MockUpgradeSeriesUnitAssignedMachineIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeSeriesUnitAssignedMachineIdCall) Return(arg0 string, arg1 error) *MockUpgradeSeriesUnitAssignedMachineIdCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeSeriesUnitAssignedMachineIdCall) Do(f func() (string, error)) *MockUpgradeSeriesUnitAssignedMachineIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeSeriesUnitAssignedMachineIdCall) DoAndReturn(f func() (string, error)) *MockUpgradeSeriesUnitAssignedMachineIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUpgradeSeriesStatus mocks base method.
func (m *MockUpgradeSeriesUnit) SetUpgradeSeriesStatus(arg0 model.UpgradeSeriesStatus, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUpgradeSeriesStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUpgradeSeriesStatus indicates an expected call of SetUpgradeSeriesStatus.
func (mr *MockUpgradeSeriesUnitMockRecorder) SetUpgradeSeriesStatus(arg0, arg1 any) *MockUpgradeSeriesUnitSetUpgradeSeriesStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpgradeSeriesStatus", reflect.TypeOf((*MockUpgradeSeriesUnit)(nil).SetUpgradeSeriesStatus), arg0, arg1)
	return &MockUpgradeSeriesUnitSetUpgradeSeriesStatusCall{Call: call}
}

// MockUpgradeSeriesUnitSetUpgradeSeriesStatusCall wrap *gomock.Call
type MockUpgradeSeriesUnitSetUpgradeSeriesStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeSeriesUnitSetUpgradeSeriesStatusCall) Return(arg0 error) *MockUpgradeSeriesUnitSetUpgradeSeriesStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeSeriesUnitSetUpgradeSeriesStatusCall) Do(f func(model.UpgradeSeriesStatus, string) error) *MockUpgradeSeriesUnitSetUpgradeSeriesStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeSeriesUnitSetUpgradeSeriesStatusCall) DoAndReturn(f func(model.UpgradeSeriesStatus, string) error) *MockUpgradeSeriesUnitSetUpgradeSeriesStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tag mocks base method.
func (m *MockUpgradeSeriesUnit) Tag() names.Tag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names.Tag)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockUpgradeSeriesUnitMockRecorder) Tag() *MockUpgradeSeriesUnitTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockUpgradeSeriesUnit)(nil).Tag))
	return &MockUpgradeSeriesUnitTagCall{Call: call}
}

// MockUpgradeSeriesUnitTagCall wrap *gomock.Call
type MockUpgradeSeriesUnitTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeSeriesUnitTagCall) Return(arg0 names.Tag) *MockUpgradeSeriesUnitTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeSeriesUnitTagCall) Do(f func() names.Tag) *MockUpgradeSeriesUnitTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeSeriesUnitTagCall) DoAndReturn(f func() names.Tag) *MockUpgradeSeriesUnitTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpgradeSeriesStatus mocks base method.
func (m *MockUpgradeSeriesUnit) UpgradeSeriesStatus() (model.UpgradeSeriesStatus, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeSeriesStatus")
	ret0, _ := ret[0].(model.UpgradeSeriesStatus)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// UpgradeSeriesStatus indicates an expected call of UpgradeSeriesStatus.
func (mr *MockUpgradeSeriesUnitMockRecorder) UpgradeSeriesStatus() *MockUpgradeSeriesUnitUpgradeSeriesStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeSeriesStatus", reflect.TypeOf((*MockUpgradeSeriesUnit)(nil).UpgradeSeriesStatus))
	return &MockUpgradeSeriesUnitUpgradeSeriesStatusCall{Call: call}
}

// MockUpgradeSeriesUnitUpgradeSeriesStatusCall wrap *gomock.Call
type MockUpgradeSeriesUnitUpgradeSeriesStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeSeriesUnitUpgradeSeriesStatusCall) Return(arg0 model.UpgradeSeriesStatus, arg1 string, arg2 error) *MockUpgradeSeriesUnitUpgradeSeriesStatusCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeSeriesUnitUpgradeSeriesStatusCall) Do(f func() (model.UpgradeSeriesStatus, string, error)) *MockUpgradeSeriesUnitUpgradeSeriesStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeSeriesUnitUpgradeSeriesStatusCall) DoAndReturn(f func() (model.UpgradeSeriesStatus, string, error)) *MockUpgradeSeriesUnitUpgradeSeriesStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
