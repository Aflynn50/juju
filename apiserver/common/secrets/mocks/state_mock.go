// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/state (interfaces: SecretBackendsStorage)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/state_mock.go github.com/juju/juju/state SecretBackendsStorage
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	secrets "github.com/juju/juju/core/secrets"
	state "github.com/juju/juju/state"
	gomock "go.uber.org/mock/gomock"
)

// MockSecretBackendsStorage is a mock of SecretBackendsStorage interface.
type MockSecretBackendsStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSecretBackendsStorageMockRecorder
}

// MockSecretBackendsStorageMockRecorder is the mock recorder for MockSecretBackendsStorage.
type MockSecretBackendsStorageMockRecorder struct {
	mock *MockSecretBackendsStorage
}

// NewMockSecretBackendsStorage creates a new mock instance.
func NewMockSecretBackendsStorage(ctrl *gomock.Controller) *MockSecretBackendsStorage {
	mock := &MockSecretBackendsStorage{ctrl: ctrl}
	mock.recorder = &MockSecretBackendsStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretBackendsStorage) EXPECT() *MockSecretBackendsStorageMockRecorder {
	return m.recorder
}

// CreateSecretBackend mocks base method.
func (m *MockSecretBackendsStorage) CreateSecretBackend(arg0 state.CreateSecretBackendParams) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecretBackend", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecretBackend indicates an expected call of CreateSecretBackend.
func (mr *MockSecretBackendsStorageMockRecorder) CreateSecretBackend(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecretBackend", reflect.TypeOf((*MockSecretBackendsStorage)(nil).CreateSecretBackend), arg0)
}

// DeleteSecretBackend mocks base method.
func (m *MockSecretBackendsStorage) DeleteSecretBackend(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecretBackend", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecretBackend indicates an expected call of DeleteSecretBackend.
func (mr *MockSecretBackendsStorageMockRecorder) DeleteSecretBackend(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecretBackend", reflect.TypeOf((*MockSecretBackendsStorage)(nil).DeleteSecretBackend), arg0, arg1)
}

// GetSecretBackend mocks base method.
func (m *MockSecretBackendsStorage) GetSecretBackend(arg0 string) (*secrets.SecretBackend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretBackend", arg0)
	ret0, _ := ret[0].(*secrets.SecretBackend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretBackend indicates an expected call of GetSecretBackend.
func (mr *MockSecretBackendsStorageMockRecorder) GetSecretBackend(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretBackend", reflect.TypeOf((*MockSecretBackendsStorage)(nil).GetSecretBackend), arg0)
}

// GetSecretBackendByID mocks base method.
func (m *MockSecretBackendsStorage) GetSecretBackendByID(arg0 string) (*secrets.SecretBackend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretBackendByID", arg0)
	ret0, _ := ret[0].(*secrets.SecretBackend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretBackendByID indicates an expected call of GetSecretBackendByID.
func (mr *MockSecretBackendsStorageMockRecorder) GetSecretBackendByID(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretBackendByID", reflect.TypeOf((*MockSecretBackendsStorage)(nil).GetSecretBackendByID), arg0)
}

// ListSecretBackends mocks base method.
func (m *MockSecretBackendsStorage) ListSecretBackends() ([]*secrets.SecretBackend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecretBackends")
	ret0, _ := ret[0].([]*secrets.SecretBackend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecretBackends indicates an expected call of ListSecretBackends.
func (mr *MockSecretBackendsStorageMockRecorder) ListSecretBackends() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecretBackends", reflect.TypeOf((*MockSecretBackendsStorage)(nil).ListSecretBackends))
}

// SecretBackendRotated mocks base method.
func (m *MockSecretBackendsStorage) SecretBackendRotated(arg0 string, arg1 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretBackendRotated", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SecretBackendRotated indicates an expected call of SecretBackendRotated.
func (mr *MockSecretBackendsStorageMockRecorder) SecretBackendRotated(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretBackendRotated", reflect.TypeOf((*MockSecretBackendsStorage)(nil).SecretBackendRotated), arg0, arg1)
}

// UpdateSecretBackend mocks base method.
func (m *MockSecretBackendsStorage) UpdateSecretBackend(arg0 state.UpdateSecretBackendParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecretBackend", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecretBackend indicates an expected call of UpdateSecretBackend.
func (mr *MockSecretBackendsStorageMockRecorder) UpdateSecretBackend(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecretBackend", reflect.TypeOf((*MockSecretBackendsStorage)(nil).UpdateSecretBackend), arg0)
}
