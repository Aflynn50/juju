// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/secrets/provider (interfaces: SecretStoreProvider)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	provider "github.com/juju/juju/secrets/provider"
	names "github.com/juju/names/v4"
)

// MockSecretStoreProvider is a mock of SecretStoreProvider interface.
type MockSecretStoreProvider struct {
	ctrl     *gomock.Controller
	recorder *MockSecretStoreProviderMockRecorder
}

// MockSecretStoreProviderMockRecorder is the mock recorder for MockSecretStoreProvider.
type MockSecretStoreProviderMockRecorder struct {
	mock *MockSecretStoreProvider
}

// NewMockSecretStoreProvider creates a new mock instance.
func NewMockSecretStoreProvider(ctrl *gomock.Controller) *MockSecretStoreProvider {
	mock := &MockSecretStoreProvider{ctrl: ctrl}
	mock.recorder = &MockSecretStoreProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretStoreProvider) EXPECT() *MockSecretStoreProviderMockRecorder {
	return m.recorder
}

// CleanupModel mocks base method.
func (m *MockSecretStoreProvider) CleanupModel(arg0 provider.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupModel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupModel indicates an expected call of CleanupModel.
func (mr *MockSecretStoreProviderMockRecorder) CleanupModel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupModel", reflect.TypeOf((*MockSecretStoreProvider)(nil).CleanupModel), arg0)
}

// CleanupSecrets mocks base method.
func (m *MockSecretStoreProvider) CleanupSecrets(arg0 provider.Model, arg1 names.Tag, arg2 provider.SecretRevisions) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupSecrets", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupSecrets indicates an expected call of CleanupSecrets.
func (mr *MockSecretStoreProviderMockRecorder) CleanupSecrets(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupSecrets", reflect.TypeOf((*MockSecretStoreProvider)(nil).CleanupSecrets), arg0, arg1, arg2)
}

// Initialise mocks base method.
func (m *MockSecretStoreProvider) Initialise(arg0 provider.Model) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialise", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialise indicates an expected call of Initialise.
func (mr *MockSecretStoreProviderMockRecorder) Initialise(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialise", reflect.TypeOf((*MockSecretStoreProvider)(nil).Initialise), arg0)
}

// NewStore mocks base method.
func (m *MockSecretStoreProvider) NewStore(arg0 *provider.StoreConfig) (provider.SecretsStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewStore", arg0)
	ret0, _ := ret[0].(provider.SecretsStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewStore indicates an expected call of NewStore.
func (mr *MockSecretStoreProviderMockRecorder) NewStore(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewStore", reflect.TypeOf((*MockSecretStoreProvider)(nil).NewStore), arg0)
}

// StoreConfig mocks base method.
func (m *MockSecretStoreProvider) StoreConfig(arg0 provider.Model, arg1 names.Tag, arg2, arg3 provider.SecretRevisions) (*provider.StoreConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreConfig", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*provider.StoreConfig)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StoreConfig indicates an expected call of StoreConfig.
func (mr *MockSecretStoreProviderMockRecorder) StoreConfig(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreConfig", reflect.TypeOf((*MockSecretStoreProvider)(nil).StoreConfig), arg0, arg1, arg2, arg3)
}

// Type mocks base method.
func (m *MockSecretStoreProvider) Type() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(string)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockSecretStoreProviderMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockSecretStoreProvider)(nil).Type))
}
