// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/go-macaroon-bakery/macaroon-bakery/v3/bakery (interfaces: FirstPartyCaveatChecker)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/bakery_mock.go github.com/go-macaroon-bakery/macaroon-bakery/v3/bakery FirstPartyCaveatChecker
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	checkers "github.com/go-macaroon-bakery/macaroon-bakery/v3/bakery/checkers"
	gomock "go.uber.org/mock/gomock"
)

// MockFirstPartyCaveatChecker is a mock of FirstPartyCaveatChecker interface.
type MockFirstPartyCaveatChecker struct {
	ctrl     *gomock.Controller
	recorder *MockFirstPartyCaveatCheckerMockRecorder
}

// MockFirstPartyCaveatCheckerMockRecorder is the mock recorder for MockFirstPartyCaveatChecker.
type MockFirstPartyCaveatCheckerMockRecorder struct {
	mock *MockFirstPartyCaveatChecker
}

// NewMockFirstPartyCaveatChecker creates a new mock instance.
func NewMockFirstPartyCaveatChecker(ctrl *gomock.Controller) *MockFirstPartyCaveatChecker {
	mock := &MockFirstPartyCaveatChecker{ctrl: ctrl}
	mock.recorder = &MockFirstPartyCaveatCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFirstPartyCaveatChecker) EXPECT() *MockFirstPartyCaveatCheckerMockRecorder {
	return m.recorder
}

// CheckFirstPartyCaveat mocks base method.
func (m *MockFirstPartyCaveatChecker) CheckFirstPartyCaveat(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckFirstPartyCaveat", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckFirstPartyCaveat indicates an expected call of CheckFirstPartyCaveat.
func (mr *MockFirstPartyCaveatCheckerMockRecorder) CheckFirstPartyCaveat(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckFirstPartyCaveat", reflect.TypeOf((*MockFirstPartyCaveatChecker)(nil).CheckFirstPartyCaveat), arg0, arg1)
}

// Namespace mocks base method.
func (m *MockFirstPartyCaveatChecker) Namespace() *checkers.Namespace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace")
	ret0, _ := ret[0].(*checkers.Namespace)
	return ret0
}

// Namespace indicates an expected call of Namespace.
func (mr *MockFirstPartyCaveatCheckerMockRecorder) Namespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockFirstPartyCaveatChecker)(nil).Namespace))
}
