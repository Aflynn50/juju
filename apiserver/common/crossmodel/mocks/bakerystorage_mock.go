// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/state/bakerystorage (interfaces: BakeryConfig,ExpirableStorage)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/bakerystorage_mock.go github.com/juju/juju/state/bakerystorage BakeryConfig,ExpirableStorage
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"
	time "time"

	bakery "github.com/go-macaroon-bakery/macaroon-bakery/v3/bakery"
	bakerystorage "github.com/juju/juju/state/bakerystorage"
	txn "github.com/juju/mgo/v3/txn"
	gomock "go.uber.org/mock/gomock"
)

// MockBakeryConfig is a mock of BakeryConfig interface.
type MockBakeryConfig struct {
	ctrl     *gomock.Controller
	recorder *MockBakeryConfigMockRecorder
}

// MockBakeryConfigMockRecorder is the mock recorder for MockBakeryConfig.
type MockBakeryConfigMockRecorder struct {
	mock *MockBakeryConfig
}

// NewMockBakeryConfig creates a new mock instance.
func NewMockBakeryConfig(ctrl *gomock.Controller) *MockBakeryConfig {
	mock := &MockBakeryConfig{ctrl: ctrl}
	mock.recorder = &MockBakeryConfigMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBakeryConfig) EXPECT() *MockBakeryConfigMockRecorder {
	return m.recorder
}

// GetExternalUsersThirdPartyKey mocks base method.
func (m *MockBakeryConfig) GetExternalUsersThirdPartyKey() (*bakery.KeyPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalUsersThirdPartyKey")
	ret0, _ := ret[0].(*bakery.KeyPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalUsersThirdPartyKey indicates an expected call of GetExternalUsersThirdPartyKey.
func (mr *MockBakeryConfigMockRecorder) GetExternalUsersThirdPartyKey() *MockBakeryConfigGetExternalUsersThirdPartyKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalUsersThirdPartyKey", reflect.TypeOf((*MockBakeryConfig)(nil).GetExternalUsersThirdPartyKey))
	return &MockBakeryConfigGetExternalUsersThirdPartyKeyCall{Call: call}
}

// MockBakeryConfigGetExternalUsersThirdPartyKeyCall wrap *gomock.Call
type MockBakeryConfigGetExternalUsersThirdPartyKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBakeryConfigGetExternalUsersThirdPartyKeyCall) Return(arg0 *bakery.KeyPair, arg1 error) *MockBakeryConfigGetExternalUsersThirdPartyKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBakeryConfigGetExternalUsersThirdPartyKeyCall) Do(f func() (*bakery.KeyPair, error)) *MockBakeryConfigGetExternalUsersThirdPartyKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBakeryConfigGetExternalUsersThirdPartyKeyCall) DoAndReturn(f func() (*bakery.KeyPair, error)) *MockBakeryConfigGetExternalUsersThirdPartyKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetLocalUsersKey mocks base method.
func (m *MockBakeryConfig) GetLocalUsersKey() (*bakery.KeyPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalUsersKey")
	ret0, _ := ret[0].(*bakery.KeyPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalUsersKey indicates an expected call of GetLocalUsersKey.
func (mr *MockBakeryConfigMockRecorder) GetLocalUsersKey() *MockBakeryConfigGetLocalUsersKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalUsersKey", reflect.TypeOf((*MockBakeryConfig)(nil).GetLocalUsersKey))
	return &MockBakeryConfigGetLocalUsersKeyCall{Call: call}
}

// MockBakeryConfigGetLocalUsersKeyCall wrap *gomock.Call
type MockBakeryConfigGetLocalUsersKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBakeryConfigGetLocalUsersKeyCall) Return(arg0 *bakery.KeyPair, arg1 error) *MockBakeryConfigGetLocalUsersKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBakeryConfigGetLocalUsersKeyCall) Do(f func() (*bakery.KeyPair, error)) *MockBakeryConfigGetLocalUsersKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBakeryConfigGetLocalUsersKeyCall) DoAndReturn(f func() (*bakery.KeyPair, error)) *MockBakeryConfigGetLocalUsersKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetLocalUsersThirdPartyKey mocks base method.
func (m *MockBakeryConfig) GetLocalUsersThirdPartyKey() (*bakery.KeyPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalUsersThirdPartyKey")
	ret0, _ := ret[0].(*bakery.KeyPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalUsersThirdPartyKey indicates an expected call of GetLocalUsersThirdPartyKey.
func (mr *MockBakeryConfigMockRecorder) GetLocalUsersThirdPartyKey() *MockBakeryConfigGetLocalUsersThirdPartyKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalUsersThirdPartyKey", reflect.TypeOf((*MockBakeryConfig)(nil).GetLocalUsersThirdPartyKey))
	return &MockBakeryConfigGetLocalUsersThirdPartyKeyCall{Call: call}
}

// MockBakeryConfigGetLocalUsersThirdPartyKeyCall wrap *gomock.Call
type MockBakeryConfigGetLocalUsersThirdPartyKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBakeryConfigGetLocalUsersThirdPartyKeyCall) Return(arg0 *bakery.KeyPair, arg1 error) *MockBakeryConfigGetLocalUsersThirdPartyKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBakeryConfigGetLocalUsersThirdPartyKeyCall) Do(f func() (*bakery.KeyPair, error)) *MockBakeryConfigGetLocalUsersThirdPartyKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBakeryConfigGetLocalUsersThirdPartyKeyCall) DoAndReturn(f func() (*bakery.KeyPair, error)) *MockBakeryConfigGetLocalUsersThirdPartyKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOffersThirdPartyKey mocks base method.
func (m *MockBakeryConfig) GetOffersThirdPartyKey() (*bakery.KeyPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOffersThirdPartyKey")
	ret0, _ := ret[0].(*bakery.KeyPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffersThirdPartyKey indicates an expected call of GetOffersThirdPartyKey.
func (mr *MockBakeryConfigMockRecorder) GetOffersThirdPartyKey() *MockBakeryConfigGetOffersThirdPartyKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffersThirdPartyKey", reflect.TypeOf((*MockBakeryConfig)(nil).GetOffersThirdPartyKey))
	return &MockBakeryConfigGetOffersThirdPartyKeyCall{Call: call}
}

// MockBakeryConfigGetOffersThirdPartyKeyCall wrap *gomock.Call
type MockBakeryConfigGetOffersThirdPartyKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBakeryConfigGetOffersThirdPartyKeyCall) Return(arg0 *bakery.KeyPair, arg1 error) *MockBakeryConfigGetOffersThirdPartyKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBakeryConfigGetOffersThirdPartyKeyCall) Do(f func() (*bakery.KeyPair, error)) *MockBakeryConfigGetOffersThirdPartyKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBakeryConfigGetOffersThirdPartyKeyCall) DoAndReturn(f func() (*bakery.KeyPair, error)) *MockBakeryConfigGetOffersThirdPartyKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialiseBakeryConfigOp mocks base method.
func (m *MockBakeryConfig) InitialiseBakeryConfigOp() (txn.Op, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialiseBakeryConfigOp")
	ret0, _ := ret[0].(txn.Op)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitialiseBakeryConfigOp indicates an expected call of InitialiseBakeryConfigOp.
func (mr *MockBakeryConfigMockRecorder) InitialiseBakeryConfigOp() *MockBakeryConfigInitialiseBakeryConfigOpCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialiseBakeryConfigOp", reflect.TypeOf((*MockBakeryConfig)(nil).InitialiseBakeryConfigOp))
	return &MockBakeryConfigInitialiseBakeryConfigOpCall{Call: call}
}

// MockBakeryConfigInitialiseBakeryConfigOpCall wrap *gomock.Call
type MockBakeryConfigInitialiseBakeryConfigOpCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBakeryConfigInitialiseBakeryConfigOpCall) Return(arg0 txn.Op, arg1 error) *MockBakeryConfigInitialiseBakeryConfigOpCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBakeryConfigInitialiseBakeryConfigOpCall) Do(f func() (txn.Op, error)) *MockBakeryConfigInitialiseBakeryConfigOpCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBakeryConfigInitialiseBakeryConfigOpCall) DoAndReturn(f func() (txn.Op, error)) *MockBakeryConfigInitialiseBakeryConfigOpCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockExpirableStorage is a mock of ExpirableStorage interface.
type MockExpirableStorage struct {
	ctrl     *gomock.Controller
	recorder *MockExpirableStorageMockRecorder
}

// MockExpirableStorageMockRecorder is the mock recorder for MockExpirableStorage.
type MockExpirableStorageMockRecorder struct {
	mock *MockExpirableStorage
}

// NewMockExpirableStorage creates a new mock instance.
func NewMockExpirableStorage(ctrl *gomock.Controller) *MockExpirableStorage {
	mock := &MockExpirableStorage{ctrl: ctrl}
	mock.recorder = &MockExpirableStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpirableStorage) EXPECT() *MockExpirableStorageMockRecorder {
	return m.recorder
}

// ExpireAfter mocks base method.
func (m *MockExpirableStorage) ExpireAfter(arg0 time.Duration) bakerystorage.ExpirableStorage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpireAfter", arg0)
	ret0, _ := ret[0].(bakerystorage.ExpirableStorage)
	return ret0
}

// ExpireAfter indicates an expected call of ExpireAfter.
func (mr *MockExpirableStorageMockRecorder) ExpireAfter(arg0 any) *MockExpirableStorageExpireAfterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpireAfter", reflect.TypeOf((*MockExpirableStorage)(nil).ExpireAfter), arg0)
	return &MockExpirableStorageExpireAfterCall{Call: call}
}

// MockExpirableStorageExpireAfterCall wrap *gomock.Call
type MockExpirableStorageExpireAfterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExpirableStorageExpireAfterCall) Return(arg0 bakerystorage.ExpirableStorage) *MockExpirableStorageExpireAfterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExpirableStorageExpireAfterCall) Do(f func(time.Duration) bakerystorage.ExpirableStorage) *MockExpirableStorageExpireAfterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExpirableStorageExpireAfterCall) DoAndReturn(f func(time.Duration) bakerystorage.ExpirableStorage) *MockExpirableStorageExpireAfterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Get mocks base method.
func (m *MockExpirableStorage) Get(arg0 context.Context, arg1 []byte) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockExpirableStorageMockRecorder) Get(arg0, arg1 any) *MockExpirableStorageGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockExpirableStorage)(nil).Get), arg0, arg1)
	return &MockExpirableStorageGetCall{Call: call}
}

// MockExpirableStorageGetCall wrap *gomock.Call
type MockExpirableStorageGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExpirableStorageGetCall) Return(arg0 []byte, arg1 error) *MockExpirableStorageGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExpirableStorageGetCall) Do(f func(context.Context, []byte) ([]byte, error)) *MockExpirableStorageGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExpirableStorageGetCall) DoAndReturn(f func(context.Context, []byte) ([]byte, error)) *MockExpirableStorageGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RootKey mocks base method.
func (m *MockExpirableStorage) RootKey(arg0 context.Context) ([]byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RootKey", arg0)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// RootKey indicates an expected call of RootKey.
func (mr *MockExpirableStorageMockRecorder) RootKey(arg0 any) *MockExpirableStorageRootKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RootKey", reflect.TypeOf((*MockExpirableStorage)(nil).RootKey), arg0)
	return &MockExpirableStorageRootKeyCall{Call: call}
}

// MockExpirableStorageRootKeyCall wrap *gomock.Call
type MockExpirableStorageRootKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExpirableStorageRootKeyCall) Return(arg0, arg1 []byte, arg2 error) *MockExpirableStorageRootKeyCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExpirableStorageRootKeyCall) Do(f func(context.Context) ([]byte, []byte, error)) *MockExpirableStorageRootKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExpirableStorageRootKeyCall) DoAndReturn(f func(context.Context) ([]byte, []byte, error)) *MockExpirableStorageRootKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
