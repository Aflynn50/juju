// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/authentication (interfaces: PasswordService)
//
// Generated by this command:
//
//	mockgen -typed -package authentication_test -destination package_mock_test.go github.com/juju/juju/apiserver/authentication PasswordService
//

// Package authentication_test is a generated GoMock package.
package authentication_test

import (
	context "context"
	reflect "reflect"

	unit "github.com/juju/juju/core/unit"
	gomock "go.uber.org/mock/gomock"
)

// MockPasswordService is a mock of PasswordService interface.
type MockPasswordService struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordServiceMockRecorder
}

// MockPasswordServiceMockRecorder is the mock recorder for MockPasswordService.
type MockPasswordServiceMockRecorder struct {
	mock *MockPasswordService
}

// NewMockPasswordService creates a new mock instance.
func NewMockPasswordService(ctrl *gomock.Controller) *MockPasswordService {
	mock := &MockPasswordService{ctrl: ctrl}
	mock.recorder = &MockPasswordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordService) EXPECT() *MockPasswordServiceMockRecorder {
	return m.recorder
}

// IsValidUnitPassword mocks base method.
func (m *MockPasswordService) IsValidUnitPassword(arg0 context.Context, arg1 unit.Name, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsValidUnitPassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsValidUnitPassword indicates an expected call of IsValidUnitPassword.
func (mr *MockPasswordServiceMockRecorder) IsValidUnitPassword(arg0, arg1, arg2 any) *MockPasswordServiceIsValidUnitPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsValidUnitPassword", reflect.TypeOf((*MockPasswordService)(nil).IsValidUnitPassword), arg0, arg1, arg2)
	return &MockPasswordServiceIsValidUnitPasswordCall{Call: call}
}

// MockPasswordServiceIsValidUnitPasswordCall wrap *gomock.Call
type MockPasswordServiceIsValidUnitPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPasswordServiceIsValidUnitPasswordCall) Return(arg0 bool, arg1 error) *MockPasswordServiceIsValidUnitPasswordCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPasswordServiceIsValidUnitPasswordCall) Do(f func(context.Context, unit.Name, string) (bool, error)) *MockPasswordServiceIsValidUnitPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPasswordServiceIsValidUnitPasswordCall) DoAndReturn(f func(context.Context, unit.Name, string) (bool, error)) *MockPasswordServiceIsValidUnitPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
