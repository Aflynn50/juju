// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/applicationoffers (interfaces: ModelService,AccessService,ApplicationService,ModelServiceFactoryGetter,ModelServiceFactory)
//
// Generated by this command:
//
//	mockgen -typed -package applicationoffers_test -destination service_mock_test.go github.com/juju/juju/apiserver/facades/client/applicationoffers ModelService,AccessService,ApplicationService,ModelServiceFactoryGetter,ModelServiceFactory
//

// Package applicationoffers_test is a generated GoMock package.
package applicationoffers_test

import (
	context "context"
	reflect "reflect"

	applicationoffers "github.com/juju/juju/apiserver/facades/client/applicationoffers"
	charm "github.com/juju/juju/core/charm"
	model "github.com/juju/juju/core/model"
	permission "github.com/juju/juju/core/permission"
	user "github.com/juju/juju/core/user"
	access "github.com/juju/juju/domain/access"
	gomock "go.uber.org/mock/gomock"
)

// MockModelService is a mock of ModelService interface.
type MockModelService struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceMockRecorder
}

// MockModelServiceMockRecorder is the mock recorder for MockModelService.
type MockModelServiceMockRecorder struct {
	mock *MockModelService
}

// NewMockModelService creates a new mock instance.
func NewMockModelService(ctrl *gomock.Controller) *MockModelService {
	mock := &MockModelService{ctrl: ctrl}
	mock.recorder = &MockModelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelService) EXPECT() *MockModelServiceMockRecorder {
	return m.recorder
}

// Model mocks base method.
func (m *MockModelService) Model(arg0 context.Context, arg1 model.UUID) (model.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Model", arg0, arg1)
	ret0, _ := ret[0].(model.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Model indicates an expected call of Model.
func (mr *MockModelServiceMockRecorder) Model(arg0, arg1 any) *MockModelServiceModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Model", reflect.TypeOf((*MockModelService)(nil).Model), arg0, arg1)
	return &MockModelServiceModelCall{Call: call}
}

// MockModelServiceModelCall wrap *gomock.Call
type MockModelServiceModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceModelCall) Return(arg0 model.Model, arg1 error) *MockModelServiceModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceModelCall) Do(f func(context.Context, model.UUID) (model.Model, error)) *MockModelServiceModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceModelCall) DoAndReturn(f func(context.Context, model.UUID) (model.Model, error)) *MockModelServiceModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAccessService is a mock of AccessService interface.
type MockAccessService struct {
	ctrl     *gomock.Controller
	recorder *MockAccessServiceMockRecorder
}

// MockAccessServiceMockRecorder is the mock recorder for MockAccessService.
type MockAccessServiceMockRecorder struct {
	mock *MockAccessService
}

// NewMockAccessService creates a new mock instance.
func NewMockAccessService(ctrl *gomock.Controller) *MockAccessService {
	mock := &MockAccessService{ctrl: ctrl}
	mock.recorder = &MockAccessServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAccessService) EXPECT() *MockAccessServiceMockRecorder {
	return m.recorder
}

// CreatePermission mocks base method.
func (m *MockAccessService) CreatePermission(arg0 context.Context, arg1 permission.UserAccessSpec) (permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", arg0, arg1)
	ret0, _ := ret[0].(permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockAccessServiceMockRecorder) CreatePermission(arg0, arg1 any) *MockAccessServiceCreatePermissionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockAccessService)(nil).CreatePermission), arg0, arg1)
	return &MockAccessServiceCreatePermissionCall{Call: call}
}

// MockAccessServiceCreatePermissionCall wrap *gomock.Call
type MockAccessServiceCreatePermissionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessServiceCreatePermissionCall) Return(arg0 permission.UserAccess, arg1 error) *MockAccessServiceCreatePermissionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessServiceCreatePermissionCall) Do(f func(context.Context, permission.UserAccessSpec) (permission.UserAccess, error)) *MockAccessServiceCreatePermissionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessServiceCreatePermissionCall) DoAndReturn(f func(context.Context, permission.UserAccessSpec) (permission.UserAccess, error)) *MockAccessServiceCreatePermissionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeletePermission mocks base method.
func (m *MockAccessService) DeletePermission(arg0 context.Context, arg1 user.Name, arg2 permission.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermission", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockAccessServiceMockRecorder) DeletePermission(arg0, arg1, arg2 any) *MockAccessServiceDeletePermissionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockAccessService)(nil).DeletePermission), arg0, arg1, arg2)
	return &MockAccessServiceDeletePermissionCall{Call: call}
}

// MockAccessServiceDeletePermissionCall wrap *gomock.Call
type MockAccessServiceDeletePermissionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessServiceDeletePermissionCall) Return(arg0 error) *MockAccessServiceDeletePermissionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessServiceDeletePermissionCall) Do(f func(context.Context, user.Name, permission.ID) error) *MockAccessServiceDeletePermissionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessServiceDeletePermissionCall) DoAndReturn(f func(context.Context, user.Name, permission.ID) error) *MockAccessServiceDeletePermissionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByName mocks base method.
func (m *MockAccessService) GetUserByName(arg0 context.Context, arg1 user.Name) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", arg0, arg1)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockAccessServiceMockRecorder) GetUserByName(arg0, arg1 any) *MockAccessServiceGetUserByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockAccessService)(nil).GetUserByName), arg0, arg1)
	return &MockAccessServiceGetUserByNameCall{Call: call}
}

// MockAccessServiceGetUserByNameCall wrap *gomock.Call
type MockAccessServiceGetUserByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessServiceGetUserByNameCall) Return(arg0 user.User, arg1 error) *MockAccessServiceGetUserByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessServiceGetUserByNameCall) Do(f func(context.Context, user.Name) (user.User, error)) *MockAccessServiceGetUserByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessServiceGetUserByNameCall) DoAndReturn(f func(context.Context, user.Name) (user.User, error)) *MockAccessServiceGetUserByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadAllUserAccessForTarget mocks base method.
func (m *MockAccessService) ReadAllUserAccessForTarget(arg0 context.Context, arg1 permission.ID) ([]permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllUserAccessForTarget", arg0, arg1)
	ret0, _ := ret[0].([]permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllUserAccessForTarget indicates an expected call of ReadAllUserAccessForTarget.
func (mr *MockAccessServiceMockRecorder) ReadAllUserAccessForTarget(arg0, arg1 any) *MockAccessServiceReadAllUserAccessForTargetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllUserAccessForTarget", reflect.TypeOf((*MockAccessService)(nil).ReadAllUserAccessForTarget), arg0, arg1)
	return &MockAccessServiceReadAllUserAccessForTargetCall{Call: call}
}

// MockAccessServiceReadAllUserAccessForTargetCall wrap *gomock.Call
type MockAccessServiceReadAllUserAccessForTargetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessServiceReadAllUserAccessForTargetCall) Return(arg0 []permission.UserAccess, arg1 error) *MockAccessServiceReadAllUserAccessForTargetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessServiceReadAllUserAccessForTargetCall) Do(f func(context.Context, permission.ID) ([]permission.UserAccess, error)) *MockAccessServiceReadAllUserAccessForTargetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessServiceReadAllUserAccessForTargetCall) DoAndReturn(f func(context.Context, permission.ID) ([]permission.UserAccess, error)) *MockAccessServiceReadAllUserAccessForTargetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadUserAccessLevelForTarget mocks base method.
func (m *MockAccessService) ReadUserAccessLevelForTarget(arg0 context.Context, arg1 user.Name, arg2 permission.ID) (permission.Access, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserAccessLevelForTarget", arg0, arg1, arg2)
	ret0, _ := ret[0].(permission.Access)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserAccessLevelForTarget indicates an expected call of ReadUserAccessLevelForTarget.
func (mr *MockAccessServiceMockRecorder) ReadUserAccessLevelForTarget(arg0, arg1, arg2 any) *MockAccessServiceReadUserAccessLevelForTargetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserAccessLevelForTarget", reflect.TypeOf((*MockAccessService)(nil).ReadUserAccessLevelForTarget), arg0, arg1, arg2)
	return &MockAccessServiceReadUserAccessLevelForTargetCall{Call: call}
}

// MockAccessServiceReadUserAccessLevelForTargetCall wrap *gomock.Call
type MockAccessServiceReadUserAccessLevelForTargetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessServiceReadUserAccessLevelForTargetCall) Return(arg0 permission.Access, arg1 error) *MockAccessServiceReadUserAccessLevelForTargetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessServiceReadUserAccessLevelForTargetCall) Do(f func(context.Context, user.Name, permission.ID) (permission.Access, error)) *MockAccessServiceReadUserAccessLevelForTargetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessServiceReadUserAccessLevelForTargetCall) DoAndReturn(f func(context.Context, user.Name, permission.ID) (permission.Access, error)) *MockAccessServiceReadUserAccessLevelForTargetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePermission mocks base method.
func (m *MockAccessService) UpdatePermission(arg0 context.Context, arg1 access.UpdatePermissionArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePermission indicates an expected call of UpdatePermission.
func (mr *MockAccessServiceMockRecorder) UpdatePermission(arg0, arg1 any) *MockAccessServiceUpdatePermissionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermission", reflect.TypeOf((*MockAccessService)(nil).UpdatePermission), arg0, arg1)
	return &MockAccessServiceUpdatePermissionCall{Call: call}
}

// MockAccessServiceUpdatePermissionCall wrap *gomock.Call
type MockAccessServiceUpdatePermissionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAccessServiceUpdatePermissionCall) Return(arg0 error) *MockAccessServiceUpdatePermissionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAccessServiceUpdatePermissionCall) Do(f func(context.Context, access.UpdatePermissionArgs) error) *MockAccessServiceUpdatePermissionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAccessServiceUpdatePermissionCall) DoAndReturn(f func(context.Context, access.UpdatePermissionArgs) error) *MockAccessServiceUpdatePermissionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// GetCharmIDByApplicationName mocks base method.
func (m *MockApplicationService) GetCharmIDByApplicationName(arg0 context.Context, arg1 string) (charm.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmIDByApplicationName", arg0, arg1)
	ret0, _ := ret[0].(charm.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmIDByApplicationName indicates an expected call of GetCharmIDByApplicationName.
func (mr *MockApplicationServiceMockRecorder) GetCharmIDByApplicationName(arg0, arg1 any) *MockApplicationServiceGetCharmIDByApplicationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmIDByApplicationName", reflect.TypeOf((*MockApplicationService)(nil).GetCharmIDByApplicationName), arg0, arg1)
	return &MockApplicationServiceGetCharmIDByApplicationNameCall{Call: call}
}

// MockApplicationServiceGetCharmIDByApplicationNameCall wrap *gomock.Call
type MockApplicationServiceGetCharmIDByApplicationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetCharmIDByApplicationNameCall) Return(arg0 charm.ID, arg1 error) *MockApplicationServiceGetCharmIDByApplicationNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetCharmIDByApplicationNameCall) Do(f func(context.Context, string) (charm.ID, error)) *MockApplicationServiceGetCharmIDByApplicationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetCharmIDByApplicationNameCall) DoAndReturn(f func(context.Context, string) (charm.ID, error)) *MockApplicationServiceGetCharmIDByApplicationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmMetadataDescription mocks base method.
func (m *MockApplicationService) GetCharmMetadataDescription(arg0 context.Context, arg1 charm.ID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmMetadataDescription", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmMetadataDescription indicates an expected call of GetCharmMetadataDescription.
func (mr *MockApplicationServiceMockRecorder) GetCharmMetadataDescription(arg0, arg1 any) *MockApplicationServiceGetCharmMetadataDescriptionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmMetadataDescription", reflect.TypeOf((*MockApplicationService)(nil).GetCharmMetadataDescription), arg0, arg1)
	return &MockApplicationServiceGetCharmMetadataDescriptionCall{Call: call}
}

// MockApplicationServiceGetCharmMetadataDescriptionCall wrap *gomock.Call
type MockApplicationServiceGetCharmMetadataDescriptionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetCharmMetadataDescriptionCall) Return(arg0 string, arg1 error) *MockApplicationServiceGetCharmMetadataDescriptionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetCharmMetadataDescriptionCall) Do(f func(context.Context, charm.ID) (string, error)) *MockApplicationServiceGetCharmMetadataDescriptionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetCharmMetadataDescriptionCall) DoAndReturn(f func(context.Context, charm.ID) (string, error)) *MockApplicationServiceGetCharmMetadataDescriptionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelServiceFactoryGetter is a mock of ModelServiceFactoryGetter interface.
type MockModelServiceFactoryGetter struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceFactoryGetterMockRecorder
}

// MockModelServiceFactoryGetterMockRecorder is the mock recorder for MockModelServiceFactoryGetter.
type MockModelServiceFactoryGetterMockRecorder struct {
	mock *MockModelServiceFactoryGetter
}

// NewMockModelServiceFactoryGetter creates a new mock instance.
func NewMockModelServiceFactoryGetter(ctrl *gomock.Controller) *MockModelServiceFactoryGetter {
	mock := &MockModelServiceFactoryGetter{ctrl: ctrl}
	mock.recorder = &MockModelServiceFactoryGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelServiceFactoryGetter) EXPECT() *MockModelServiceFactoryGetterMockRecorder {
	return m.recorder
}

// ServiceFactoryForModel mocks base method.
func (m *MockModelServiceFactoryGetter) ServiceFactoryForModel(arg0 model.UUID) applicationoffers.ModelServiceFactory {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceFactoryForModel", arg0)
	ret0, _ := ret[0].(applicationoffers.ModelServiceFactory)
	return ret0
}

// ServiceFactoryForModel indicates an expected call of ServiceFactoryForModel.
func (mr *MockModelServiceFactoryGetterMockRecorder) ServiceFactoryForModel(arg0 any) *MockModelServiceFactoryGetterServiceFactoryForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceFactoryForModel", reflect.TypeOf((*MockModelServiceFactoryGetter)(nil).ServiceFactoryForModel), arg0)
	return &MockModelServiceFactoryGetterServiceFactoryForModelCall{Call: call}
}

// MockModelServiceFactoryGetterServiceFactoryForModelCall wrap *gomock.Call
type MockModelServiceFactoryGetterServiceFactoryForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceFactoryGetterServiceFactoryForModelCall) Return(arg0 applicationoffers.ModelServiceFactory) *MockModelServiceFactoryGetterServiceFactoryForModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceFactoryGetterServiceFactoryForModelCall) Do(f func(model.UUID) applicationoffers.ModelServiceFactory) *MockModelServiceFactoryGetterServiceFactoryForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceFactoryGetterServiceFactoryForModelCall) DoAndReturn(f func(model.UUID) applicationoffers.ModelServiceFactory) *MockModelServiceFactoryGetterServiceFactoryForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelServiceFactory is a mock of ModelServiceFactory interface.
type MockModelServiceFactory struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceFactoryMockRecorder
}

// MockModelServiceFactoryMockRecorder is the mock recorder for MockModelServiceFactory.
type MockModelServiceFactoryMockRecorder struct {
	mock *MockModelServiceFactory
}

// NewMockModelServiceFactory creates a new mock instance.
func NewMockModelServiceFactory(ctrl *gomock.Controller) *MockModelServiceFactory {
	mock := &MockModelServiceFactory{ctrl: ctrl}
	mock.recorder = &MockModelServiceFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelServiceFactory) EXPECT() *MockModelServiceFactoryMockRecorder {
	return m.recorder
}

// Application mocks base method.
func (m *MockModelServiceFactory) Application() applicationoffers.ApplicationService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Application")
	ret0, _ := ret[0].(applicationoffers.ApplicationService)
	return ret0
}

// Application indicates an expected call of Application.
func (mr *MockModelServiceFactoryMockRecorder) Application() *MockModelServiceFactoryApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockModelServiceFactory)(nil).Application))
	return &MockModelServiceFactoryApplicationCall{Call: call}
}

// MockModelServiceFactoryApplicationCall wrap *gomock.Call
type MockModelServiceFactoryApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceFactoryApplicationCall) Return(arg0 applicationoffers.ApplicationService) *MockModelServiceFactoryApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceFactoryApplicationCall) Do(f func() applicationoffers.ApplicationService) *MockModelServiceFactoryApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceFactoryApplicationCall) DoAndReturn(f func() applicationoffers.ApplicationService) *MockModelServiceFactoryApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
