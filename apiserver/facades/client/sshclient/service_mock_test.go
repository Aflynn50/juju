// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/sshclient (interfaces: ModelConfigService,StubService)
//
// Generated by this command:
//
//	mockgen -typed -package sshclient_test -destination service_mock_test.go github.com/juju/juju/apiserver/facades/client/sshclient ModelConfigService,StubService
//

// Package sshclient_test is a generated GoMock package.
package sshclient_test

import (
	context "context"
	reflect "reflect"

	cloudspec "github.com/juju/juju/environs/cloudspec"
	config "github.com/juju/juju/environs/config"
	gomock "go.uber.org/mock/gomock"
)

// MockModelConfigService is a mock of ModelConfigService interface.
type MockModelConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockModelConfigServiceMockRecorder
}

// MockModelConfigServiceMockRecorder is the mock recorder for MockModelConfigService.
type MockModelConfigServiceMockRecorder struct {
	mock *MockModelConfigService
}

// NewMockModelConfigService creates a new mock instance.
func NewMockModelConfigService(ctrl *gomock.Controller) *MockModelConfigService {
	mock := &MockModelConfigService{ctrl: ctrl}
	mock.recorder = &MockModelConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelConfigService) EXPECT() *MockModelConfigServiceMockRecorder {
	return m.recorder
}

// ModelConfig mocks base method.
func (m *MockModelConfigService) ModelConfig(arg0 context.Context) (*config.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfig", arg0)
	ret0, _ := ret[0].(*config.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfig indicates an expected call of ModelConfig.
func (mr *MockModelConfigServiceMockRecorder) ModelConfig(arg0 any) *MockModelConfigServiceModelConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfig", reflect.TypeOf((*MockModelConfigService)(nil).ModelConfig), arg0)
	return &MockModelConfigServiceModelConfigCall{Call: call}
}

// MockModelConfigServiceModelConfigCall wrap *gomock.Call
type MockModelConfigServiceModelConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConfigServiceModelConfigCall) Return(arg0 *config.Config, arg1 error) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConfigServiceModelConfigCall) Do(f func(context.Context) (*config.Config, error)) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConfigServiceModelConfigCall) DoAndReturn(f func(context.Context) (*config.Config, error)) *MockModelConfigServiceModelConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStubService is a mock of StubService interface.
type MockStubService struct {
	ctrl     *gomock.Controller
	recorder *MockStubServiceMockRecorder
}

// MockStubServiceMockRecorder is the mock recorder for MockStubService.
type MockStubServiceMockRecorder struct {
	mock *MockStubService
}

// NewMockStubService creates a new mock instance.
func NewMockStubService(ctrl *gomock.Controller) *MockStubService {
	mock := &MockStubService{ctrl: ctrl}
	mock.recorder = &MockStubServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStubService) EXPECT() *MockStubServiceMockRecorder {
	return m.recorder
}

// CloudSpec mocks base method.
func (m *MockStubService) CloudSpec(arg0 context.Context) (cloudspec.CloudSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloudSpec", arg0)
	ret0, _ := ret[0].(cloudspec.CloudSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloudSpec indicates an expected call of CloudSpec.
func (mr *MockStubServiceMockRecorder) CloudSpec(arg0 any) *MockStubServiceCloudSpecCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloudSpec", reflect.TypeOf((*MockStubService)(nil).CloudSpec), arg0)
	return &MockStubServiceCloudSpecCall{Call: call}
}

// MockStubServiceCloudSpecCall wrap *gomock.Call
type MockStubServiceCloudSpecCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStubServiceCloudSpecCall) Return(arg0 cloudspec.CloudSpec, arg1 error) *MockStubServiceCloudSpecCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStubServiceCloudSpecCall) Do(f func(context.Context) (cloudspec.CloudSpec, error)) *MockStubServiceCloudSpecCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStubServiceCloudSpecCall) DoAndReturn(f func(context.Context) (cloudspec.CloudSpec, error)) *MockStubServiceCloudSpecCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetExecSecretToken mocks base method.
func (m *MockStubService) GetExecSecretToken(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecSecretToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExecSecretToken indicates an expected call of GetExecSecretToken.
func (mr *MockStubServiceMockRecorder) GetExecSecretToken(arg0 any) *MockStubServiceGetExecSecretTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecSecretToken", reflect.TypeOf((*MockStubService)(nil).GetExecSecretToken), arg0)
	return &MockStubServiceGetExecSecretTokenCall{Call: call}
}

// MockStubServiceGetExecSecretTokenCall wrap *gomock.Call
type MockStubServiceGetExecSecretTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStubServiceGetExecSecretTokenCall) Return(arg0 string, arg1 error) *MockStubServiceGetExecSecretTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStubServiceGetExecSecretTokenCall) Do(f func(context.Context) (string, error)) *MockStubServiceGetExecSecretTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStubServiceGetExecSecretTokenCall) DoAndReturn(f func(context.Context) (string, error)) *MockStubServiceGetExecSecretTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
