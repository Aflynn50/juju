// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/sshclient (interfaces: Backend,SSHMachine)
//
// Generated by this command:
//
//	mockgen -typed -package sshclient_test -destination state_mock_test.go github.com/juju/juju/apiserver/facades/client/sshclient Backend,SSHMachine
//

// Package sshclient_test is a generated GoMock package.
package sshclient_test

import (
	context "context"
	reflect "reflect"

	sshclient "github.com/juju/juju/apiserver/facades/client/sshclient"
	network "github.com/juju/juju/core/network"
	state "github.com/juju/juju/state"
	names "github.com/juju/names/v6"
	gomock "go.uber.org/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// GetMachineForEntity mocks base method.
func (m *MockBackend) GetMachineForEntity(arg0 string) (sshclient.SSHMachine, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineForEntity", arg0)
	ret0, _ := ret[0].(sshclient.SSHMachine)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineForEntity indicates an expected call of GetMachineForEntity.
func (mr *MockBackendMockRecorder) GetMachineForEntity(arg0 any) *MockBackendGetMachineForEntityCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineForEntity", reflect.TypeOf((*MockBackend)(nil).GetMachineForEntity), arg0)
	return &MockBackendGetMachineForEntityCall{Call: call}
}

// MockBackendGetMachineForEntityCall wrap *gomock.Call
type MockBackendGetMachineForEntityCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendGetMachineForEntityCall) Return(arg0 sshclient.SSHMachine, arg1 error) *MockBackendGetMachineForEntityCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendGetMachineForEntityCall) Do(f func(string) (sshclient.SSHMachine, error)) *MockBackendGetMachineForEntityCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendGetMachineForEntityCall) DoAndReturn(f func(string) (sshclient.SSHMachine, error)) *MockBackendGetMachineForEntityCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSSHHostKeys mocks base method.
func (m *MockBackend) GetSSHHostKeys(arg0 names.MachineTag) (state.SSHHostKeys, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSSHHostKeys", arg0)
	ret0, _ := ret[0].(state.SSHHostKeys)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSSHHostKeys indicates an expected call of GetSSHHostKeys.
func (mr *MockBackendMockRecorder) GetSSHHostKeys(arg0 any) *MockBackendGetSSHHostKeysCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSSHHostKeys", reflect.TypeOf((*MockBackend)(nil).GetSSHHostKeys), arg0)
	return &MockBackendGetSSHHostKeysCall{Call: call}
}

// MockBackendGetSSHHostKeysCall wrap *gomock.Call
type MockBackendGetSSHHostKeysCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendGetSSHHostKeysCall) Return(arg0 state.SSHHostKeys, arg1 error) *MockBackendGetSSHHostKeysCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendGetSSHHostKeysCall) Do(f func(names.MachineTag) (state.SSHHostKeys, error)) *MockBackendGetSSHHostKeysCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendGetSSHHostKeysCall) DoAndReturn(f func(names.MachineTag) (state.SSHHostKeys, error)) *MockBackendGetSSHHostKeysCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockSSHMachine is a mock of SSHMachine interface.
type MockSSHMachine struct {
	ctrl     *gomock.Controller
	recorder *MockSSHMachineMockRecorder
}

// MockSSHMachineMockRecorder is the mock recorder for MockSSHMachine.
type MockSSHMachineMockRecorder struct {
	mock *MockSSHMachine
}

// NewMockSSHMachine creates a new mock instance.
func NewMockSSHMachine(ctrl *gomock.Controller) *MockSSHMachine {
	mock := &MockSSHMachine{ctrl: ctrl}
	mock.recorder = &MockSSHMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSSHMachine) EXPECT() *MockSSHMachineMockRecorder {
	return m.recorder
}

// Addresses mocks base method.
func (m *MockSSHMachine) Addresses() network.SpaceAddresses {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Addresses")
	ret0, _ := ret[0].(network.SpaceAddresses)
	return ret0
}

// Addresses indicates an expected call of Addresses.
func (mr *MockSSHMachineMockRecorder) Addresses() *MockSSHMachineAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Addresses", reflect.TypeOf((*MockSSHMachine)(nil).Addresses))
	return &MockSSHMachineAddressesCall{Call: call}
}

// MockSSHMachineAddressesCall wrap *gomock.Call
type MockSSHMachineAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSSHMachineAddressesCall) Return(arg0 network.SpaceAddresses) *MockSSHMachineAddressesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSSHMachineAddressesCall) Do(f func() network.SpaceAddresses) *MockSSHMachineAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSSHMachineAddressesCall) DoAndReturn(f func() network.SpaceAddresses) *MockSSHMachineAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllDeviceSpaceAddresses mocks base method.
func (m *MockSSHMachine) AllDeviceSpaceAddresses(arg0 context.Context) (network.SpaceAddresses, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllDeviceSpaceAddresses", arg0)
	ret0, _ := ret[0].(network.SpaceAddresses)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllDeviceSpaceAddresses indicates an expected call of AllDeviceSpaceAddresses.
func (mr *MockSSHMachineMockRecorder) AllDeviceSpaceAddresses(arg0 any) *MockSSHMachineAllDeviceSpaceAddressesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllDeviceSpaceAddresses", reflect.TypeOf((*MockSSHMachine)(nil).AllDeviceSpaceAddresses), arg0)
	return &MockSSHMachineAllDeviceSpaceAddressesCall{Call: call}
}

// MockSSHMachineAllDeviceSpaceAddressesCall wrap *gomock.Call
type MockSSHMachineAllDeviceSpaceAddressesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSSHMachineAllDeviceSpaceAddressesCall) Return(arg0 network.SpaceAddresses, arg1 error) *MockSSHMachineAllDeviceSpaceAddressesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSSHMachineAllDeviceSpaceAddressesCall) Do(f func(context.Context) (network.SpaceAddresses, error)) *MockSSHMachineAllDeviceSpaceAddressesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSSHMachineAllDeviceSpaceAddressesCall) DoAndReturn(f func(context.Context) (network.SpaceAddresses, error)) *MockSSHMachineAllDeviceSpaceAddressesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MachineTag mocks base method.
func (m *MockSSHMachine) MachineTag() names.MachineTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MachineTag")
	ret0, _ := ret[0].(names.MachineTag)
	return ret0
}

// MachineTag indicates an expected call of MachineTag.
func (mr *MockSSHMachineMockRecorder) MachineTag() *MockSSHMachineMachineTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MachineTag", reflect.TypeOf((*MockSSHMachine)(nil).MachineTag))
	return &MockSSHMachineMachineTagCall{Call: call}
}

// MockSSHMachineMachineTagCall wrap *gomock.Call
type MockSSHMachineMachineTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSSHMachineMachineTagCall) Return(arg0 names.MachineTag) *MockSSHMachineMachineTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSSHMachineMachineTagCall) Do(f func() names.MachineTag) *MockSSHMachineMachineTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSSHMachineMachineTagCall) DoAndReturn(f func() names.MachineTag) *MockSSHMachineMachineTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PrivateAddress mocks base method.
func (m *MockSSHMachine) PrivateAddress() (network.SpaceAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrivateAddress")
	ret0, _ := ret[0].(network.SpaceAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PrivateAddress indicates an expected call of PrivateAddress.
func (mr *MockSSHMachineMockRecorder) PrivateAddress() *MockSSHMachinePrivateAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrivateAddress", reflect.TypeOf((*MockSSHMachine)(nil).PrivateAddress))
	return &MockSSHMachinePrivateAddressCall{Call: call}
}

// MockSSHMachinePrivateAddressCall wrap *gomock.Call
type MockSSHMachinePrivateAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSSHMachinePrivateAddressCall) Return(arg0 network.SpaceAddress, arg1 error) *MockSSHMachinePrivateAddressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSSHMachinePrivateAddressCall) Do(f func() (network.SpaceAddress, error)) *MockSSHMachinePrivateAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSSHMachinePrivateAddressCall) DoAndReturn(f func() (network.SpaceAddress, error)) *MockSSHMachinePrivateAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PublicAddress mocks base method.
func (m *MockSSHMachine) PublicAddress() (network.SpaceAddress, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PublicAddress")
	ret0, _ := ret[0].(network.SpaceAddress)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PublicAddress indicates an expected call of PublicAddress.
func (mr *MockSSHMachineMockRecorder) PublicAddress() *MockSSHMachinePublicAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PublicAddress", reflect.TypeOf((*MockSSHMachine)(nil).PublicAddress))
	return &MockSSHMachinePublicAddressCall{Call: call}
}

// MockSSHMachinePublicAddressCall wrap *gomock.Call
type MockSSHMachinePublicAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSSHMachinePublicAddressCall) Return(arg0 network.SpaceAddress, arg1 error) *MockSSHMachinePublicAddressCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSSHMachinePublicAddressCall) Do(f func() (network.SpaceAddress, error)) *MockSSHMachinePublicAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSSHMachinePublicAddressCall) DoAndReturn(f func() (network.SpaceAddress, error)) *MockSSHMachinePublicAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
