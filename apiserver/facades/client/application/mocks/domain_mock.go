// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/application (interfaces: MachineSaver,ApplicationSaver)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/domain_mock.go github.com/juju/juju/apiserver/facades/client/application MachineSaver,ApplicationSaver
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	service "github.com/juju/juju/domain/application/service"
	gomock "go.uber.org/mock/gomock"
)

// MockMachineSaver is a mock of MachineSaver interface.
type MockMachineSaver struct {
	ctrl     *gomock.Controller
	recorder *MockMachineSaverMockRecorder
}

// MockMachineSaverMockRecorder is the mock recorder for MockMachineSaver.
type MockMachineSaverMockRecorder struct {
	mock *MockMachineSaver
}

// NewMockMachineSaver creates a new mock instance.
func NewMockMachineSaver(ctrl *gomock.Controller) *MockMachineSaver {
	mock := &MockMachineSaver{ctrl: ctrl}
	mock.recorder = &MockMachineSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachineSaver) EXPECT() *MockMachineSaverMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockMachineSaver) Save(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMachineSaverMockRecorder) Save(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMachineSaver)(nil).Save), arg0, arg1)
}

// MockApplicationSaver is a mock of ApplicationSaver interface.
type MockApplicationSaver struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationSaverMockRecorder
}

// MockApplicationSaverMockRecorder is the mock recorder for MockApplicationSaver.
type MockApplicationSaverMockRecorder struct {
	mock *MockApplicationSaver
}

// NewMockApplicationSaver creates a new mock instance.
func NewMockApplicationSaver(ctrl *gomock.Controller) *MockApplicationSaver {
	mock := &MockApplicationSaver{ctrl: ctrl}
	mock.recorder = &MockApplicationSaverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationSaver) EXPECT() *MockApplicationSaverMockRecorder {
	return m.recorder
}

// Save mocks base method.
func (m *MockApplicationSaver) Save(arg0 context.Context, arg1 string, arg2 ...service.AddUnitParams) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Save", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockApplicationSaverMockRecorder) Save(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockApplicationSaver)(nil).Save), varargs...)
}
