// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/state (interfaces: StorageAttachment,StorageInstance,CloudContainer)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/state_mock.go github.com/juju/juju/state StorageAttachment,StorageInstance,CloudContainer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	network "github.com/juju/juju/core/network"
	state "github.com/juju/juju/state"
	names "github.com/juju/names/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockStorageAttachment is a mock of StorageAttachment interface.
type MockStorageAttachment struct {
	ctrl     *gomock.Controller
	recorder *MockStorageAttachmentMockRecorder
}

// MockStorageAttachmentMockRecorder is the mock recorder for MockStorageAttachment.
type MockStorageAttachmentMockRecorder struct {
	mock *MockStorageAttachment
}

// NewMockStorageAttachment creates a new mock instance.
func NewMockStorageAttachment(ctrl *gomock.Controller) *MockStorageAttachment {
	mock := &MockStorageAttachment{ctrl: ctrl}
	mock.recorder = &MockStorageAttachmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageAttachment) EXPECT() *MockStorageAttachmentMockRecorder {
	return m.recorder
}

// Life mocks base method.
func (m *MockStorageAttachment) Life() state.Life {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Life")
	ret0, _ := ret[0].(state.Life)
	return ret0
}

// Life indicates an expected call of Life.
func (mr *MockStorageAttachmentMockRecorder) Life() *MockStorageAttachmentLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Life", reflect.TypeOf((*MockStorageAttachment)(nil).Life))
	return &MockStorageAttachmentLifeCall{Call: call}
}

// MockStorageAttachmentLifeCall wrap *gomock.Call
type MockStorageAttachmentLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageAttachmentLifeCall) Return(arg0 state.Life) *MockStorageAttachmentLifeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageAttachmentLifeCall) Do(f func() state.Life) *MockStorageAttachmentLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageAttachmentLifeCall) DoAndReturn(f func() state.Life) *MockStorageAttachmentLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageInstance mocks base method.
func (m *MockStorageAttachment) StorageInstance() names.StorageTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageInstance")
	ret0, _ := ret[0].(names.StorageTag)
	return ret0
}

// StorageInstance indicates an expected call of StorageInstance.
func (mr *MockStorageAttachmentMockRecorder) StorageInstance() *MockStorageAttachmentStorageInstanceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageInstance", reflect.TypeOf((*MockStorageAttachment)(nil).StorageInstance))
	return &MockStorageAttachmentStorageInstanceCall{Call: call}
}

// MockStorageAttachmentStorageInstanceCall wrap *gomock.Call
type MockStorageAttachmentStorageInstanceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageAttachmentStorageInstanceCall) Return(arg0 names.StorageTag) *MockStorageAttachmentStorageInstanceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageAttachmentStorageInstanceCall) Do(f func() names.StorageTag) *MockStorageAttachmentStorageInstanceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageAttachmentStorageInstanceCall) DoAndReturn(f func() names.StorageTag) *MockStorageAttachmentStorageInstanceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unit mocks base method.
func (m *MockStorageAttachment) Unit() names.UnitTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unit")
	ret0, _ := ret[0].(names.UnitTag)
	return ret0
}

// Unit indicates an expected call of Unit.
func (mr *MockStorageAttachmentMockRecorder) Unit() *MockStorageAttachmentUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unit", reflect.TypeOf((*MockStorageAttachment)(nil).Unit))
	return &MockStorageAttachmentUnitCall{Call: call}
}

// MockStorageAttachmentUnitCall wrap *gomock.Call
type MockStorageAttachmentUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageAttachmentUnitCall) Return(arg0 names.UnitTag) *MockStorageAttachmentUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageAttachmentUnitCall) Do(f func() names.UnitTag) *MockStorageAttachmentUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageAttachmentUnitCall) DoAndReturn(f func() names.UnitTag) *MockStorageAttachmentUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStorageInstance is a mock of StorageInstance interface.
type MockStorageInstance struct {
	ctrl     *gomock.Controller
	recorder *MockStorageInstanceMockRecorder
}

// MockStorageInstanceMockRecorder is the mock recorder for MockStorageInstance.
type MockStorageInstanceMockRecorder struct {
	mock *MockStorageInstance
}

// NewMockStorageInstance creates a new mock instance.
func NewMockStorageInstance(ctrl *gomock.Controller) *MockStorageInstance {
	mock := &MockStorageInstance{ctrl: ctrl}
	mock.recorder = &MockStorageInstanceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorageInstance) EXPECT() *MockStorageInstanceMockRecorder {
	return m.recorder
}

// Kind mocks base method.
func (m *MockStorageInstance) Kind() state.StorageKind {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kind")
	ret0, _ := ret[0].(state.StorageKind)
	return ret0
}

// Kind indicates an expected call of Kind.
func (mr *MockStorageInstanceMockRecorder) Kind() *MockStorageInstanceKindCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kind", reflect.TypeOf((*MockStorageInstance)(nil).Kind))
	return &MockStorageInstanceKindCall{Call: call}
}

// MockStorageInstanceKindCall wrap *gomock.Call
type MockStorageInstanceKindCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageInstanceKindCall) Return(arg0 state.StorageKind) *MockStorageInstanceKindCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageInstanceKindCall) Do(f func() state.StorageKind) *MockStorageInstanceKindCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageInstanceKindCall) DoAndReturn(f func() state.StorageKind) *MockStorageInstanceKindCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Life mocks base method.
func (m *MockStorageInstance) Life() state.Life {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Life")
	ret0, _ := ret[0].(state.Life)
	return ret0
}

// Life indicates an expected call of Life.
func (mr *MockStorageInstanceMockRecorder) Life() *MockStorageInstanceLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Life", reflect.TypeOf((*MockStorageInstance)(nil).Life))
	return &MockStorageInstanceLifeCall{Call: call}
}

// MockStorageInstanceLifeCall wrap *gomock.Call
type MockStorageInstanceLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageInstanceLifeCall) Return(arg0 state.Life) *MockStorageInstanceLifeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageInstanceLifeCall) Do(f func() state.Life) *MockStorageInstanceLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageInstanceLifeCall) DoAndReturn(f func() state.Life) *MockStorageInstanceLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Owner mocks base method.
func (m *MockStorageInstance) Owner() (names.Tag, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Owner")
	ret0, _ := ret[0].(names.Tag)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// Owner indicates an expected call of Owner.
func (mr *MockStorageInstanceMockRecorder) Owner() *MockStorageInstanceOwnerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Owner", reflect.TypeOf((*MockStorageInstance)(nil).Owner))
	return &MockStorageInstanceOwnerCall{Call: call}
}

// MockStorageInstanceOwnerCall wrap *gomock.Call
type MockStorageInstanceOwnerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageInstanceOwnerCall) Return(arg0 names.Tag, arg1 bool) *MockStorageInstanceOwnerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageInstanceOwnerCall) Do(f func() (names.Tag, bool)) *MockStorageInstanceOwnerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageInstanceOwnerCall) DoAndReturn(f func() (names.Tag, bool)) *MockStorageInstanceOwnerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Pool mocks base method.
func (m *MockStorageInstance) Pool() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Pool")
	ret0, _ := ret[0].(string)
	return ret0
}

// Pool indicates an expected call of Pool.
func (mr *MockStorageInstanceMockRecorder) Pool() *MockStorageInstancePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Pool", reflect.TypeOf((*MockStorageInstance)(nil).Pool))
	return &MockStorageInstancePoolCall{Call: call}
}

// MockStorageInstancePoolCall wrap *gomock.Call
type MockStorageInstancePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageInstancePoolCall) Return(arg0 string) *MockStorageInstancePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageInstancePoolCall) Do(f func() string) *MockStorageInstancePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageInstancePoolCall) DoAndReturn(f func() string) *MockStorageInstancePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageName mocks base method.
func (m *MockStorageInstance) StorageName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageName")
	ret0, _ := ret[0].(string)
	return ret0
}

// StorageName indicates an expected call of StorageName.
func (mr *MockStorageInstanceMockRecorder) StorageName() *MockStorageInstanceStorageNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageName", reflect.TypeOf((*MockStorageInstance)(nil).StorageName))
	return &MockStorageInstanceStorageNameCall{Call: call}
}

// MockStorageInstanceStorageNameCall wrap *gomock.Call
type MockStorageInstanceStorageNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageInstanceStorageNameCall) Return(arg0 string) *MockStorageInstanceStorageNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageInstanceStorageNameCall) Do(f func() string) *MockStorageInstanceStorageNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageInstanceStorageNameCall) DoAndReturn(f func() string) *MockStorageInstanceStorageNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageTag mocks base method.
func (m *MockStorageInstance) StorageTag() names.StorageTag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageTag")
	ret0, _ := ret[0].(names.StorageTag)
	return ret0
}

// StorageTag indicates an expected call of StorageTag.
func (mr *MockStorageInstanceMockRecorder) StorageTag() *MockStorageInstanceStorageTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageTag", reflect.TypeOf((*MockStorageInstance)(nil).StorageTag))
	return &MockStorageInstanceStorageTagCall{Call: call}
}

// MockStorageInstanceStorageTagCall wrap *gomock.Call
type MockStorageInstanceStorageTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageInstanceStorageTagCall) Return(arg0 names.StorageTag) *MockStorageInstanceStorageTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageInstanceStorageTagCall) Do(f func() names.StorageTag) *MockStorageInstanceStorageTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageInstanceStorageTagCall) DoAndReturn(f func() names.StorageTag) *MockStorageInstanceStorageTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Tag mocks base method.
func (m *MockStorageInstance) Tag() names.Tag {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Tag")
	ret0, _ := ret[0].(names.Tag)
	return ret0
}

// Tag indicates an expected call of Tag.
func (mr *MockStorageInstanceMockRecorder) Tag() *MockStorageInstanceTagCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Tag", reflect.TypeOf((*MockStorageInstance)(nil).Tag))
	return &MockStorageInstanceTagCall{Call: call}
}

// MockStorageInstanceTagCall wrap *gomock.Call
type MockStorageInstanceTagCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStorageInstanceTagCall) Return(arg0 names.Tag) *MockStorageInstanceTagCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStorageInstanceTagCall) Do(f func() names.Tag) *MockStorageInstanceTagCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStorageInstanceTagCall) DoAndReturn(f func() names.Tag) *MockStorageInstanceTagCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCloudContainer is a mock of CloudContainer interface.
type MockCloudContainer struct {
	ctrl     *gomock.Controller
	recorder *MockCloudContainerMockRecorder
}

// MockCloudContainerMockRecorder is the mock recorder for MockCloudContainer.
type MockCloudContainerMockRecorder struct {
	mock *MockCloudContainer
}

// NewMockCloudContainer creates a new mock instance.
func NewMockCloudContainer(ctrl *gomock.Controller) *MockCloudContainer {
	mock := &MockCloudContainer{ctrl: ctrl}
	mock.recorder = &MockCloudContainerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCloudContainer) EXPECT() *MockCloudContainerMockRecorder {
	return m.recorder
}

// Address mocks base method.
func (m *MockCloudContainer) Address() *network.SpaceAddress {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(*network.SpaceAddress)
	return ret0
}

// Address indicates an expected call of Address.
func (mr *MockCloudContainerMockRecorder) Address() *MockCloudContainerAddressCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockCloudContainer)(nil).Address))
	return &MockCloudContainerAddressCall{Call: call}
}

// MockCloudContainerAddressCall wrap *gomock.Call
type MockCloudContainerAddressCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudContainerAddressCall) Return(arg0 *network.SpaceAddress) *MockCloudContainerAddressCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudContainerAddressCall) Do(f func() *network.SpaceAddress) *MockCloudContainerAddressCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudContainerAddressCall) DoAndReturn(f func() *network.SpaceAddress) *MockCloudContainerAddressCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Ports mocks base method.
func (m *MockCloudContainer) Ports() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ports")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Ports indicates an expected call of Ports.
func (mr *MockCloudContainerMockRecorder) Ports() *MockCloudContainerPortsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ports", reflect.TypeOf((*MockCloudContainer)(nil).Ports))
	return &MockCloudContainerPortsCall{Call: call}
}

// MockCloudContainerPortsCall wrap *gomock.Call
type MockCloudContainerPortsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudContainerPortsCall) Return(arg0 []string) *MockCloudContainerPortsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudContainerPortsCall) Do(f func() []string) *MockCloudContainerPortsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudContainerPortsCall) DoAndReturn(f func() []string) *MockCloudContainerPortsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ProviderId mocks base method.
func (m *MockCloudContainer) ProviderId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProviderId")
	ret0, _ := ret[0].(string)
	return ret0
}

// ProviderId indicates an expected call of ProviderId.
func (mr *MockCloudContainerMockRecorder) ProviderId() *MockCloudContainerProviderIdCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProviderId", reflect.TypeOf((*MockCloudContainer)(nil).ProviderId))
	return &MockCloudContainerProviderIdCall{Call: call}
}

// MockCloudContainerProviderIdCall wrap *gomock.Call
type MockCloudContainerProviderIdCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudContainerProviderIdCall) Return(arg0 string) *MockCloudContainerProviderIdCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudContainerProviderIdCall) Do(f func() string) *MockCloudContainerProviderIdCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudContainerProviderIdCall) DoAndReturn(f func() string) *MockCloudContainerProviderIdCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Unit mocks base method.
func (m *MockCloudContainer) Unit() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unit")
	ret0, _ := ret[0].(string)
	return ret0
}

// Unit indicates an expected call of Unit.
func (mr *MockCloudContainerMockRecorder) Unit() *MockCloudContainerUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unit", reflect.TypeOf((*MockCloudContainer)(nil).Unit))
	return &MockCloudContainerUnitCall{Call: call}
}

// MockCloudContainerUnitCall wrap *gomock.Call
type MockCloudContainerUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCloudContainerUnitCall) Return(arg0 string) *MockCloudContainerUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCloudContainerUnitCall) Do(f func() string) *MockCloudContainerUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCloudContainerUnitCall) DoAndReturn(f func() string) *MockCloudContainerUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
