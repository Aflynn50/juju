// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/application (interfaces: OfferConnection)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/offer_mock.go github.com/juju/juju/apiserver/facades/client/application OfferConnection
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockOfferConnection is a mock of OfferConnection interface.
type MockOfferConnection struct {
	ctrl     *gomock.Controller
	recorder *MockOfferConnectionMockRecorder
}

// MockOfferConnectionMockRecorder is the mock recorder for MockOfferConnection.
type MockOfferConnectionMockRecorder struct {
	mock *MockOfferConnection
}

// NewMockOfferConnection creates a new mock instance.
func NewMockOfferConnection(ctrl *gomock.Controller) *MockOfferConnection {
	mock := &MockOfferConnection{ctrl: ctrl}
	mock.recorder = &MockOfferConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOfferConnection) EXPECT() *MockOfferConnectionMockRecorder {
	return m.recorder
}

// OfferUUID mocks base method.
func (m *MockOfferConnection) OfferUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OfferUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// OfferUUID indicates an expected call of OfferUUID.
func (mr *MockOfferConnectionMockRecorder) OfferUUID() *MockOfferConnectionOfferUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferUUID", reflect.TypeOf((*MockOfferConnection)(nil).OfferUUID))
	return &MockOfferConnectionOfferUUIDCall{Call: call}
}

// MockOfferConnectionOfferUUIDCall wrap *gomock.Call
type MockOfferConnectionOfferUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOfferConnectionOfferUUIDCall) Return(arg0 string) *MockOfferConnectionOfferUUIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOfferConnectionOfferUUIDCall) Do(f func() string) *MockOfferConnectionOfferUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOfferConnectionOfferUUIDCall) DoAndReturn(f func() string) *MockOfferConnectionOfferUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UserName mocks base method.
func (m *MockOfferConnection) UserName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserName")
	ret0, _ := ret[0].(string)
	return ret0
}

// UserName indicates an expected call of UserName.
func (mr *MockOfferConnectionMockRecorder) UserName() *MockOfferConnectionUserNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserName", reflect.TypeOf((*MockOfferConnection)(nil).UserName))
	return &MockOfferConnectionUserNameCall{Call: call}
}

// MockOfferConnectionUserNameCall wrap *gomock.Call
type MockOfferConnectionUserNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockOfferConnectionUserNameCall) Return(arg0 string) *MockOfferConnectionUserNameCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockOfferConnectionUserNameCall) Do(f func() string) *MockOfferConnectionUserNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockOfferConnectionUserNameCall) DoAndReturn(f func() string) *MockOfferConnectionUserNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
