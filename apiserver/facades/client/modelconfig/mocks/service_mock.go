// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/modelconfig (interfaces: ModelSecretBackendService,ModelConfigService)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/service_mock.go github.com/juju/juju/apiserver/facades/client/modelconfig ModelSecretBackendService,ModelConfigService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	config "github.com/juju/juju/environs/config"
	gomock "go.uber.org/mock/gomock"
)

// MockModelSecretBackendService is a mock of ModelSecretBackendService interface.
type MockModelSecretBackendService struct {
	ctrl     *gomock.Controller
	recorder *MockModelSecretBackendServiceMockRecorder
}

// MockModelSecretBackendServiceMockRecorder is the mock recorder for MockModelSecretBackendService.
type MockModelSecretBackendServiceMockRecorder struct {
	mock *MockModelSecretBackendService
}

// NewMockModelSecretBackendService creates a new mock instance.
func NewMockModelSecretBackendService(ctrl *gomock.Controller) *MockModelSecretBackendService {
	mock := &MockModelSecretBackendService{ctrl: ctrl}
	mock.recorder = &MockModelSecretBackendServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelSecretBackendService) EXPECT() *MockModelSecretBackendServiceMockRecorder {
	return m.recorder
}

// GetModelSecretBackend mocks base method.
func (m *MockModelSecretBackendService) GetModelSecretBackend(arg0 context.Context) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelSecretBackend", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelSecretBackend indicates an expected call of GetModelSecretBackend.
func (mr *MockModelSecretBackendServiceMockRecorder) GetModelSecretBackend(arg0 any) *MockModelSecretBackendServiceGetModelSecretBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelSecretBackend", reflect.TypeOf((*MockModelSecretBackendService)(nil).GetModelSecretBackend), arg0)
	return &MockModelSecretBackendServiceGetModelSecretBackendCall{Call: call}
}

// MockModelSecretBackendServiceGetModelSecretBackendCall wrap *gomock.Call
type MockModelSecretBackendServiceGetModelSecretBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelSecretBackendServiceGetModelSecretBackendCall) Return(arg0 string, arg1 error) *MockModelSecretBackendServiceGetModelSecretBackendCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelSecretBackendServiceGetModelSecretBackendCall) Do(f func(context.Context) (string, error)) *MockModelSecretBackendServiceGetModelSecretBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelSecretBackendServiceGetModelSecretBackendCall) DoAndReturn(f func(context.Context) (string, error)) *MockModelSecretBackendServiceGetModelSecretBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetModelSecretBackend mocks base method.
func (m *MockModelSecretBackendService) SetModelSecretBackend(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModelSecretBackend", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModelSecretBackend indicates an expected call of SetModelSecretBackend.
func (mr *MockModelSecretBackendServiceMockRecorder) SetModelSecretBackend(arg0, arg1 any) *MockModelSecretBackendServiceSetModelSecretBackendCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModelSecretBackend", reflect.TypeOf((*MockModelSecretBackendService)(nil).SetModelSecretBackend), arg0, arg1)
	return &MockModelSecretBackendServiceSetModelSecretBackendCall{Call: call}
}

// MockModelSecretBackendServiceSetModelSecretBackendCall wrap *gomock.Call
type MockModelSecretBackendServiceSetModelSecretBackendCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelSecretBackendServiceSetModelSecretBackendCall) Return(arg0 error) *MockModelSecretBackendServiceSetModelSecretBackendCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelSecretBackendServiceSetModelSecretBackendCall) Do(f func(context.Context, string) error) *MockModelSecretBackendServiceSetModelSecretBackendCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelSecretBackendServiceSetModelSecretBackendCall) DoAndReturn(f func(context.Context, string) error) *MockModelSecretBackendServiceSetModelSecretBackendCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelConfigService is a mock of ModelConfigService interface.
type MockModelConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockModelConfigServiceMockRecorder
}

// MockModelConfigServiceMockRecorder is the mock recorder for MockModelConfigService.
type MockModelConfigServiceMockRecorder struct {
	mock *MockModelConfigService
}

// NewMockModelConfigService creates a new mock instance.
func NewMockModelConfigService(ctrl *gomock.Controller) *MockModelConfigService {
	mock := &MockModelConfigService{ctrl: ctrl}
	mock.recorder = &MockModelConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelConfigService) EXPECT() *MockModelConfigServiceMockRecorder {
	return m.recorder
}

// ModelConfigValues mocks base method.
func (m *MockModelConfigService) ModelConfigValues(arg0 context.Context) (config.ConfigValues, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfigValues", arg0)
	ret0, _ := ret[0].(config.ConfigValues)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfigValues indicates an expected call of ModelConfigValues.
func (mr *MockModelConfigServiceMockRecorder) ModelConfigValues(arg0 any) *MockModelConfigServiceModelConfigValuesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfigValues", reflect.TypeOf((*MockModelConfigService)(nil).ModelConfigValues), arg0)
	return &MockModelConfigServiceModelConfigValuesCall{Call: call}
}

// MockModelConfigServiceModelConfigValuesCall wrap *gomock.Call
type MockModelConfigServiceModelConfigValuesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConfigServiceModelConfigValuesCall) Return(arg0 config.ConfigValues, arg1 error) *MockModelConfigServiceModelConfigValuesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConfigServiceModelConfigValuesCall) Do(f func(context.Context) (config.ConfigValues, error)) *MockModelConfigServiceModelConfigValuesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConfigServiceModelConfigValuesCall) DoAndReturn(f func(context.Context) (config.ConfigValues, error)) *MockModelConfigServiceModelConfigValuesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateModelConfig mocks base method.
func (m *MockModelConfigService) UpdateModelConfig(arg0 context.Context, arg1 map[string]any, arg2 []string, arg3 ...config.Validator) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateModelConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateModelConfig indicates an expected call of UpdateModelConfig.
func (mr *MockModelConfigServiceMockRecorder) UpdateModelConfig(arg0, arg1, arg2 any, arg3 ...any) *MockModelConfigServiceUpdateModelConfigCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelConfig", reflect.TypeOf((*MockModelConfigService)(nil).UpdateModelConfig), varargs...)
	return &MockModelConfigServiceUpdateModelConfigCall{Call: call}
}

// MockModelConfigServiceUpdateModelConfigCall wrap *gomock.Call
type MockModelConfigServiceUpdateModelConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelConfigServiceUpdateModelConfigCall) Return(arg0 error) *MockModelConfigServiceUpdateModelConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelConfigServiceUpdateModelConfigCall) Do(f func(context.Context, map[string]any, []string, ...config.Validator) error) *MockModelConfigServiceUpdateModelConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelConfigServiceUpdateModelConfigCall) DoAndReturn(f func(context.Context, map[string]any, []string, ...config.Validator) error) *MockModelConfigServiceUpdateModelConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
