// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/modelconfig (interfaces: SecretBackendService,ModelConfigService)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/service_mock.go github.com/juju/juju/apiserver/facades/client/modelconfig SecretBackendService,ModelConfigService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	config "github.com/juju/juju/environs/config"
	gomock "go.uber.org/mock/gomock"
)

// MockSecretBackendService is a mock of SecretBackendService interface.
type MockSecretBackendService struct {
	ctrl     *gomock.Controller
	recorder *MockSecretBackendServiceMockRecorder
}

// MockSecretBackendServiceMockRecorder is the mock recorder for MockSecretBackendService.
type MockSecretBackendServiceMockRecorder struct {
	mock *MockSecretBackendService
}

// NewMockSecretBackendService creates a new mock instance.
func NewMockSecretBackendService(ctrl *gomock.Controller) *MockSecretBackendService {
	mock := &MockSecretBackendService{ctrl: ctrl}
	mock.recorder = &MockSecretBackendServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretBackendService) EXPECT() *MockSecretBackendServiceMockRecorder {
	return m.recorder
}

// PingSecretBackend mocks base method.
func (m *MockSecretBackendService) PingSecretBackend(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PingSecretBackend", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PingSecretBackend indicates an expected call of PingSecretBackend.
func (mr *MockSecretBackendServiceMockRecorder) PingSecretBackend(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PingSecretBackend", reflect.TypeOf((*MockSecretBackendService)(nil).PingSecretBackend), arg0, arg1)
}

// MockModelConfigService is a mock of ModelConfigService interface.
type MockModelConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockModelConfigServiceMockRecorder
}

// MockModelConfigServiceMockRecorder is the mock recorder for MockModelConfigService.
type MockModelConfigServiceMockRecorder struct {
	mock *MockModelConfigService
}

// NewMockModelConfigService creates a new mock instance.
func NewMockModelConfigService(ctrl *gomock.Controller) *MockModelConfigService {
	mock := &MockModelConfigService{ctrl: ctrl}
	mock.recorder = &MockModelConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelConfigService) EXPECT() *MockModelConfigServiceMockRecorder {
	return m.recorder
}

// ModelConfigValues mocks base method.
func (m *MockModelConfigService) ModelConfigValues(arg0 context.Context) (config.ConfigValues, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfigValues", arg0)
	ret0, _ := ret[0].(config.ConfigValues)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfigValues indicates an expected call of ModelConfigValues.
func (mr *MockModelConfigServiceMockRecorder) ModelConfigValues(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfigValues", reflect.TypeOf((*MockModelConfigService)(nil).ModelConfigValues), arg0)
}

// UpdateModelConfig mocks base method.
func (m *MockModelConfigService) UpdateModelConfig(arg0 context.Context, arg1 map[string]any, arg2 []string, arg3 ...config.Validator) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateModelConfig", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateModelConfig indicates an expected call of UpdateModelConfig.
func (mr *MockModelConfigServiceMockRecorder) UpdateModelConfig(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelConfig", reflect.TypeOf((*MockModelConfigService)(nil).UpdateModelConfig), varargs...)
}
