// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/resources (interfaces: Backend,NewCharmRepository)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/backend.go github.com/juju/juju/apiserver/facades/client/resources Backend,NewCharmRepository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	resource "github.com/juju/juju/internal/charm/resource"
	charm "github.com/juju/juju/core/charm"
	resources "github.com/juju/juju/core/resources"
	gomock "go.uber.org/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// AddPendingResource mocks base method.
func (m *MockBackend) AddPendingResource(arg0, arg1 string, arg2 resource.Resource) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPendingResource", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPendingResource indicates an expected call of AddPendingResource.
func (mr *MockBackendMockRecorder) AddPendingResource(arg0, arg1, arg2 any) *MockBackendAddPendingResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPendingResource", reflect.TypeOf((*MockBackend)(nil).AddPendingResource), arg0, arg1, arg2)
	return &MockBackendAddPendingResourceCall{Call: call}
}

// MockBackendAddPendingResourceCall wrap *gomock.Call
type MockBackendAddPendingResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendAddPendingResourceCall) Return(arg0 string, arg1 error) *MockBackendAddPendingResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendAddPendingResourceCall) Do(f func(string, string, resource.Resource) (string, error)) *MockBackendAddPendingResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendAddPendingResourceCall) DoAndReturn(f func(string, string, resource.Resource) (string, error)) *MockBackendAddPendingResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListResources mocks base method.
func (m *MockBackend) ListResources(arg0 string) (resources.ApplicationResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResources", arg0)
	ret0, _ := ret[0].(resources.ApplicationResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResources indicates an expected call of ListResources.
func (mr *MockBackendMockRecorder) ListResources(arg0 any) *MockBackendListResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockBackend)(nil).ListResources), arg0)
	return &MockBackendListResourcesCall{Call: call}
}

// MockBackendListResourcesCall wrap *gomock.Call
type MockBackendListResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendListResourcesCall) Return(arg0 resources.ApplicationResources, arg1 error) *MockBackendListResourcesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendListResourcesCall) Do(f func(string) (resources.ApplicationResources, error)) *MockBackendListResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendListResourcesCall) DoAndReturn(f func(string) (resources.ApplicationResources, error)) *MockBackendListResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockNewCharmRepository is a mock of NewCharmRepository interface.
type MockNewCharmRepository struct {
	ctrl     *gomock.Controller
	recorder *MockNewCharmRepositoryMockRecorder
}

// MockNewCharmRepositoryMockRecorder is the mock recorder for MockNewCharmRepository.
type MockNewCharmRepositoryMockRecorder struct {
	mock *MockNewCharmRepository
}

// NewMockNewCharmRepository creates a new mock instance.
func NewMockNewCharmRepository(ctrl *gomock.Controller) *MockNewCharmRepository {
	mock := &MockNewCharmRepository{ctrl: ctrl}
	mock.recorder = &MockNewCharmRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNewCharmRepository) EXPECT() *MockNewCharmRepositoryMockRecorder {
	return m.recorder
}

// ResolveResources mocks base method.
func (m *MockNewCharmRepository) ResolveResources(arg0 context.Context, arg1 []resource.Resource, arg2 charm.CharmID) ([]resource.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveResources", arg0, arg1, arg2)
	ret0, _ := ret[0].([]resource.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveResources indicates an expected call of ResolveResources.
func (mr *MockNewCharmRepositoryMockRecorder) ResolveResources(arg0, arg1, arg2 any) *MockNewCharmRepositoryResolveResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveResources", reflect.TypeOf((*MockNewCharmRepository)(nil).ResolveResources), arg0, arg1, arg2)
	return &MockNewCharmRepositoryResolveResourcesCall{Call: call}
}

// MockNewCharmRepositoryResolveResourcesCall wrap *gomock.Call
type MockNewCharmRepositoryResolveResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockNewCharmRepositoryResolveResourcesCall) Return(arg0 []resource.Resource, arg1 error) *MockNewCharmRepositoryResolveResourcesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockNewCharmRepositoryResolveResourcesCall) Do(f func(context.Context, []resource.Resource, charm.CharmID) ([]resource.Resource, error)) *MockNewCharmRepositoryResolveResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockNewCharmRepositoryResolveResourcesCall) DoAndReturn(f func(context.Context, []resource.Resource, charm.CharmID) ([]resource.Resource, error)) *MockNewCharmRepositoryResolveResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
