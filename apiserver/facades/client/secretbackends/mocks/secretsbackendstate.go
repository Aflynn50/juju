// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/secretbackends (interfaces: SecretsBackendState)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	secrets "github.com/juju/juju/core/secrets"
	state "github.com/juju/juju/state"
)

// MockSecretsBackendState is a mock of SecretsBackendState interface.
type MockSecretsBackendState struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsBackendStateMockRecorder
}

// MockSecretsBackendStateMockRecorder is the mock recorder for MockSecretsBackendState.
type MockSecretsBackendStateMockRecorder struct {
	mock *MockSecretsBackendState
}

// NewMockSecretsBackendState creates a new mock instance.
func NewMockSecretsBackendState(ctrl *gomock.Controller) *MockSecretsBackendState {
	mock := &MockSecretsBackendState{ctrl: ctrl}
	mock.recorder = &MockSecretsBackendStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsBackendState) EXPECT() *MockSecretsBackendStateMockRecorder {
	return m.recorder
}

// CreateSecretBackend mocks base method.
func (m *MockSecretsBackendState) CreateSecretBackend(arg0 state.CreateSecretBackendParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecretBackend", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSecretBackend indicates an expected call of CreateSecretBackend.
func (mr *MockSecretsBackendStateMockRecorder) CreateSecretBackend(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecretBackend", reflect.TypeOf((*MockSecretsBackendState)(nil).CreateSecretBackend), arg0)
}

// GetSecretBackendByID mocks base method.
func (m *MockSecretsBackendState) GetSecretBackendByID(arg0 string) (*secrets.SecretBackend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretBackendByID", arg0)
	ret0, _ := ret[0].(*secrets.SecretBackend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretBackendByID indicates an expected call of GetSecretBackendByID.
func (mr *MockSecretsBackendStateMockRecorder) GetSecretBackendByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretBackendByID", reflect.TypeOf((*MockSecretsBackendState)(nil).GetSecretBackendByID), arg0)
}

// ListSecretBackends mocks base method.
func (m *MockSecretsBackendState) ListSecretBackends() ([]*secrets.SecretBackend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSecretBackends")
	ret0, _ := ret[0].([]*secrets.SecretBackend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSecretBackends indicates an expected call of ListSecretBackends.
func (mr *MockSecretsBackendStateMockRecorder) ListSecretBackends() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSecretBackends", reflect.TypeOf((*MockSecretsBackendState)(nil).ListSecretBackends))
}
