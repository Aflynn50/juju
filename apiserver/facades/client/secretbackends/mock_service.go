// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/secretbackends (interfaces: SecretsBackendService)
//
// Generated by this command:
//
//	mockgen -package secretbackends -destination mock_service.go github.com/juju/juju/apiserver/facades/client/secretbackends SecretsBackendService
//

// Package secretbackends is a generated GoMock package.
package secretbackends

import (
	context "context"
	reflect "reflect"

	secrets "github.com/juju/juju/core/secrets"
	service "github.com/juju/juju/domain/secretbackend/service"
	gomock "go.uber.org/mock/gomock"
)

// MockSecretsBackendService is a mock of SecretsBackendService interface.
type MockSecretsBackendService struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsBackendServiceMockRecorder
}

// MockSecretsBackendServiceMockRecorder is the mock recorder for MockSecretsBackendService.
type MockSecretsBackendServiceMockRecorder struct {
	mock *MockSecretsBackendService
}

// NewMockSecretsBackendService creates a new mock instance.
func NewMockSecretsBackendService(ctrl *gomock.Controller) *MockSecretsBackendService {
	mock := &MockSecretsBackendService{ctrl: ctrl}
	mock.recorder = &MockSecretsBackendServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsBackendService) EXPECT() *MockSecretsBackendServiceMockRecorder {
	return m.recorder
}

// BackendSummaryInfo mocks base method.
func (m *MockSecretsBackendService) BackendSummaryInfo(arg0 context.Context, arg1, arg2 bool, arg3 ...string) ([]*service.SecretBackendInfo, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1, arg2}
	for _, a := range arg3 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "BackendSummaryInfo", varargs...)
	ret0, _ := ret[0].([]*service.SecretBackendInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BackendSummaryInfo indicates an expected call of BackendSummaryInfo.
func (mr *MockSecretsBackendServiceMockRecorder) BackendSummaryInfo(arg0, arg1, arg2 any, arg3 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1, arg2}, arg3...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackendSummaryInfo", reflect.TypeOf((*MockSecretsBackendService)(nil).BackendSummaryInfo), varargs...)
}

// CreateSecretBackend mocks base method.
func (m *MockSecretsBackendService) CreateSecretBackend(arg0 context.Context, arg1 secrets.SecretBackend) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecretBackend", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSecretBackend indicates an expected call of CreateSecretBackend.
func (mr *MockSecretsBackendServiceMockRecorder) CreateSecretBackend(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecretBackend", reflect.TypeOf((*MockSecretsBackendService)(nil).CreateSecretBackend), arg0, arg1)
}

// DeleteSecretBackend mocks base method.
func (m *MockSecretsBackendService) DeleteSecretBackend(arg0 context.Context, arg1 service.DeleteSecretBackendParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecretBackend", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecretBackend indicates an expected call of DeleteSecretBackend.
func (mr *MockSecretsBackendServiceMockRecorder) DeleteSecretBackend(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecretBackend", reflect.TypeOf((*MockSecretsBackendService)(nil).DeleteSecretBackend), arg0, arg1)
}

// GetSecretBackendByName mocks base method.
func (m *MockSecretsBackendService) GetSecretBackendByName(arg0 context.Context, arg1 string) (*secrets.SecretBackend, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretBackendByName", arg0, arg1)
	ret0, _ := ret[0].(*secrets.SecretBackend)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretBackendByName indicates an expected call of GetSecretBackendByName.
func (mr *MockSecretsBackendServiceMockRecorder) GetSecretBackendByName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretBackendByName", reflect.TypeOf((*MockSecretsBackendService)(nil).GetSecretBackendByName), arg0, arg1)
}

// UpdateSecretBackend mocks base method.
func (m *MockSecretsBackendService) UpdateSecretBackend(arg0 context.Context, arg1 service.UpdateSecretBackendParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecretBackend", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecretBackend indicates an expected call of UpdateSecretBackend.
func (mr *MockSecretsBackendServiceMockRecorder) UpdateSecretBackend(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecretBackend", reflect.TypeOf((*MockSecretsBackendService)(nil).UpdateSecretBackend), arg0, arg1)
}
