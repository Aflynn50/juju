// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/client/modelmanager (interfaces: ModelStatusAPI)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/status_mock.go github.com/juju/juju/apiserver/facades/client/modelmanager ModelStatusAPI
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	params "github.com/juju/juju/rpc/params"
	gomock "go.uber.org/mock/gomock"
)

// MockModelStatusAPI is a mock of ModelStatusAPI interface.
type MockModelStatusAPI struct {
	ctrl     *gomock.Controller
	recorder *MockModelStatusAPIMockRecorder
}

// MockModelStatusAPIMockRecorder is the mock recorder for MockModelStatusAPI.
type MockModelStatusAPIMockRecorder struct {
	mock *MockModelStatusAPI
}

// NewMockModelStatusAPI creates a new mock instance.
func NewMockModelStatusAPI(ctrl *gomock.Controller) *MockModelStatusAPI {
	mock := &MockModelStatusAPI{ctrl: ctrl}
	mock.recorder = &MockModelStatusAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelStatusAPI) EXPECT() *MockModelStatusAPIMockRecorder {
	return m.recorder
}

// ModelStatus mocks base method.
func (m *MockModelStatusAPI) ModelStatus(arg0 context.Context, arg1 params.Entities) (params.ModelStatusResults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelStatus", arg0, arg1)
	ret0, _ := ret[0].(params.ModelStatusResults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelStatus indicates an expected call of ModelStatus.
func (mr *MockModelStatusAPIMockRecorder) ModelStatus(arg0, arg1 any) *MockModelStatusAPIModelStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelStatus", reflect.TypeOf((*MockModelStatusAPI)(nil).ModelStatus), arg0, arg1)
	return &MockModelStatusAPIModelStatusCall{Call: call}
}

// MockModelStatusAPIModelStatusCall wrap *gomock.Call
type MockModelStatusAPIModelStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStatusAPIModelStatusCall) Return(arg0 params.ModelStatusResults, arg1 error) *MockModelStatusAPIModelStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStatusAPIModelStatusCall) Do(f func(context.Context, params.Entities) (params.ModelStatusResults, error)) *MockModelStatusAPIModelStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStatusAPIModelStatusCall) DoAndReturn(f func(context.Context, params.Entities) (params.ModelStatusResults, error)) *MockModelStatusAPIModelStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
