// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/upgradesteps (interfaces: ControllerConfigGetter,UpgradeStepsState,Machine,Unit)
//
// Generated by this command:
//
//	mockgen -typed -package upgradesteps_test -destination upgradesteps_mock_test.go github.com/juju/juju/apiserver/facades/agent/upgradesteps ControllerConfigGetter,UpgradeStepsState,Machine,Unit
//

// Package upgradesteps_test is a generated GoMock package.
package upgradesteps_test

import (
	context "context"
	reflect "reflect"

	controller "github.com/juju/juju/controller"
	instance "github.com/juju/juju/core/instance"
	status "github.com/juju/juju/core/status"
	state "github.com/juju/juju/state"
	names "github.com/juju/names/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerConfigGetter is a mock of ControllerConfigGetter interface.
type MockControllerConfigGetter struct {
	ctrl     *gomock.Controller
	recorder *MockControllerConfigGetterMockRecorder
}

// MockControllerConfigGetterMockRecorder is the mock recorder for MockControllerConfigGetter.
type MockControllerConfigGetterMockRecorder struct {
	mock *MockControllerConfigGetter
}

// NewMockControllerConfigGetter creates a new mock instance.
func NewMockControllerConfigGetter(ctrl *gomock.Controller) *MockControllerConfigGetter {
	mock := &MockControllerConfigGetter{ctrl: ctrl}
	mock.recorder = &MockControllerConfigGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerConfigGetter) EXPECT() *MockControllerConfigGetterMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerConfigGetter) ControllerConfig(arg0 context.Context) (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerConfigGetterMockRecorder) ControllerConfig(arg0 any) *MockControllerConfigGetterControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerConfigGetter)(nil).ControllerConfig), arg0)
	return &MockControllerConfigGetterControllerConfigCall{Call: call}
}

// MockControllerConfigGetterControllerConfigCall wrap *gomock.Call
type MockControllerConfigGetterControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigGetterControllerConfigCall) Return(arg0 controller.Config, arg1 error) *MockControllerConfigGetterControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigGetterControllerConfigCall) Do(f func(context.Context) (controller.Config, error)) *MockControllerConfigGetterControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigGetterControllerConfigCall) DoAndReturn(f func(context.Context) (controller.Config, error)) *MockControllerConfigGetterControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUpgradeStepsState is a mock of UpgradeStepsState interface.
type MockUpgradeStepsState struct {
	ctrl     *gomock.Controller
	recorder *MockUpgradeStepsStateMockRecorder
}

// MockUpgradeStepsStateMockRecorder is the mock recorder for MockUpgradeStepsState.
type MockUpgradeStepsStateMockRecorder struct {
	mock *MockUpgradeStepsState
}

// NewMockUpgradeStepsState creates a new mock instance.
func NewMockUpgradeStepsState(ctrl *gomock.Controller) *MockUpgradeStepsState {
	mock := &MockUpgradeStepsState{ctrl: ctrl}
	mock.recorder = &MockUpgradeStepsStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpgradeStepsState) EXPECT() *MockUpgradeStepsStateMockRecorder {
	return m.recorder
}

// ApplyOperation mocks base method.
func (m *MockUpgradeStepsState) ApplyOperation(arg0 state.ModelOperation) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyOperation", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyOperation indicates an expected call of ApplyOperation.
func (mr *MockUpgradeStepsStateMockRecorder) ApplyOperation(arg0 any) *MockUpgradeStepsStateApplyOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyOperation", reflect.TypeOf((*MockUpgradeStepsState)(nil).ApplyOperation), arg0)
	return &MockUpgradeStepsStateApplyOperationCall{Call: call}
}

// MockUpgradeStepsStateApplyOperationCall wrap *gomock.Call
type MockUpgradeStepsStateApplyOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeStepsStateApplyOperationCall) Return(arg0 error) *MockUpgradeStepsStateApplyOperationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeStepsStateApplyOperationCall) Do(f func(state.ModelOperation) error) *MockUpgradeStepsStateApplyOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeStepsStateApplyOperationCall) DoAndReturn(f func(state.ModelOperation) error) *MockUpgradeStepsStateApplyOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// FindEntity mocks base method.
func (m *MockUpgradeStepsState) FindEntity(arg0 names.Tag) (state.Entity, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindEntity", arg0)
	ret0, _ := ret[0].(state.Entity)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindEntity indicates an expected call of FindEntity.
func (mr *MockUpgradeStepsStateMockRecorder) FindEntity(arg0 any) *MockUpgradeStepsStateFindEntityCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindEntity", reflect.TypeOf((*MockUpgradeStepsState)(nil).FindEntity), arg0)
	return &MockUpgradeStepsStateFindEntityCall{Call: call}
}

// MockUpgradeStepsStateFindEntityCall wrap *gomock.Call
type MockUpgradeStepsStateFindEntityCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeStepsStateFindEntityCall) Return(arg0 state.Entity, arg1 error) *MockUpgradeStepsStateFindEntityCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeStepsStateFindEntityCall) Do(f func(names.Tag) (state.Entity, error)) *MockUpgradeStepsStateFindEntityCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeStepsStateFindEntityCall) DoAndReturn(f func(names.Tag) (state.Entity, error)) *MockUpgradeStepsStateFindEntityCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMachine is a mock of Machine interface.
type MockMachine struct {
	ctrl     *gomock.Controller
	recorder *MockMachineMockRecorder
}

// MockMachineMockRecorder is the mock recorder for MockMachine.
type MockMachineMockRecorder struct {
	mock *MockMachine
}

// NewMockMachine creates a new mock instance.
func NewMockMachine(ctrl *gomock.Controller) *MockMachine {
	mock := &MockMachine{ctrl: ctrl}
	mock.recorder = &MockMachineMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMachine) EXPECT() *MockMachineMockRecorder {
	return m.recorder
}

// ContainerType mocks base method.
func (m *MockMachine) ContainerType() instance.ContainerType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ContainerType")
	ret0, _ := ret[0].(instance.ContainerType)
	return ret0
}

// ContainerType indicates an expected call of ContainerType.
func (mr *MockMachineMockRecorder) ContainerType() *MockMachineContainerTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ContainerType", reflect.TypeOf((*MockMachine)(nil).ContainerType))
	return &MockMachineContainerTypeCall{Call: call}
}

// MockMachineContainerTypeCall wrap *gomock.Call
type MockMachineContainerTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineContainerTypeCall) Return(arg0 instance.ContainerType) *MockMachineContainerTypeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineContainerTypeCall) Do(f func() instance.ContainerType) *MockMachineContainerTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineContainerTypeCall) DoAndReturn(f func() instance.ContainerType) *MockMachineContainerTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModificationStatus mocks base method.
func (m *MockMachine) ModificationStatus() (status.StatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModificationStatus")
	ret0, _ := ret[0].(status.StatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModificationStatus indicates an expected call of ModificationStatus.
func (mr *MockMachineMockRecorder) ModificationStatus() *MockMachineModificationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModificationStatus", reflect.TypeOf((*MockMachine)(nil).ModificationStatus))
	return &MockMachineModificationStatusCall{Call: call}
}

// MockMachineModificationStatusCall wrap *gomock.Call
type MockMachineModificationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineModificationStatusCall) Return(arg0 status.StatusInfo, arg1 error) *MockMachineModificationStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineModificationStatusCall) Do(f func() (status.StatusInfo, error)) *MockMachineModificationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineModificationStatusCall) DoAndReturn(f func() (status.StatusInfo, error)) *MockMachineModificationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetModificationStatus mocks base method.
func (m *MockMachine) SetModificationStatus(arg0 status.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModificationStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModificationStatus indicates an expected call of SetModificationStatus.
func (mr *MockMachineMockRecorder) SetModificationStatus(arg0 any) *MockMachineSetModificationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModificationStatus", reflect.TypeOf((*MockMachine)(nil).SetModificationStatus), arg0)
	return &MockMachineSetModificationStatusCall{Call: call}
}

// MockMachineSetModificationStatusCall wrap *gomock.Call
type MockMachineSetModificationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMachineSetModificationStatusCall) Return(arg0 error) *MockMachineSetModificationStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMachineSetModificationStatusCall) Do(f func(status.StatusInfo) error) *MockMachineSetModificationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMachineSetModificationStatusCall) DoAndReturn(f func(status.StatusInfo) error) *MockMachineSetModificationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUnit is a mock of Unit interface.
type MockUnit struct {
	ctrl     *gomock.Controller
	recorder *MockUnitMockRecorder
}

// MockUnitMockRecorder is the mock recorder for MockUnit.
type MockUnitMockRecorder struct {
	mock *MockUnit
}

// NewMockUnit creates a new mock instance.
func NewMockUnit(ctrl *gomock.Controller) *MockUnit {
	mock := &MockUnit{ctrl: ctrl}
	mock.recorder = &MockUnitMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnit) EXPECT() *MockUnitMockRecorder {
	return m.recorder
}

// SetStateOperation mocks base method.
func (m *MockUnit) SetStateOperation(arg0 *state.UnitState, arg1 state.UnitStateSizeLimits) state.ModelOperation {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStateOperation", arg0, arg1)
	ret0, _ := ret[0].(state.ModelOperation)
	return ret0
}

// SetStateOperation indicates an expected call of SetStateOperation.
func (mr *MockUnitMockRecorder) SetStateOperation(arg0, arg1 any) *MockUnitSetStateOperationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStateOperation", reflect.TypeOf((*MockUnit)(nil).SetStateOperation), arg0, arg1)
	return &MockUnitSetStateOperationCall{Call: call}
}

// MockUnitSetStateOperationCall wrap *gomock.Call
type MockUnitSetStateOperationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnitSetStateOperationCall) Return(arg0 state.ModelOperation) *MockUnitSetStateOperationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnitSetStateOperationCall) Do(f func(*state.UnitState, state.UnitStateSizeLimits) state.ModelOperation) *MockUnitSetStateOperationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnitSetStateOperationCall) DoAndReturn(f func(*state.UnitState, state.UnitStateSizeLimits) state.ModelOperation) *MockUnitSetStateOperationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
