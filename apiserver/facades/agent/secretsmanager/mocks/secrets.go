// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/secrets.go -source service.go
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	leadership "github.com/juju/juju/core/leadership"
	secrets "github.com/juju/juju/core/secrets"
	watcher "github.com/juju/juju/core/watcher"
	service "github.com/juju/juju/domain/secret/service"
	gomock "go.uber.org/mock/gomock"
)

// MockSecretTriggers is a mock of SecretTriggers interface.
type MockSecretTriggers struct {
	ctrl     *gomock.Controller
	recorder *MockSecretTriggersMockRecorder
}

// MockSecretTriggersMockRecorder is the mock recorder for MockSecretTriggers.
type MockSecretTriggersMockRecorder struct {
	mock *MockSecretTriggers
}

// NewMockSecretTriggers creates a new mock instance.
func NewMockSecretTriggers(ctrl *gomock.Controller) *MockSecretTriggers {
	mock := &MockSecretTriggers{ctrl: ctrl}
	mock.recorder = &MockSecretTriggersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretTriggers) EXPECT() *MockSecretTriggersMockRecorder {
	return m.recorder
}

// SecretRotated mocks base method.
func (m *MockSecretTriggers) SecretRotated(ctx context.Context, uri *secrets.URI, originalRev int, skip bool, accessor service.SecretAccessor, token leadership.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SecretRotated", ctx, uri, originalRev, skip, accessor, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SecretRotated indicates an expected call of SecretRotated.
func (mr *MockSecretTriggersMockRecorder) SecretRotated(ctx, uri, originalRev, skip, accessor, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SecretRotated", reflect.TypeOf((*MockSecretTriggers)(nil).SecretRotated), ctx, uri, originalRev, skip, accessor, token)
}

// WatchObsolete mocks base method.
func (m *MockSecretTriggers) WatchObsolete(ctx context.Context, owners ...service.CharmSecretOwner) (watcher.StringsWatcher, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range owners {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchObsolete", varargs...)
	ret0, _ := ret[0].(watcher.StringsWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchObsolete indicates an expected call of WatchObsolete.
func (mr *MockSecretTriggersMockRecorder) WatchObsolete(ctx any, owners ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, owners...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchObsolete", reflect.TypeOf((*MockSecretTriggers)(nil).WatchObsolete), varargs...)
}

// WatchSecretRevisionsExpiryChanges mocks base method.
func (m *MockSecretTriggers) WatchSecretRevisionsExpiryChanges(ctx context.Context, owners ...service.CharmSecretOwner) (watcher.SecretTriggerWatcher, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range owners {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchSecretRevisionsExpiryChanges", varargs...)
	ret0, _ := ret[0].(watcher.SecretTriggerWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSecretRevisionsExpiryChanges indicates an expected call of WatchSecretRevisionsExpiryChanges.
func (mr *MockSecretTriggersMockRecorder) WatchSecretRevisionsExpiryChanges(ctx any, owners ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, owners...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSecretRevisionsExpiryChanges", reflect.TypeOf((*MockSecretTriggers)(nil).WatchSecretRevisionsExpiryChanges), varargs...)
}

// WatchSecretsRotationChanges mocks base method.
func (m *MockSecretTriggers) WatchSecretsRotationChanges(ctx context.Context, owners ...service.CharmSecretOwner) (watcher.SecretTriggerWatcher, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range owners {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchSecretsRotationChanges", varargs...)
	ret0, _ := ret[0].(watcher.SecretTriggerWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSecretsRotationChanges indicates an expected call of WatchSecretsRotationChanges.
func (mr *MockSecretTriggersMockRecorder) WatchSecretsRotationChanges(ctx any, owners ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, owners...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSecretsRotationChanges", reflect.TypeOf((*MockSecretTriggers)(nil).WatchSecretsRotationChanges), varargs...)
}

// MockSecretsConsumer is a mock of SecretsConsumer interface.
type MockSecretsConsumer struct {
	ctrl     *gomock.Controller
	recorder *MockSecretsConsumerMockRecorder
}

// MockSecretsConsumerMockRecorder is the mock recorder for MockSecretsConsumer.
type MockSecretsConsumerMockRecorder struct {
	mock *MockSecretsConsumer
}

// NewMockSecretsConsumer creates a new mock instance.
func NewMockSecretsConsumer(ctrl *gomock.Controller) *MockSecretsConsumer {
	mock := &MockSecretsConsumer{ctrl: ctrl}
	mock.recorder = &MockSecretsConsumerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretsConsumer) EXPECT() *MockSecretsConsumerMockRecorder {
	return m.recorder
}

// GetConsumedRevision mocks base method.
func (m *MockSecretsConsumer) GetConsumedRevision(ctx context.Context, uri *secrets.URI, unitName string, refresh, peek bool, labelToUpdate *string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumedRevision", ctx, uri, unitName, refresh, peek, labelToUpdate)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConsumedRevision indicates an expected call of GetConsumedRevision.
func (mr *MockSecretsConsumerMockRecorder) GetConsumedRevision(ctx, uri, unitName, refresh, peek, labelToUpdate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumedRevision", reflect.TypeOf((*MockSecretsConsumer)(nil).GetConsumedRevision), ctx, uri, unitName, refresh, peek, labelToUpdate)
}

// GetSecretConsumer mocks base method.
func (m *MockSecretsConsumer) GetSecretConsumer(ctx context.Context, uri *secrets.URI, unitName string) (*secrets.SecretConsumerMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretConsumer", ctx, uri, unitName)
	ret0, _ := ret[0].(*secrets.SecretConsumerMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretConsumer indicates an expected call of GetSecretConsumer.
func (mr *MockSecretsConsumerMockRecorder) GetSecretConsumer(ctx, uri, unitName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretConsumer", reflect.TypeOf((*MockSecretsConsumer)(nil).GetSecretConsumer), ctx, uri, unitName)
}

// GetSecretConsumerAndLatest mocks base method.
func (m *MockSecretsConsumer) GetSecretConsumerAndLatest(ctx context.Context, uri *secrets.URI, unitName string) (*secrets.SecretConsumerMetadata, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretConsumerAndLatest", ctx, uri, unitName)
	ret0, _ := ret[0].(*secrets.SecretConsumerMetadata)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSecretConsumerAndLatest indicates an expected call of GetSecretConsumerAndLatest.
func (mr *MockSecretsConsumerMockRecorder) GetSecretConsumerAndLatest(ctx, uri, unitName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretConsumerAndLatest", reflect.TypeOf((*MockSecretsConsumer)(nil).GetSecretConsumerAndLatest), ctx, uri, unitName)
}

// GetURIByConsumerLabel mocks base method.
func (m *MockSecretsConsumer) GetURIByConsumerLabel(ctx context.Context, label, unitName string) (*secrets.URI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURIByConsumerLabel", ctx, label, unitName)
	ret0, _ := ret[0].(*secrets.URI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURIByConsumerLabel indicates an expected call of GetURIByConsumerLabel.
func (mr *MockSecretsConsumerMockRecorder) GetURIByConsumerLabel(ctx, label, unitName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURIByConsumerLabel", reflect.TypeOf((*MockSecretsConsumer)(nil).GetURIByConsumerLabel), ctx, label, unitName)
}

// GrantSecretAccess mocks base method.
func (m *MockSecretsConsumer) GrantSecretAccess(arg0 context.Context, arg1 *secrets.URI, arg2 service.SecretAccessParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrantSecretAccess", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// GrantSecretAccess indicates an expected call of GrantSecretAccess.
func (mr *MockSecretsConsumerMockRecorder) GrantSecretAccess(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrantSecretAccess", reflect.TypeOf((*MockSecretsConsumer)(nil).GrantSecretAccess), arg0, arg1, arg2)
}

// RevokeSecretAccess mocks base method.
func (m *MockSecretsConsumer) RevokeSecretAccess(arg0 context.Context, arg1 *secrets.URI, arg2 service.SecretAccessParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RevokeSecretAccess", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RevokeSecretAccess indicates an expected call of RevokeSecretAccess.
func (mr *MockSecretsConsumerMockRecorder) RevokeSecretAccess(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RevokeSecretAccess", reflect.TypeOf((*MockSecretsConsumer)(nil).RevokeSecretAccess), arg0, arg1, arg2)
}

// SaveSecretConsumer mocks base method.
func (m *MockSecretsConsumer) SaveSecretConsumer(ctx context.Context, uri *secrets.URI, unitName string, md *secrets.SecretConsumerMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSecretConsumer", ctx, uri, unitName, md)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSecretConsumer indicates an expected call of SaveSecretConsumer.
func (mr *MockSecretsConsumerMockRecorder) SaveSecretConsumer(ctx, uri, unitName, md any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSecretConsumer", reflect.TypeOf((*MockSecretsConsumer)(nil).SaveSecretConsumer), ctx, uri, unitName, md)
}

// WatchConsumedSecretsChanges mocks base method.
func (m *MockSecretsConsumer) WatchConsumedSecretsChanges(ctx context.Context, unitName string) (watcher.StringsWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchConsumedSecretsChanges", ctx, unitName)
	ret0, _ := ret[0].(watcher.StringsWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchConsumedSecretsChanges indicates an expected call of WatchConsumedSecretsChanges.
func (mr *MockSecretsConsumerMockRecorder) WatchConsumedSecretsChanges(ctx, unitName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchConsumedSecretsChanges", reflect.TypeOf((*MockSecretsConsumer)(nil).WatchConsumedSecretsChanges), ctx, unitName)
}

// MockSecretService is a mock of SecretService interface.
type MockSecretService struct {
	ctrl     *gomock.Controller
	recorder *MockSecretServiceMockRecorder
}

// MockSecretServiceMockRecorder is the mock recorder for MockSecretService.
type MockSecretServiceMockRecorder struct {
	mock *MockSecretService
}

// NewMockSecretService creates a new mock instance.
func NewMockSecretService(ctrl *gomock.Controller) *MockSecretService {
	mock := &MockSecretService{ctrl: ctrl}
	mock.recorder = &MockSecretServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretService) EXPECT() *MockSecretServiceMockRecorder {
	return m.recorder
}

// ChangeSecretBackend mocks base method.
func (m *MockSecretService) ChangeSecretBackend(ctx context.Context, uri *secrets.URI, revision int, params service.ChangeSecretBackendParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangeSecretBackend", ctx, uri, revision, params)
	ret0, _ := ret[0].(error)
	return ret0
}

// ChangeSecretBackend indicates an expected call of ChangeSecretBackend.
func (mr *MockSecretServiceMockRecorder) ChangeSecretBackend(ctx, uri, revision, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangeSecretBackend", reflect.TypeOf((*MockSecretService)(nil).ChangeSecretBackend), ctx, uri, revision, params)
}

// CreateSecret mocks base method.
func (m *MockSecretService) CreateSecret(arg0 context.Context, arg1 *secrets.URI, arg2 service.CreateSecretParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSecret indicates an expected call of CreateSecret.
func (mr *MockSecretServiceMockRecorder) CreateSecret(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecret", reflect.TypeOf((*MockSecretService)(nil).CreateSecret), arg0, arg1, arg2)
}

// CreateSecretURIs mocks base method.
func (m *MockSecretService) CreateSecretURIs(ctx context.Context, count int) ([]*secrets.URI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSecretURIs", ctx, count)
	ret0, _ := ret[0].([]*secrets.URI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSecretURIs indicates an expected call of CreateSecretURIs.
func (mr *MockSecretServiceMockRecorder) CreateSecretURIs(ctx, count any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSecretURIs", reflect.TypeOf((*MockSecretService)(nil).CreateSecretURIs), ctx, count)
}

// DeleteSecret mocks base method.
func (m *MockSecretService) DeleteSecret(arg0 context.Context, arg1 *secrets.URI, arg2 service.DeleteSecretParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockSecretServiceMockRecorder) DeleteSecret(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockSecretService)(nil).DeleteSecret), arg0, arg1, arg2)
}

// GetSecretGrants mocks base method.
func (m *MockSecretService) GetSecretGrants(ctx context.Context, uri *secrets.URI, role secrets.SecretRole) ([]service.SecretAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretGrants", ctx, uri, role)
	ret0, _ := ret[0].([]service.SecretAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretGrants indicates an expected call of GetSecretGrants.
func (mr *MockSecretServiceMockRecorder) GetSecretGrants(ctx, uri, role any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretGrants", reflect.TypeOf((*MockSecretService)(nil).GetSecretGrants), ctx, uri, role)
}

// GetSecretValue mocks base method.
func (m *MockSecretService) GetSecretValue(arg0 context.Context, arg1 *secrets.URI, arg2 int, arg3 service.SecretAccessor) (secrets.SecretValue, *secrets.ValueRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretValue", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(secrets.SecretValue)
	ret1, _ := ret[1].(*secrets.ValueRef)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSecretValue indicates an expected call of GetSecretValue.
func (mr *MockSecretServiceMockRecorder) GetSecretValue(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretValue", reflect.TypeOf((*MockSecretService)(nil).GetSecretValue), arg0, arg1, arg2, arg3)
}

// ListCharmSecrets mocks base method.
func (m *MockSecretService) ListCharmSecrets(arg0 context.Context, arg1 ...service.CharmSecretOwner) ([]*secrets.SecretMetadata, [][]*secrets.SecretRevisionMetadata, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCharmSecrets", varargs...)
	ret0, _ := ret[0].([]*secrets.SecretMetadata)
	ret1, _ := ret[1].([][]*secrets.SecretRevisionMetadata)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ListCharmSecrets indicates an expected call of ListCharmSecrets.
func (mr *MockSecretServiceMockRecorder) ListCharmSecrets(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCharmSecrets", reflect.TypeOf((*MockSecretService)(nil).ListCharmSecrets), varargs...)
}

// ProcessSecretConsumerLabel mocks base method.
func (m *MockSecretService) ProcessSecretConsumerLabel(ctx context.Context, unitName string, uri *secrets.URI, label string, token leadership.Token) (*secrets.URI, *string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessSecretConsumerLabel", ctx, unitName, uri, label, token)
	ret0, _ := ret[0].(*secrets.URI)
	ret1, _ := ret[1].(*string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ProcessSecretConsumerLabel indicates an expected call of ProcessSecretConsumerLabel.
func (mr *MockSecretServiceMockRecorder) ProcessSecretConsumerLabel(ctx, unitName, uri, label, token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessSecretConsumerLabel", reflect.TypeOf((*MockSecretService)(nil).ProcessSecretConsumerLabel), ctx, unitName, uri, label, token)
}

// UpdateSecret mocks base method.
func (m *MockSecretService) UpdateSecret(arg0 context.Context, arg1 *secrets.URI, arg2 service.UpdateSecretParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSecret indicates an expected call of UpdateSecret.
func (mr *MockSecretServiceMockRecorder) UpdateSecret(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecret", reflect.TypeOf((*MockSecretService)(nil).UpdateSecret), arg0, arg1, arg2)
}
