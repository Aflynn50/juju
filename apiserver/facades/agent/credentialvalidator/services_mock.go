// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/credentialvalidator (interfaces: ModelCredentialService)
//
// Generated by this command:
//
//	mockgen -typed -package credentialvalidator -destination services_mock.go github.com/juju/juju/apiserver/facades/agent/credentialvalidator ModelCredentialService
//

// Package credentialvalidator is a generated GoMock package.
package credentialvalidator

import (
	context "context"
	reflect "reflect"

	credential "github.com/juju/juju/core/credential"
	gomock "go.uber.org/mock/gomock"
)

// MockModelCredentialService is a mock of ModelCredentialService interface.
type MockModelCredentialService struct {
	ctrl     *gomock.Controller
	recorder *MockModelCredentialServiceMockRecorder
}

// MockModelCredentialServiceMockRecorder is the mock recorder for MockModelCredentialService.
type MockModelCredentialServiceMockRecorder struct {
	mock *MockModelCredentialService
}

// NewMockModelCredentialService creates a new mock instance.
func NewMockModelCredentialService(ctrl *gomock.Controller) *MockModelCredentialService {
	mock := &MockModelCredentialService{ctrl: ctrl}
	mock.recorder = &MockModelCredentialServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelCredentialService) EXPECT() *MockModelCredentialServiceMockRecorder {
	return m.recorder
}

// GetModelCredentialStatus mocks base method.
func (m *MockModelCredentialService) GetModelCredentialStatus(arg0 context.Context) (credential.Key, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelCredentialStatus", arg0)
	ret0, _ := ret[0].(credential.Key)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetModelCredentialStatus indicates an expected call of GetModelCredentialStatus.
func (mr *MockModelCredentialServiceMockRecorder) GetModelCredentialStatus(arg0 any) *MockModelCredentialServiceGetModelCredentialStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelCredentialStatus", reflect.TypeOf((*MockModelCredentialService)(nil).GetModelCredentialStatus), arg0)
	return &MockModelCredentialServiceGetModelCredentialStatusCall{Call: call}
}

// MockModelCredentialServiceGetModelCredentialStatusCall wrap *gomock.Call
type MockModelCredentialServiceGetModelCredentialStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelCredentialServiceGetModelCredentialStatusCall) Return(arg0 credential.Key, arg1 bool, arg2 error) *MockModelCredentialServiceGetModelCredentialStatusCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelCredentialServiceGetModelCredentialStatusCall) Do(f func(context.Context) (credential.Key, bool, error)) *MockModelCredentialServiceGetModelCredentialStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelCredentialServiceGetModelCredentialStatusCall) DoAndReturn(f func(context.Context) (credential.Key, bool, error)) *MockModelCredentialServiceGetModelCredentialStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InvalidateModelCredential mocks base method.
func (m *MockModelCredentialService) InvalidateModelCredential(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InvalidateModelCredential", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// InvalidateModelCredential indicates an expected call of InvalidateModelCredential.
func (mr *MockModelCredentialServiceMockRecorder) InvalidateModelCredential(arg0, arg1 any) *MockModelCredentialServiceInvalidateModelCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvalidateModelCredential", reflect.TypeOf((*MockModelCredentialService)(nil).InvalidateModelCredential), arg0, arg1)
	return &MockModelCredentialServiceInvalidateModelCredentialCall{Call: call}
}

// MockModelCredentialServiceInvalidateModelCredentialCall wrap *gomock.Call
type MockModelCredentialServiceInvalidateModelCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelCredentialServiceInvalidateModelCredentialCall) Return(arg0 error) *MockModelCredentialServiceInvalidateModelCredentialCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelCredentialServiceInvalidateModelCredentialCall) Do(f func(context.Context, string) error) *MockModelCredentialServiceInvalidateModelCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelCredentialServiceInvalidateModelCredentialCall) DoAndReturn(f func(context.Context, string) error) *MockModelCredentialServiceInvalidateModelCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
