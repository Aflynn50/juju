// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/uniter (interfaces: ApplicationService,RelationService,ModelInfoService)
//
// Generated by this command:
//
//	mockgen -typed -package uniter -destination service_mock_test.go github.com/juju/juju/apiserver/facades/agent/uniter ApplicationService,RelationService,ModelInfoService
//

// Package uniter is a generated GoMock package.
package uniter

import (
	context "context"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	leadership "github.com/juju/juju/core/leadership"
	life "github.com/juju/juju/core/life"
	model "github.com/juju/juju/core/model"
	relation "github.com/juju/juju/core/relation"
	status "github.com/juju/juju/core/status"
	unit "github.com/juju/juju/core/unit"
	watcher "github.com/juju/juju/core/watcher"
	charm "github.com/juju/juju/domain/application/charm"
	relation0 "github.com/juju/juju/domain/relation"
	charm0 "github.com/juju/juju/internal/charm"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// DeleteUnit mocks base method.
func (m *MockApplicationService) DeleteUnit(arg0 context.Context, arg1 unit.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnit indicates an expected call of DeleteUnit.
func (mr *MockApplicationServiceMockRecorder) DeleteUnit(arg0, arg1 any) *MockApplicationServiceDeleteUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnit", reflect.TypeOf((*MockApplicationService)(nil).DeleteUnit), arg0, arg1)
	return &MockApplicationServiceDeleteUnitCall{Call: call}
}

// MockApplicationServiceDeleteUnitCall wrap *gomock.Call
type MockApplicationServiceDeleteUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceDeleteUnitCall) Return(arg0 error) *MockApplicationServiceDeleteUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceDeleteUnitCall) Do(f func(context.Context, unit.Name) error) *MockApplicationServiceDeleteUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceDeleteUnitCall) DoAndReturn(f func(context.Context, unit.Name) error) *MockApplicationServiceDeleteUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DestroyUnit mocks base method.
func (m *MockApplicationService) DestroyUnit(arg0 context.Context, arg1 unit.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DestroyUnit", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DestroyUnit indicates an expected call of DestroyUnit.
func (mr *MockApplicationServiceMockRecorder) DestroyUnit(arg0, arg1 any) *MockApplicationServiceDestroyUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DestroyUnit", reflect.TypeOf((*MockApplicationService)(nil).DestroyUnit), arg0, arg1)
	return &MockApplicationServiceDestroyUnitCall{Call: call}
}

// MockApplicationServiceDestroyUnitCall wrap *gomock.Call
type MockApplicationServiceDestroyUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceDestroyUnitCall) Return(arg0 error) *MockApplicationServiceDestroyUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceDestroyUnitCall) Do(f func(context.Context, unit.Name) error) *MockApplicationServiceDestroyUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceDestroyUnitCall) DoAndReturn(f func(context.Context, unit.Name) error) *MockApplicationServiceDestroyUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnsureUnitDead mocks base method.
func (m *MockApplicationService) EnsureUnitDead(arg0 context.Context, arg1 unit.Name, arg2 leadership.Revoker) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureUnitDead", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureUnitDead indicates an expected call of EnsureUnitDead.
func (mr *MockApplicationServiceMockRecorder) EnsureUnitDead(arg0, arg1, arg2 any) *MockApplicationServiceEnsureUnitDeadCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureUnitDead", reflect.TypeOf((*MockApplicationService)(nil).EnsureUnitDead), arg0, arg1, arg2)
	return &MockApplicationServiceEnsureUnitDeadCall{Call: call}
}

// MockApplicationServiceEnsureUnitDeadCall wrap *gomock.Call
type MockApplicationServiceEnsureUnitDeadCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceEnsureUnitDeadCall) Return(arg0 error) *MockApplicationServiceEnsureUnitDeadCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceEnsureUnitDeadCall) Do(f func(context.Context, unit.Name, leadership.Revoker) error) *MockApplicationServiceEnsureUnitDeadCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceEnsureUnitDeadCall) DoAndReturn(f func(context.Context, unit.Name, leadership.Revoker) error) *MockApplicationServiceEnsureUnitDeadCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationDisplayStatus mocks base method.
func (m *MockApplicationService) GetApplicationDisplayStatus(arg0 context.Context, arg1 application.ID) (*status.StatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationDisplayStatus", arg0, arg1)
	ret0, _ := ret[0].(*status.StatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationDisplayStatus indicates an expected call of GetApplicationDisplayStatus.
func (mr *MockApplicationServiceMockRecorder) GetApplicationDisplayStatus(arg0, arg1 any) *MockApplicationServiceGetApplicationDisplayStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationDisplayStatus", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationDisplayStatus), arg0, arg1)
	return &MockApplicationServiceGetApplicationDisplayStatusCall{Call: call}
}

// MockApplicationServiceGetApplicationDisplayStatusCall wrap *gomock.Call
type MockApplicationServiceGetApplicationDisplayStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationDisplayStatusCall) Return(arg0 *status.StatusInfo, arg1 error) *MockApplicationServiceGetApplicationDisplayStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationDisplayStatusCall) Do(f func(context.Context, application.ID) (*status.StatusInfo, error)) *MockApplicationServiceGetApplicationDisplayStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationDisplayStatusCall) DoAndReturn(f func(context.Context, application.ID) (*status.StatusInfo, error)) *MockApplicationServiceGetApplicationDisplayStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationIDByName mocks base method.
func (m *MockApplicationService) GetApplicationIDByName(arg0 context.Context, arg1 string) (application.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationIDByName", arg0, arg1)
	ret0, _ := ret[0].(application.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationIDByName indicates an expected call of GetApplicationIDByName.
func (mr *MockApplicationServiceMockRecorder) GetApplicationIDByName(arg0, arg1 any) *MockApplicationServiceGetApplicationIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationIDByName", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationIDByName), arg0, arg1)
	return &MockApplicationServiceGetApplicationIDByNameCall{Call: call}
}

// MockApplicationServiceGetApplicationIDByNameCall wrap *gomock.Call
type MockApplicationServiceGetApplicationIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationIDByNameCall) Return(arg0 application.ID, arg1 error) *MockApplicationServiceGetApplicationIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationIDByNameCall) Do(f func(context.Context, string) (application.ID, error)) *MockApplicationServiceGetApplicationIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationIDByNameCall) DoAndReturn(f func(context.Context, string) (application.ID, error)) *MockApplicationServiceGetApplicationIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationIDByUnitName mocks base method.
func (m *MockApplicationService) GetApplicationIDByUnitName(arg0 context.Context, arg1 unit.Name) (application.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationIDByUnitName", arg0, arg1)
	ret0, _ := ret[0].(application.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationIDByUnitName indicates an expected call of GetApplicationIDByUnitName.
func (mr *MockApplicationServiceMockRecorder) GetApplicationIDByUnitName(arg0, arg1 any) *MockApplicationServiceGetApplicationIDByUnitNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationIDByUnitName", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationIDByUnitName), arg0, arg1)
	return &MockApplicationServiceGetApplicationIDByUnitNameCall{Call: call}
}

// MockApplicationServiceGetApplicationIDByUnitNameCall wrap *gomock.Call
type MockApplicationServiceGetApplicationIDByUnitNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationIDByUnitNameCall) Return(arg0 application.ID, arg1 error) *MockApplicationServiceGetApplicationIDByUnitNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationIDByUnitNameCall) Do(f func(context.Context, unit.Name) (application.ID, error)) *MockApplicationServiceGetApplicationIDByUnitNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationIDByUnitNameCall) DoAndReturn(f func(context.Context, unit.Name) (application.ID, error)) *MockApplicationServiceGetApplicationIDByUnitNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationLife mocks base method.
func (m *MockApplicationService) GetApplicationLife(arg0 context.Context, arg1 string) (life.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationLife", arg0, arg1)
	ret0, _ := ret[0].(life.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationLife indicates an expected call of GetApplicationLife.
func (mr *MockApplicationServiceMockRecorder) GetApplicationLife(arg0, arg1 any) *MockApplicationServiceGetApplicationLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationLife", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationLife), arg0, arg1)
	return &MockApplicationServiceGetApplicationLifeCall{Call: call}
}

// MockApplicationServiceGetApplicationLifeCall wrap *gomock.Call
type MockApplicationServiceGetApplicationLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationLifeCall) Return(arg0 life.Value, arg1 error) *MockApplicationServiceGetApplicationLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationLifeCall) Do(f func(context.Context, string) (life.Value, error)) *MockApplicationServiceGetApplicationLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationLifeCall) DoAndReturn(f func(context.Context, string) (life.Value, error)) *MockApplicationServiceGetApplicationLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAvailableCharmArchiveSHA256 mocks base method.
func (m *MockApplicationService) GetAvailableCharmArchiveSHA256(arg0 context.Context, arg1 charm.CharmLocator) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvailableCharmArchiveSHA256", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAvailableCharmArchiveSHA256 indicates an expected call of GetAvailableCharmArchiveSHA256.
func (mr *MockApplicationServiceMockRecorder) GetAvailableCharmArchiveSHA256(arg0, arg1 any) *MockApplicationServiceGetAvailableCharmArchiveSHA256Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvailableCharmArchiveSHA256", reflect.TypeOf((*MockApplicationService)(nil).GetAvailableCharmArchiveSHA256), arg0, arg1)
	return &MockApplicationServiceGetAvailableCharmArchiveSHA256Call{Call: call}
}

// MockApplicationServiceGetAvailableCharmArchiveSHA256Call wrap *gomock.Call
type MockApplicationServiceGetAvailableCharmArchiveSHA256Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetAvailableCharmArchiveSHA256Call) Return(arg0 string, arg1 error) *MockApplicationServiceGetAvailableCharmArchiveSHA256Call {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetAvailableCharmArchiveSHA256Call) Do(f func(context.Context, charm.CharmLocator) (string, error)) *MockApplicationServiceGetAvailableCharmArchiveSHA256Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetAvailableCharmArchiveSHA256Call) DoAndReturn(f func(context.Context, charm.CharmLocator) (string, error)) *MockApplicationServiceGetAvailableCharmArchiveSHA256Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmLXDProfile mocks base method.
func (m *MockApplicationService) GetCharmLXDProfile(arg0 context.Context, arg1 charm.CharmLocator) (charm0.LXDProfile, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmLXDProfile", arg0, arg1)
	ret0, _ := ret[0].(charm0.LXDProfile)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCharmLXDProfile indicates an expected call of GetCharmLXDProfile.
func (mr *MockApplicationServiceMockRecorder) GetCharmLXDProfile(arg0, arg1 any) *MockApplicationServiceGetCharmLXDProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmLXDProfile", reflect.TypeOf((*MockApplicationService)(nil).GetCharmLXDProfile), arg0, arg1)
	return &MockApplicationServiceGetCharmLXDProfileCall{Call: call}
}

// MockApplicationServiceGetCharmLXDProfileCall wrap *gomock.Call
type MockApplicationServiceGetCharmLXDProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetCharmLXDProfileCall) Return(arg0 charm0.LXDProfile, arg1 int, arg2 error) *MockApplicationServiceGetCharmLXDProfileCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetCharmLXDProfileCall) Do(f func(context.Context, charm.CharmLocator) (charm0.LXDProfile, int, error)) *MockApplicationServiceGetCharmLXDProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetCharmLXDProfileCall) DoAndReturn(f func(context.Context, charm.CharmLocator) (charm0.LXDProfile, int, error)) *MockApplicationServiceGetCharmLXDProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmModifiedVersion mocks base method.
func (m *MockApplicationService) GetCharmModifiedVersion(arg0 context.Context, arg1 application.ID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmModifiedVersion", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmModifiedVersion indicates an expected call of GetCharmModifiedVersion.
func (mr *MockApplicationServiceMockRecorder) GetCharmModifiedVersion(arg0, arg1 any) *MockApplicationServiceGetCharmModifiedVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmModifiedVersion", reflect.TypeOf((*MockApplicationService)(nil).GetCharmModifiedVersion), arg0, arg1)
	return &MockApplicationServiceGetCharmModifiedVersionCall{Call: call}
}

// MockApplicationServiceGetCharmModifiedVersionCall wrap *gomock.Call
type MockApplicationServiceGetCharmModifiedVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetCharmModifiedVersionCall) Return(arg0 int, arg1 error) *MockApplicationServiceGetCharmModifiedVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetCharmModifiedVersionCall) Do(f func(context.Context, application.ID) (int, error)) *MockApplicationServiceGetCharmModifiedVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetCharmModifiedVersionCall) DoAndReturn(f func(context.Context, application.ID) (int, error)) *MockApplicationServiceGetCharmModifiedVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitAgentStatus mocks base method.
func (m *MockApplicationService) GetUnitAgentStatus(arg0 context.Context, arg1 unit.Name) (*status.StatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitAgentStatus", arg0, arg1)
	ret0, _ := ret[0].(*status.StatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitAgentStatus indicates an expected call of GetUnitAgentStatus.
func (mr *MockApplicationServiceMockRecorder) GetUnitAgentStatus(arg0, arg1 any) *MockApplicationServiceGetUnitAgentStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitAgentStatus", reflect.TypeOf((*MockApplicationService)(nil).GetUnitAgentStatus), arg0, arg1)
	return &MockApplicationServiceGetUnitAgentStatusCall{Call: call}
}

// MockApplicationServiceGetUnitAgentStatusCall wrap *gomock.Call
type MockApplicationServiceGetUnitAgentStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitAgentStatusCall) Return(arg0 *status.StatusInfo, arg1 error) *MockApplicationServiceGetUnitAgentStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitAgentStatusCall) Do(f func(context.Context, unit.Name) (*status.StatusInfo, error)) *MockApplicationServiceGetUnitAgentStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitAgentStatusCall) DoAndReturn(f func(context.Context, unit.Name) (*status.StatusInfo, error)) *MockApplicationServiceGetUnitAgentStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitLife mocks base method.
func (m *MockApplicationService) GetUnitLife(arg0 context.Context, arg1 unit.Name) (life.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitLife", arg0, arg1)
	ret0, _ := ret[0].(life.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitLife indicates an expected call of GetUnitLife.
func (mr *MockApplicationServiceMockRecorder) GetUnitLife(arg0, arg1 any) *MockApplicationServiceGetUnitLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitLife", reflect.TypeOf((*MockApplicationService)(nil).GetUnitLife), arg0, arg1)
	return &MockApplicationServiceGetUnitLifeCall{Call: call}
}

// MockApplicationServiceGetUnitLifeCall wrap *gomock.Call
type MockApplicationServiceGetUnitLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitLifeCall) Return(arg0 life.Value, arg1 error) *MockApplicationServiceGetUnitLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitLifeCall) Do(f func(context.Context, unit.Name) (life.Value, error)) *MockApplicationServiceGetUnitLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitLifeCall) DoAndReturn(f func(context.Context, unit.Name) (life.Value, error)) *MockApplicationServiceGetUnitLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUID mocks base method.
func (m *MockApplicationService) GetUnitUUID(arg0 context.Context, arg1 unit.Name) (unit.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUID", arg0, arg1)
	ret0, _ := ret[0].(unit.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUID indicates an expected call of GetUnitUUID.
func (mr *MockApplicationServiceMockRecorder) GetUnitUUID(arg0, arg1 any) *MockApplicationServiceGetUnitUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUID", reflect.TypeOf((*MockApplicationService)(nil).GetUnitUUID), arg0, arg1)
	return &MockApplicationServiceGetUnitUUIDCall{Call: call}
}

// MockApplicationServiceGetUnitUUIDCall wrap *gomock.Call
type MockApplicationServiceGetUnitUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitUUIDCall) Return(arg0 unit.UUID, arg1 error) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitUUIDCall) Do(f func(context.Context, unit.Name) (unit.UUID, error)) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitUUIDCall) DoAndReturn(f func(context.Context, unit.Name) (unit.UUID, error)) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitWorkloadStatus mocks base method.
func (m *MockApplicationService) GetUnitWorkloadStatus(arg0 context.Context, arg1 unit.Name) (*status.StatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitWorkloadStatus", arg0, arg1)
	ret0, _ := ret[0].(*status.StatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitWorkloadStatus indicates an expected call of GetUnitWorkloadStatus.
func (mr *MockApplicationServiceMockRecorder) GetUnitWorkloadStatus(arg0, arg1 any) *MockApplicationServiceGetUnitWorkloadStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitWorkloadStatus", reflect.TypeOf((*MockApplicationService)(nil).GetUnitWorkloadStatus), arg0, arg1)
	return &MockApplicationServiceGetUnitWorkloadStatusCall{Call: call}
}

// MockApplicationServiceGetUnitWorkloadStatusCall wrap *gomock.Call
type MockApplicationServiceGetUnitWorkloadStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitWorkloadStatusCall) Return(arg0 *status.StatusInfo, arg1 error) *MockApplicationServiceGetUnitWorkloadStatusCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitWorkloadStatusCall) Do(f func(context.Context, unit.Name) (*status.StatusInfo, error)) *MockApplicationServiceGetUnitWorkloadStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitWorkloadStatusCall) DoAndReturn(f func(context.Context, unit.Name) (*status.StatusInfo, error)) *MockApplicationServiceGetUnitWorkloadStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitWorkloadStatusesForApplication mocks base method.
func (m *MockApplicationService) GetUnitWorkloadStatusesForApplication(arg0 context.Context, arg1 application.ID) (map[unit.Name]status.StatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitWorkloadStatusesForApplication", arg0, arg1)
	ret0, _ := ret[0].(map[unit.Name]status.StatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitWorkloadStatusesForApplication indicates an expected call of GetUnitWorkloadStatusesForApplication.
func (mr *MockApplicationServiceMockRecorder) GetUnitWorkloadStatusesForApplication(arg0, arg1 any) *MockApplicationServiceGetUnitWorkloadStatusesForApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitWorkloadStatusesForApplication", reflect.TypeOf((*MockApplicationService)(nil).GetUnitWorkloadStatusesForApplication), arg0, arg1)
	return &MockApplicationServiceGetUnitWorkloadStatusesForApplicationCall{Call: call}
}

// MockApplicationServiceGetUnitWorkloadStatusesForApplicationCall wrap *gomock.Call
type MockApplicationServiceGetUnitWorkloadStatusesForApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitWorkloadStatusesForApplicationCall) Return(arg0 map[unit.Name]status.StatusInfo, arg1 error) *MockApplicationServiceGetUnitWorkloadStatusesForApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitWorkloadStatusesForApplicationCall) Do(f func(context.Context, application.ID) (map[unit.Name]status.StatusInfo, error)) *MockApplicationServiceGetUnitWorkloadStatusesForApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitWorkloadStatusesForApplicationCall) DoAndReturn(f func(context.Context, application.ID) (map[unit.Name]status.StatusInfo, error)) *MockApplicationServiceGetUnitWorkloadStatusesForApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitAgentStatus mocks base method.
func (m *MockApplicationService) SetUnitAgentStatus(arg0 context.Context, arg1 unit.Name, arg2 *status.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitAgentStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitAgentStatus indicates an expected call of SetUnitAgentStatus.
func (mr *MockApplicationServiceMockRecorder) SetUnitAgentStatus(arg0, arg1, arg2 any) *MockApplicationServiceSetUnitAgentStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitAgentStatus", reflect.TypeOf((*MockApplicationService)(nil).SetUnitAgentStatus), arg0, arg1, arg2)
	return &MockApplicationServiceSetUnitAgentStatusCall{Call: call}
}

// MockApplicationServiceSetUnitAgentStatusCall wrap *gomock.Call
type MockApplicationServiceSetUnitAgentStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceSetUnitAgentStatusCall) Return(arg0 error) *MockApplicationServiceSetUnitAgentStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceSetUnitAgentStatusCall) Do(f func(context.Context, unit.Name, *status.StatusInfo) error) *MockApplicationServiceSetUnitAgentStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceSetUnitAgentStatusCall) DoAndReturn(f func(context.Context, unit.Name, *status.StatusInfo) error) *MockApplicationServiceSetUnitAgentStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitWorkloadStatus mocks base method.
func (m *MockApplicationService) SetUnitWorkloadStatus(arg0 context.Context, arg1 unit.Name, arg2 *status.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitWorkloadStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitWorkloadStatus indicates an expected call of SetUnitWorkloadStatus.
func (mr *MockApplicationServiceMockRecorder) SetUnitWorkloadStatus(arg0, arg1, arg2 any) *MockApplicationServiceSetUnitWorkloadStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitWorkloadStatus", reflect.TypeOf((*MockApplicationService)(nil).SetUnitWorkloadStatus), arg0, arg1, arg2)
	return &MockApplicationServiceSetUnitWorkloadStatusCall{Call: call}
}

// MockApplicationServiceSetUnitWorkloadStatusCall wrap *gomock.Call
type MockApplicationServiceSetUnitWorkloadStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceSetUnitWorkloadStatusCall) Return(arg0 error) *MockApplicationServiceSetUnitWorkloadStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceSetUnitWorkloadStatusCall) Do(f func(context.Context, unit.Name, *status.StatusInfo) error) *MockApplicationServiceSetUnitWorkloadStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceSetUnitWorkloadStatusCall) DoAndReturn(f func(context.Context, unit.Name, *status.StatusInfo) error) *MockApplicationServiceSetUnitWorkloadStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchApplication mocks base method.
func (m *MockApplicationService) WatchApplication(arg0 context.Context, arg1 string) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchApplication", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchApplication indicates an expected call of WatchApplication.
func (mr *MockApplicationServiceMockRecorder) WatchApplication(arg0, arg1 any) *MockApplicationServiceWatchApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApplication", reflect.TypeOf((*MockApplicationService)(nil).WatchApplication), arg0, arg1)
	return &MockApplicationServiceWatchApplicationCall{Call: call}
}

// MockApplicationServiceWatchApplicationCall wrap *gomock.Call
type MockApplicationServiceWatchApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceWatchApplicationCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockApplicationServiceWatchApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceWatchApplicationCall) Do(f func(context.Context, string) (watcher.Watcher[struct{}], error)) *MockApplicationServiceWatchApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceWatchApplicationCall) DoAndReturn(f func(context.Context, string) (watcher.Watcher[struct{}], error)) *MockApplicationServiceWatchApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockRelationService is a mock of RelationService interface.
type MockRelationService struct {
	ctrl     *gomock.Controller
	recorder *MockRelationServiceMockRecorder
}

// MockRelationServiceMockRecorder is the mock recorder for MockRelationService.
type MockRelationServiceMockRecorder struct {
	mock *MockRelationService
}

// NewMockRelationService creates a new mock instance.
func NewMockRelationService(ctrl *gomock.Controller) *MockRelationService {
	mock := &MockRelationService{ctrl: ctrl}
	mock.recorder = &MockRelationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRelationService) EXPECT() *MockRelationServiceMockRecorder {
	return m.recorder
}

// GetLocalRelationApplicationSettings mocks base method.
func (m *MockRelationService) GetLocalRelationApplicationSettings(arg0 context.Context, arg1 unit.Name, arg2 relation.UUID, arg3 application.ID) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalRelationApplicationSettings", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalRelationApplicationSettings indicates an expected call of GetLocalRelationApplicationSettings.
func (mr *MockRelationServiceMockRecorder) GetLocalRelationApplicationSettings(arg0, arg1, arg2, arg3 any) *MockRelationServiceGetLocalRelationApplicationSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalRelationApplicationSettings", reflect.TypeOf((*MockRelationService)(nil).GetLocalRelationApplicationSettings), arg0, arg1, arg2, arg3)
	return &MockRelationServiceGetLocalRelationApplicationSettingsCall{Call: call}
}

// MockRelationServiceGetLocalRelationApplicationSettingsCall wrap *gomock.Call
type MockRelationServiceGetLocalRelationApplicationSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetLocalRelationApplicationSettingsCall) Return(arg0 map[string]string, arg1 error) *MockRelationServiceGetLocalRelationApplicationSettingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetLocalRelationApplicationSettingsCall) Do(f func(context.Context, unit.Name, relation.UUID, application.ID) (map[string]string, error)) *MockRelationServiceGetLocalRelationApplicationSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetLocalRelationApplicationSettingsCall) DoAndReturn(f func(context.Context, unit.Name, relation.UUID, application.ID) (map[string]string, error)) *MockRelationServiceGetLocalRelationApplicationSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationDetails mocks base method.
func (m *MockRelationService) GetRelationDetails(arg0 context.Context, arg1 int) (relation0.RelationDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationDetails", arg0, arg1)
	ret0, _ := ret[0].(relation0.RelationDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationDetails indicates an expected call of GetRelationDetails.
func (mr *MockRelationServiceMockRecorder) GetRelationDetails(arg0, arg1 any) *MockRelationServiceGetRelationDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationDetails", reflect.TypeOf((*MockRelationService)(nil).GetRelationDetails), arg0, arg1)
	return &MockRelationServiceGetRelationDetailsCall{Call: call}
}

// MockRelationServiceGetRelationDetailsCall wrap *gomock.Call
type MockRelationServiceGetRelationDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationDetailsCall) Return(arg0 relation0.RelationDetails, arg1 error) *MockRelationServiceGetRelationDetailsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationDetailsCall) Do(f func(context.Context, int) (relation0.RelationDetails, error)) *MockRelationServiceGetRelationDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationDetailsCall) DoAndReturn(f func(context.Context, int) (relation0.RelationDetails, error)) *MockRelationServiceGetRelationDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationDetailsForUnit mocks base method.
func (m *MockRelationService) GetRelationDetailsForUnit(arg0 context.Context, arg1 relation.UUID, arg2 string) (relation0.RelationDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationDetailsForUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation0.RelationDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationDetailsForUnit indicates an expected call of GetRelationDetailsForUnit.
func (mr *MockRelationServiceMockRecorder) GetRelationDetailsForUnit(arg0, arg1, arg2 any) *MockRelationServiceGetRelationDetailsForUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationDetailsForUnit", reflect.TypeOf((*MockRelationService)(nil).GetRelationDetailsForUnit), arg0, arg1, arg2)
	return &MockRelationServiceGetRelationDetailsForUnitCall{Call: call}
}

// MockRelationServiceGetRelationDetailsForUnitCall wrap *gomock.Call
type MockRelationServiceGetRelationDetailsForUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationDetailsForUnitCall) Return(arg0 relation0.RelationDetails, arg1 error) *MockRelationServiceGetRelationDetailsForUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationDetailsForUnitCall) Do(f func(context.Context, relation.UUID, string) (relation0.RelationDetails, error)) *MockRelationServiceGetRelationDetailsForUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationDetailsForUnitCall) DoAndReturn(f func(context.Context, relation.UUID, string) (relation0.RelationDetails, error)) *MockRelationServiceGetRelationDetailsForUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUUIDFromKey mocks base method.
func (m *MockRelationService) GetRelationUUIDFromKey(arg0 context.Context, arg1 relation.Key) (relation.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUUIDFromKey", arg0, arg1)
	ret0, _ := ret[0].(relation.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUUIDFromKey indicates an expected call of GetRelationUUIDFromKey.
func (mr *MockRelationServiceMockRecorder) GetRelationUUIDFromKey(arg0, arg1 any) *MockRelationServiceGetRelationUUIDFromKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUUIDFromKey", reflect.TypeOf((*MockRelationService)(nil).GetRelationUUIDFromKey), arg0, arg1)
	return &MockRelationServiceGetRelationUUIDFromKeyCall{Call: call}
}

// MockRelationServiceGetRelationUUIDFromKeyCall wrap *gomock.Call
type MockRelationServiceGetRelationUUIDFromKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationUUIDFromKeyCall) Return(arg0 relation.UUID, arg1 error) *MockRelationServiceGetRelationUUIDFromKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationUUIDFromKeyCall) Do(f func(context.Context, relation.Key) (relation.UUID, error)) *MockRelationServiceGetRelationUUIDFromKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationUUIDFromKeyCall) DoAndReturn(f func(context.Context, relation.Key) (relation.UUID, error)) *MockRelationServiceGetRelationUUIDFromKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUnit mocks base method.
func (m *MockRelationService) GetRelationUnit(arg0 context.Context, arg1 relation.UUID, arg2 string) (relation.UnitUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation.UnitUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUnit indicates an expected call of GetRelationUnit.
func (mr *MockRelationServiceMockRecorder) GetRelationUnit(arg0, arg1, arg2 any) *MockRelationServiceGetRelationUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUnit", reflect.TypeOf((*MockRelationService)(nil).GetRelationUnit), arg0, arg1, arg2)
	return &MockRelationServiceGetRelationUnitCall{Call: call}
}

// MockRelationServiceGetRelationUnitCall wrap *gomock.Call
type MockRelationServiceGetRelationUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationUnitCall) Return(arg0 relation.UnitUUID, arg1 error) *MockRelationServiceGetRelationUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationUnitCall) Do(f func(context.Context, relation.UUID, string) (relation.UnitUUID, error)) *MockRelationServiceGetRelationUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationUnitCall) DoAndReturn(f func(context.Context, relation.UUID, string) (relation.UnitUUID, error)) *MockRelationServiceGetRelationUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUnitSettings mocks base method.
func (m *MockRelationService) GetRelationUnitSettings(arg0 context.Context, arg1 relation.UnitUUID) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUnitSettings", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUnitSettings indicates an expected call of GetRelationUnitSettings.
func (mr *MockRelationServiceMockRecorder) GetRelationUnitSettings(arg0, arg1 any) *MockRelationServiceGetRelationUnitSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUnitSettings", reflect.TypeOf((*MockRelationService)(nil).GetRelationUnitSettings), arg0, arg1)
	return &MockRelationServiceGetRelationUnitSettingsCall{Call: call}
}

// MockRelationServiceGetRelationUnitSettingsCall wrap *gomock.Call
type MockRelationServiceGetRelationUnitSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRelationUnitSettingsCall) Return(arg0 map[string]string, arg1 error) *MockRelationServiceGetRelationUnitSettingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRelationUnitSettingsCall) Do(f func(context.Context, relation.UnitUUID) (map[string]string, error)) *MockRelationServiceGetRelationUnitSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRelationUnitSettingsCall) DoAndReturn(f func(context.Context, relation.UnitUUID) (map[string]string, error)) *MockRelationServiceGetRelationUnitSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRemoteRelationApplicationSettings mocks base method.
func (m *MockRelationService) GetRemoteRelationApplicationSettings(arg0 context.Context, arg1 relation.UUID, arg2 application.ID) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteRelationApplicationSettings", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteRelationApplicationSettings indicates an expected call of GetRemoteRelationApplicationSettings.
func (mr *MockRelationServiceMockRecorder) GetRemoteRelationApplicationSettings(arg0, arg1, arg2 any) *MockRelationServiceGetRemoteRelationApplicationSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteRelationApplicationSettings", reflect.TypeOf((*MockRelationService)(nil).GetRemoteRelationApplicationSettings), arg0, arg1, arg2)
	return &MockRelationServiceGetRemoteRelationApplicationSettingsCall{Call: call}
}

// MockRelationServiceGetRemoteRelationApplicationSettingsCall wrap *gomock.Call
type MockRelationServiceGetRemoteRelationApplicationSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockRelationServiceGetRemoteRelationApplicationSettingsCall) Return(arg0 map[string]string, arg1 error) *MockRelationServiceGetRemoteRelationApplicationSettingsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockRelationServiceGetRemoteRelationApplicationSettingsCall) Do(f func(context.Context, relation.UUID, application.ID) (map[string]string, error)) *MockRelationServiceGetRemoteRelationApplicationSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockRelationServiceGetRemoteRelationApplicationSettingsCall) DoAndReturn(f func(context.Context, relation.UUID, application.ID) (map[string]string, error)) *MockRelationServiceGetRemoteRelationApplicationSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelInfoService is a mock of ModelInfoService interface.
type MockModelInfoService struct {
	ctrl     *gomock.Controller
	recorder *MockModelInfoServiceMockRecorder
}

// MockModelInfoServiceMockRecorder is the mock recorder for MockModelInfoService.
type MockModelInfoServiceMockRecorder struct {
	mock *MockModelInfoService
}

// NewMockModelInfoService creates a new mock instance.
func NewMockModelInfoService(ctrl *gomock.Controller) *MockModelInfoService {
	mock := &MockModelInfoService{ctrl: ctrl}
	mock.recorder = &MockModelInfoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelInfoService) EXPECT() *MockModelInfoServiceMockRecorder {
	return m.recorder
}

// GetModelInfo mocks base method.
func (m *MockModelInfoService) GetModelInfo(arg0 context.Context) (model.ModelInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelInfo", arg0)
	ret0, _ := ret[0].(model.ModelInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelInfo indicates an expected call of GetModelInfo.
func (mr *MockModelInfoServiceMockRecorder) GetModelInfo(arg0 any) *MockModelInfoServiceGetModelInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelInfo", reflect.TypeOf((*MockModelInfoService)(nil).GetModelInfo), arg0)
	return &MockModelInfoServiceGetModelInfoCall{Call: call}
}

// MockModelInfoServiceGetModelInfoCall wrap *gomock.Call
type MockModelInfoServiceGetModelInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelInfoServiceGetModelInfoCall) Return(arg0 model.ModelInfo, arg1 error) *MockModelInfoServiceGetModelInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelInfoServiceGetModelInfoCall) Do(f func(context.Context) (model.ModelInfo, error)) *MockModelInfoServiceGetModelInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelInfoServiceGetModelInfoCall) DoAndReturn(f func(context.Context) (model.ModelInfo, error)) *MockModelInfoServiceGetModelInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
