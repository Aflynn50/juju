// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/agent/caasagent (interfaces: ModelService,ModelProviderService)
//
// Generated by this command:
//
//	mockgen -typed -package caasagent_test -destination services_mock_test.go github.com/juju/juju/apiserver/facades/agent/caasagent ModelService,ModelProviderService
//

// Package caasagent_test is a generated GoMock package.
package caasagent_test

import (
	context "context"
	reflect "reflect"

	model "github.com/juju/juju/core/model"
	watcher "github.com/juju/juju/core/watcher"
	cloudspec "github.com/juju/juju/environs/cloudspec"
	gomock "go.uber.org/mock/gomock"
)

// MockModelService is a mock of ModelService interface.
type MockModelService struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceMockRecorder
}

// MockModelServiceMockRecorder is the mock recorder for MockModelService.
type MockModelServiceMockRecorder struct {
	mock *MockModelService
}

// NewMockModelService creates a new mock instance.
func NewMockModelService(ctrl *gomock.Controller) *MockModelService {
	mock := &MockModelService{ctrl: ctrl}
	mock.recorder = &MockModelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelService) EXPECT() *MockModelServiceMockRecorder {
	return m.recorder
}

// WatchModelCloudCredential mocks base method.
func (m *MockModelService) WatchModelCloudCredential(arg0 context.Context, arg1 model.UUID) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchModelCloudCredential", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchModelCloudCredential indicates an expected call of WatchModelCloudCredential.
func (mr *MockModelServiceMockRecorder) WatchModelCloudCredential(arg0, arg1 any) *MockModelServiceWatchModelCloudCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchModelCloudCredential", reflect.TypeOf((*MockModelService)(nil).WatchModelCloudCredential), arg0, arg1)
	return &MockModelServiceWatchModelCloudCredentialCall{Call: call}
}

// MockModelServiceWatchModelCloudCredentialCall wrap *gomock.Call
type MockModelServiceWatchModelCloudCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceWatchModelCloudCredentialCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockModelServiceWatchModelCloudCredentialCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceWatchModelCloudCredentialCall) Do(f func(context.Context, model.UUID) (watcher.Watcher[struct{}], error)) *MockModelServiceWatchModelCloudCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceWatchModelCloudCredentialCall) DoAndReturn(f func(context.Context, model.UUID) (watcher.Watcher[struct{}], error)) *MockModelServiceWatchModelCloudCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelProviderService is a mock of ModelProviderService interface.
type MockModelProviderService struct {
	ctrl     *gomock.Controller
	recorder *MockModelProviderServiceMockRecorder
}

// MockModelProviderServiceMockRecorder is the mock recorder for MockModelProviderService.
type MockModelProviderServiceMockRecorder struct {
	mock *MockModelProviderService
}

// NewMockModelProviderService creates a new mock instance.
func NewMockModelProviderService(ctrl *gomock.Controller) *MockModelProviderService {
	mock := &MockModelProviderService{ctrl: ctrl}
	mock.recorder = &MockModelProviderServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelProviderService) EXPECT() *MockModelProviderServiceMockRecorder {
	return m.recorder
}

// GetCloudSpec mocks base method.
func (m *MockModelProviderService) GetCloudSpec(arg0 context.Context) (cloudspec.CloudSpec, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCloudSpec", arg0)
	ret0, _ := ret[0].(cloudspec.CloudSpec)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCloudSpec indicates an expected call of GetCloudSpec.
func (mr *MockModelProviderServiceMockRecorder) GetCloudSpec(arg0 any) *MockModelProviderServiceGetCloudSpecCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCloudSpec", reflect.TypeOf((*MockModelProviderService)(nil).GetCloudSpec), arg0)
	return &MockModelProviderServiceGetCloudSpecCall{Call: call}
}

// MockModelProviderServiceGetCloudSpecCall wrap *gomock.Call
type MockModelProviderServiceGetCloudSpecCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelProviderServiceGetCloudSpecCall) Return(arg0 cloudspec.CloudSpec, arg1 error) *MockModelProviderServiceGetCloudSpecCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelProviderServiceGetCloudSpecCall) Do(f func(context.Context) (cloudspec.CloudSpec, error)) *MockModelProviderServiceGetCloudSpecCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelProviderServiceGetCloudSpecCall) DoAndReturn(f func(context.Context) (cloudspec.CloudSpec, error)) *MockModelProviderServiceGetCloudSpecCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
