// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/controller/crossmodelsecrets (interfaces: CrossModelState)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	names "github.com/juju/names/v4"
)

// MockCrossModelState is a mock of CrossModelState interface.
type MockCrossModelState struct {
	ctrl     *gomock.Controller
	recorder *MockCrossModelStateMockRecorder
}

// MockCrossModelStateMockRecorder is the mock recorder for MockCrossModelState.
type MockCrossModelStateMockRecorder struct {
	mock *MockCrossModelState
}

// NewMockCrossModelState creates a new mock instance.
func NewMockCrossModelState(ctrl *gomock.Controller) *MockCrossModelState {
	mock := &MockCrossModelState{ctrl: ctrl}
	mock.recorder = &MockCrossModelStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCrossModelState) EXPECT() *MockCrossModelStateMockRecorder {
	return m.recorder
}

// GetConsumerInfo mocks base method.
func (m *MockCrossModelState) GetConsumerInfo(arg0 string) (names.Tag, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConsumerInfo", arg0)
	ret0, _ := ret[0].(names.Tag)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetConsumerInfo indicates an expected call of GetConsumerInfo.
func (mr *MockCrossModelStateMockRecorder) GetConsumerInfo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConsumerInfo", reflect.TypeOf((*MockCrossModelState)(nil).GetConsumerInfo), arg0)
}

// GetToken mocks base method.
func (m *MockCrossModelState) GetToken(arg0 names.Tag) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetToken", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetToken indicates an expected call of GetToken.
func (mr *MockCrossModelStateMockRecorder) GetToken(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetToken", reflect.TypeOf((*MockCrossModelState)(nil).GetToken), arg0)
}
