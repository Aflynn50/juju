// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/controller/crossmodelsecrets (interfaces: SecretService)
//
// Generated by this command:
//
//	mockgen -package mocks -destination mocks/secretservice.go github.com/juju/juju/apiserver/facades/controller/crossmodelsecrets SecretService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	secrets "github.com/juju/juju/core/secrets"
	service "github.com/juju/juju/domain/secret/service"
	gomock "go.uber.org/mock/gomock"
)

// MockSecretService is a mock of SecretService interface.
type MockSecretService struct {
	ctrl     *gomock.Controller
	recorder *MockSecretServiceMockRecorder
}

// MockSecretServiceMockRecorder is the mock recorder for MockSecretService.
type MockSecretServiceMockRecorder struct {
	mock *MockSecretService
}

// NewMockSecretService creates a new mock instance.
func NewMockSecretService(ctrl *gomock.Controller) *MockSecretService {
	mock := &MockSecretService{ctrl: ctrl}
	mock.recorder = &MockSecretServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretService) EXPECT() *MockSecretServiceMockRecorder {
	return m.recorder
}

// GetSecret mocks base method.
func (m *MockSecretService) GetSecret(arg0 context.Context, arg1 *secrets.URI) (*secrets.SecretMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecret", arg0, arg1)
	ret0, _ := ret[0].(*secrets.SecretMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecret indicates an expected call of GetSecret.
func (mr *MockSecretServiceMockRecorder) GetSecret(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecret", reflect.TypeOf((*MockSecretService)(nil).GetSecret), arg0, arg1)
}

// GetSecretAccess mocks base method.
func (m *MockSecretService) GetSecretAccess(arg0 context.Context, arg1 *secrets.URI, arg2 service.SecretAccessor) (secrets.SecretRole, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretAccess", arg0, arg1, arg2)
	ret0, _ := ret[0].(secrets.SecretRole)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretAccess indicates an expected call of GetSecretAccess.
func (mr *MockSecretServiceMockRecorder) GetSecretAccess(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretAccess", reflect.TypeOf((*MockSecretService)(nil).GetSecretAccess), arg0, arg1, arg2)
}

// GetSecretAccessScope mocks base method.
func (m *MockSecretService) GetSecretAccessScope(arg0 context.Context, arg1 *secrets.URI, arg2 service.SecretAccessor) (service.SecretAccessScope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretAccessScope", arg0, arg1, arg2)
	ret0, _ := ret[0].(service.SecretAccessScope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretAccessScope indicates an expected call of GetSecretAccessScope.
func (mr *MockSecretServiceMockRecorder) GetSecretAccessScope(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretAccessScope", reflect.TypeOf((*MockSecretService)(nil).GetSecretAccessScope), arg0, arg1, arg2)
}

// GetSecretValue mocks base method.
func (m *MockSecretService) GetSecretValue(arg0 context.Context, arg1 *secrets.URI, arg2 int) (secrets.SecretValue, *secrets.ValueRef, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretValue", arg0, arg1, arg2)
	ret0, _ := ret[0].(secrets.SecretValue)
	ret1, _ := ret[1].(*secrets.ValueRef)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetSecretValue indicates an expected call of GetSecretValue.
func (mr *MockSecretServiceMockRecorder) GetSecretValue(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretValue", reflect.TypeOf((*MockSecretService)(nil).GetSecretValue), arg0, arg1, arg2)
}

// UpdateRemoteConsumedRevision mocks base method.
func (m *MockSecretService) UpdateRemoteConsumedRevision(arg0 context.Context, arg1 *secrets.URI, arg2 string, arg3 bool) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRemoteConsumedRevision", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateRemoteConsumedRevision indicates an expected call of UpdateRemoteConsumedRevision.
func (mr *MockSecretServiceMockRecorder) UpdateRemoteConsumedRevision(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRemoteConsumedRevision", reflect.TypeOf((*MockSecretService)(nil).UpdateRemoteConsumedRevision), arg0, arg1, arg2, arg3)
}
