// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/controller/migrationmaster (interfaces: Backend,ControllerState,ModelExporter,UpgradeService,ControllerConfigService)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/backend.go github.com/juju/juju/apiserver/facades/controller/migrationmaster Backend,ControllerState,ModelExporter,UpgradeService,ControllerConfigService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	description "github.com/juju/description/v6"
	controller "github.com/juju/juju/controller"
	network "github.com/juju/juju/core/network"
	objectstore "github.com/juju/juju/core/objectstore"
	state "github.com/juju/juju/state"
	names "github.com/juju/names/v5"
	version "github.com/juju/version/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockBackend is a mock of Backend interface.
type MockBackend struct {
	ctrl     *gomock.Controller
	recorder *MockBackendMockRecorder
}

// MockBackendMockRecorder is the mock recorder for MockBackend.
type MockBackendMockRecorder struct {
	mock *MockBackend
}

// NewMockBackend creates a new mock instance.
func NewMockBackend(ctrl *gomock.Controller) *MockBackend {
	mock := &MockBackend{ctrl: ctrl}
	mock.recorder = &MockBackendMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackend) EXPECT() *MockBackendMockRecorder {
	return m.recorder
}

// AgentVersion mocks base method.
func (m *MockBackend) AgentVersion(arg0 context.Context) (version.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentVersion", arg0)
	ret0, _ := ret[0].(version.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentVersion indicates an expected call of AgentVersion.
func (mr *MockBackendMockRecorder) AgentVersion(arg0 any) *MockBackendAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentVersion", reflect.TypeOf((*MockBackend)(nil).AgentVersion), arg0)
	return &MockBackendAgentVersionCall{Call: call}
}

// MockBackendAgentVersionCall wrap *gomock.Call
type MockBackendAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendAgentVersionCall) Return(arg0 version.Number, arg1 error) *MockBackendAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendAgentVersionCall) Do(f func(context.Context) (version.Number, error)) *MockBackendAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendAgentVersionCall) DoAndReturn(f func(context.Context) (version.Number, error)) *MockBackendAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllLocalRelatedModels mocks base method.
func (m *MockBackend) AllLocalRelatedModels() ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllLocalRelatedModels")
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllLocalRelatedModels indicates an expected call of AllLocalRelatedModels.
func (mr *MockBackendMockRecorder) AllLocalRelatedModels() *MockBackendAllLocalRelatedModelsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllLocalRelatedModels", reflect.TypeOf((*MockBackend)(nil).AllLocalRelatedModels))
	return &MockBackendAllLocalRelatedModelsCall{Call: call}
}

// MockBackendAllLocalRelatedModelsCall wrap *gomock.Call
type MockBackendAllLocalRelatedModelsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendAllLocalRelatedModelsCall) Return(arg0 []string, arg1 error) *MockBackendAllLocalRelatedModelsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendAllLocalRelatedModelsCall) Do(f func() ([]string, error)) *MockBackendAllLocalRelatedModelsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendAllLocalRelatedModelsCall) DoAndReturn(f func() ([]string, error)) *MockBackendAllLocalRelatedModelsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Export mocks base method.
func (m *MockBackend) Export(arg0 map[string]string, arg1 objectstore.ObjectStore) (description.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Export", arg0, arg1)
	ret0, _ := ret[0].(description.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Export indicates an expected call of Export.
func (mr *MockBackendMockRecorder) Export(arg0, arg1 any) *MockBackendExportCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Export", reflect.TypeOf((*MockBackend)(nil).Export), arg0, arg1)
	return &MockBackendExportCall{Call: call}
}

// MockBackendExportCall wrap *gomock.Call
type MockBackendExportCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendExportCall) Return(arg0 description.Model, arg1 error) *MockBackendExportCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendExportCall) Do(f func(map[string]string, objectstore.ObjectStore) (description.Model, error)) *MockBackendExportCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendExportCall) DoAndReturn(f func(map[string]string, objectstore.ObjectStore) (description.Model, error)) *MockBackendExportCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExportPartial mocks base method.
func (m *MockBackend) ExportPartial(arg0 state.ExportConfig, arg1 objectstore.ObjectStore) (description.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportPartial", arg0, arg1)
	ret0, _ := ret[0].(description.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportPartial indicates an expected call of ExportPartial.
func (mr *MockBackendMockRecorder) ExportPartial(arg0, arg1 any) *MockBackendExportPartialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportPartial", reflect.TypeOf((*MockBackend)(nil).ExportPartial), arg0, arg1)
	return &MockBackendExportPartialCall{Call: call}
}

// MockBackendExportPartialCall wrap *gomock.Call
type MockBackendExportPartialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendExportPartialCall) Return(arg0 description.Model, arg1 error) *MockBackendExportPartialCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendExportPartialCall) Do(f func(state.ExportConfig, objectstore.ObjectStore) (description.Model, error)) *MockBackendExportPartialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendExportPartialCall) DoAndReturn(f func(state.ExportConfig, objectstore.ObjectStore) (description.Model, error)) *MockBackendExportPartialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// LatestMigration mocks base method.
func (m *MockBackend) LatestMigration() (state.ModelMigration, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestMigration")
	ret0, _ := ret[0].(state.ModelMigration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestMigration indicates an expected call of LatestMigration.
func (mr *MockBackendMockRecorder) LatestMigration() *MockBackendLatestMigrationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestMigration", reflect.TypeOf((*MockBackend)(nil).LatestMigration))
	return &MockBackendLatestMigrationCall{Call: call}
}

// MockBackendLatestMigrationCall wrap *gomock.Call
type MockBackendLatestMigrationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendLatestMigrationCall) Return(arg0 state.ModelMigration, arg1 error) *MockBackendLatestMigrationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendLatestMigrationCall) Do(f func() (state.ModelMigration, error)) *MockBackendLatestMigrationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendLatestMigrationCall) DoAndReturn(f func() (state.ModelMigration, error)) *MockBackendLatestMigrationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelName mocks base method.
func (m *MockBackend) ModelName() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelName")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelName indicates an expected call of ModelName.
func (mr *MockBackendMockRecorder) ModelName() *MockBackendModelNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelName", reflect.TypeOf((*MockBackend)(nil).ModelName))
	return &MockBackendModelNameCall{Call: call}
}

// MockBackendModelNameCall wrap *gomock.Call
type MockBackendModelNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendModelNameCall) Return(arg0 string, arg1 error) *MockBackendModelNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendModelNameCall) Do(f func() (string, error)) *MockBackendModelNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendModelNameCall) DoAndReturn(f func() (string, error)) *MockBackendModelNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelOwner mocks base method.
func (m *MockBackend) ModelOwner() (names.UserTag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelOwner")
	ret0, _ := ret[0].(names.UserTag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelOwner indicates an expected call of ModelOwner.
func (mr *MockBackendMockRecorder) ModelOwner() *MockBackendModelOwnerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelOwner", reflect.TypeOf((*MockBackend)(nil).ModelOwner))
	return &MockBackendModelOwnerCall{Call: call}
}

// MockBackendModelOwnerCall wrap *gomock.Call
type MockBackendModelOwnerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendModelOwnerCall) Return(arg0 names.UserTag, arg1 error) *MockBackendModelOwnerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendModelOwnerCall) Do(f func() (names.UserTag, error)) *MockBackendModelOwnerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendModelOwnerCall) DoAndReturn(f func() (names.UserTag, error)) *MockBackendModelOwnerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelUUID mocks base method.
func (m *MockBackend) ModelUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ModelUUID indicates an expected call of ModelUUID.
func (mr *MockBackendMockRecorder) ModelUUID() *MockBackendModelUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelUUID", reflect.TypeOf((*MockBackend)(nil).ModelUUID))
	return &MockBackendModelUUIDCall{Call: call}
}

// MockBackendModelUUIDCall wrap *gomock.Call
type MockBackendModelUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendModelUUIDCall) Return(arg0 string) *MockBackendModelUUIDCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendModelUUIDCall) Do(f func() string) *MockBackendModelUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendModelUUIDCall) DoAndReturn(f func() string) *MockBackendModelUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveExportingModelDocs mocks base method.
func (m *MockBackend) RemoveExportingModelDocs() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveExportingModelDocs")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveExportingModelDocs indicates an expected call of RemoveExportingModelDocs.
func (mr *MockBackendMockRecorder) RemoveExportingModelDocs() *MockBackendRemoveExportingModelDocsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveExportingModelDocs", reflect.TypeOf((*MockBackend)(nil).RemoveExportingModelDocs))
	return &MockBackendRemoveExportingModelDocsCall{Call: call}
}

// MockBackendRemoveExportingModelDocsCall wrap *gomock.Call
type MockBackendRemoveExportingModelDocsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendRemoveExportingModelDocsCall) Return(arg0 error) *MockBackendRemoveExportingModelDocsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendRemoveExportingModelDocsCall) Do(f func() error) *MockBackendRemoveExportingModelDocsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendRemoveExportingModelDocsCall) DoAndReturn(f func() error) *MockBackendRemoveExportingModelDocsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatchForMigration mocks base method.
func (m *MockBackend) WatchForMigration() state.NotifyWatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchForMigration")
	ret0, _ := ret[0].(state.NotifyWatcher)
	return ret0
}

// WatchForMigration indicates an expected call of WatchForMigration.
func (mr *MockBackendMockRecorder) WatchForMigration() *MockBackendWatchForMigrationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchForMigration", reflect.TypeOf((*MockBackend)(nil).WatchForMigration))
	return &MockBackendWatchForMigrationCall{Call: call}
}

// MockBackendWatchForMigrationCall wrap *gomock.Call
type MockBackendWatchForMigrationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBackendWatchForMigrationCall) Return(arg0 state.NotifyWatcher) *MockBackendWatchForMigrationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBackendWatchForMigrationCall) Do(f func() state.NotifyWatcher) *MockBackendWatchForMigrationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBackendWatchForMigrationCall) DoAndReturn(f func() state.NotifyWatcher) *MockBackendWatchForMigrationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerState is a mock of ControllerState interface.
type MockControllerState struct {
	ctrl     *gomock.Controller
	recorder *MockControllerStateMockRecorder
}

// MockControllerStateMockRecorder is the mock recorder for MockControllerState.
type MockControllerStateMockRecorder struct {
	mock *MockControllerState
}

// NewMockControllerState creates a new mock instance.
func NewMockControllerState(ctrl *gomock.Controller) *MockControllerState {
	mock := &MockControllerState{ctrl: ctrl}
	mock.recorder = &MockControllerStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerState) EXPECT() *MockControllerStateMockRecorder {
	return m.recorder
}

// APIHostPortsForClients mocks base method.
func (m *MockControllerState) APIHostPortsForClients(arg0 controller.Config) ([]network.SpaceHostPorts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIHostPortsForClients", arg0)
	ret0, _ := ret[0].([]network.SpaceHostPorts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// APIHostPortsForClients indicates an expected call of APIHostPortsForClients.
func (mr *MockControllerStateMockRecorder) APIHostPortsForClients(arg0 any) *MockControllerStateAPIHostPortsForClientsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIHostPortsForClients", reflect.TypeOf((*MockControllerState)(nil).APIHostPortsForClients), arg0)
	return &MockControllerStateAPIHostPortsForClientsCall{Call: call}
}

// MockControllerStateAPIHostPortsForClientsCall wrap *gomock.Call
type MockControllerStateAPIHostPortsForClientsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerStateAPIHostPortsForClientsCall) Return(arg0 []network.SpaceHostPorts, arg1 error) *MockControllerStateAPIHostPortsForClientsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerStateAPIHostPortsForClientsCall) Do(f func(controller.Config) ([]network.SpaceHostPorts, error)) *MockControllerStateAPIHostPortsForClientsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerStateAPIHostPortsForClientsCall) DoAndReturn(f func(controller.Config) ([]network.SpaceHostPorts, error)) *MockControllerStateAPIHostPortsForClientsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelExporter is a mock of ModelExporter interface.
type MockModelExporter struct {
	ctrl     *gomock.Controller
	recorder *MockModelExporterMockRecorder
}

// MockModelExporterMockRecorder is the mock recorder for MockModelExporter.
type MockModelExporterMockRecorder struct {
	mock *MockModelExporter
}

// NewMockModelExporter creates a new mock instance.
func NewMockModelExporter(ctrl *gomock.Controller) *MockModelExporter {
	mock := &MockModelExporter{ctrl: ctrl}
	mock.recorder = &MockModelExporterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelExporter) EXPECT() *MockModelExporterMockRecorder {
	return m.recorder
}

// ExportModel mocks base method.
func (m *MockModelExporter) ExportModel(arg0 context.Context, arg1 map[string]string, arg2 objectstore.ObjectStore) (description.Model, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportModel", arg0, arg1, arg2)
	ret0, _ := ret[0].(description.Model)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportModel indicates an expected call of ExportModel.
func (mr *MockModelExporterMockRecorder) ExportModel(arg0, arg1, arg2 any) *MockModelExporterExportModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportModel", reflect.TypeOf((*MockModelExporter)(nil).ExportModel), arg0, arg1, arg2)
	return &MockModelExporterExportModelCall{Call: call}
}

// MockModelExporterExportModelCall wrap *gomock.Call
type MockModelExporterExportModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelExporterExportModelCall) Return(arg0 description.Model, arg1 error) *MockModelExporterExportModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelExporterExportModelCall) Do(f func(context.Context, map[string]string, objectstore.ObjectStore) (description.Model, error)) *MockModelExporterExportModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelExporterExportModelCall) DoAndReturn(f func(context.Context, map[string]string, objectstore.ObjectStore) (description.Model, error)) *MockModelExporterExportModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUpgradeService is a mock of UpgradeService interface.
type MockUpgradeService struct {
	ctrl     *gomock.Controller
	recorder *MockUpgradeServiceMockRecorder
}

// MockUpgradeServiceMockRecorder is the mock recorder for MockUpgradeService.
type MockUpgradeServiceMockRecorder struct {
	mock *MockUpgradeService
}

// NewMockUpgradeService creates a new mock instance.
func NewMockUpgradeService(ctrl *gomock.Controller) *MockUpgradeService {
	mock := &MockUpgradeService{ctrl: ctrl}
	mock.recorder = &MockUpgradeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpgradeService) EXPECT() *MockUpgradeServiceMockRecorder {
	return m.recorder
}

// IsUpgrading mocks base method.
func (m *MockUpgradeService) IsUpgrading(arg0 context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUpgrading", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsUpgrading indicates an expected call of IsUpgrading.
func (mr *MockUpgradeServiceMockRecorder) IsUpgrading(arg0 any) *MockUpgradeServiceIsUpgradingCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUpgrading", reflect.TypeOf((*MockUpgradeService)(nil).IsUpgrading), arg0)
	return &MockUpgradeServiceIsUpgradingCall{Call: call}
}

// MockUpgradeServiceIsUpgradingCall wrap *gomock.Call
type MockUpgradeServiceIsUpgradingCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUpgradeServiceIsUpgradingCall) Return(arg0 bool, arg1 error) *MockUpgradeServiceIsUpgradingCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUpgradeServiceIsUpgradingCall) Do(f func(context.Context) (bool, error)) *MockUpgradeServiceIsUpgradingCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUpgradeServiceIsUpgradingCall) DoAndReturn(f func(context.Context) (bool, error)) *MockUpgradeServiceIsUpgradingCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerConfigService is a mock of ControllerConfigService interface.
type MockControllerConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerConfigServiceMockRecorder
}

// MockControllerConfigServiceMockRecorder is the mock recorder for MockControllerConfigService.
type MockControllerConfigServiceMockRecorder struct {
	mock *MockControllerConfigService
}

// NewMockControllerConfigService creates a new mock instance.
func NewMockControllerConfigService(ctrl *gomock.Controller) *MockControllerConfigService {
	mock := &MockControllerConfigService{ctrl: ctrl}
	mock.recorder = &MockControllerConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerConfigService) EXPECT() *MockControllerConfigServiceMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerConfigService) ControllerConfig(arg0 context.Context) (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerConfigServiceMockRecorder) ControllerConfig(arg0 any) *MockControllerConfigServiceControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerConfigService)(nil).ControllerConfig), arg0)
	return &MockControllerConfigServiceControllerConfigCall{Call: call}
}

// MockControllerConfigServiceControllerConfigCall wrap *gomock.Call
type MockControllerConfigServiceControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigServiceControllerConfigCall) Return(arg0 controller.Config, arg1 error) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigServiceControllerConfigCall) Do(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigServiceControllerConfigCall) DoAndReturn(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
