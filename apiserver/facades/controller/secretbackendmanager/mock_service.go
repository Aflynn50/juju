// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/facades/controller/secretbackendmanager (interfaces: BackendService,SecretBackendRotateWatcher)
//
// Generated by this command:
//
//	mockgen -package secretbackendmanager -destination mock_service.go github.com/juju/juju/apiserver/facades/controller/secretbackendmanager BackendService,SecretBackendRotateWatcher
//

// Package secretbackendmanager is a generated GoMock package.
package secretbackendmanager

import (
	context "context"
	reflect "reflect"

	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockBackendService is a mock of BackendService interface.
type MockBackendService struct {
	ctrl     *gomock.Controller
	recorder *MockBackendServiceMockRecorder
}

// MockBackendServiceMockRecorder is the mock recorder for MockBackendService.
type MockBackendServiceMockRecorder struct {
	mock *MockBackendService
}

// NewMockBackendService creates a new mock instance.
func NewMockBackendService(ctrl *gomock.Controller) *MockBackendService {
	mock := &MockBackendService{ctrl: ctrl}
	mock.recorder = &MockBackendServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBackendService) EXPECT() *MockBackendServiceMockRecorder {
	return m.recorder
}

// RotateBackendToken mocks base method.
func (m *MockBackendService) RotateBackendToken(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RotateBackendToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RotateBackendToken indicates an expected call of RotateBackendToken.
func (mr *MockBackendServiceMockRecorder) RotateBackendToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateBackendToken", reflect.TypeOf((*MockBackendService)(nil).RotateBackendToken), arg0, arg1)
}

// WatchSecretBackendRotationChanges mocks base method.
func (m *MockBackendService) WatchSecretBackendRotationChanges() (SecretBackendRotateWatcher, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchSecretBackendRotationChanges")
	ret0, _ := ret[0].(SecretBackendRotateWatcher)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSecretBackendRotationChanges indicates an expected call of WatchSecretBackendRotationChanges.
func (mr *MockBackendServiceMockRecorder) WatchSecretBackendRotationChanges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSecretBackendRotationChanges", reflect.TypeOf((*MockBackendService)(nil).WatchSecretBackendRotationChanges))
}

// MockSecretBackendRotateWatcher is a mock of SecretBackendRotateWatcher interface.
type MockSecretBackendRotateWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockSecretBackendRotateWatcherMockRecorder
}

// MockSecretBackendRotateWatcherMockRecorder is the mock recorder for MockSecretBackendRotateWatcher.
type MockSecretBackendRotateWatcherMockRecorder struct {
	mock *MockSecretBackendRotateWatcher
}

// NewMockSecretBackendRotateWatcher creates a new mock instance.
func NewMockSecretBackendRotateWatcher(ctrl *gomock.Controller) *MockSecretBackendRotateWatcher {
	mock := &MockSecretBackendRotateWatcher{ctrl: ctrl}
	mock.recorder = &MockSecretBackendRotateWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretBackendRotateWatcher) EXPECT() *MockSecretBackendRotateWatcherMockRecorder {
	return m.recorder
}

// Changes mocks base method.
func (m *MockSecretBackendRotateWatcher) Changes() <-chan []watcher.SecretBackendRotateChange {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Changes")
	ret0, _ := ret[0].(<-chan []watcher.SecretBackendRotateChange)
	return ret0
}

// Changes indicates an expected call of Changes.
func (mr *MockSecretBackendRotateWatcherMockRecorder) Changes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changes", reflect.TypeOf((*MockSecretBackendRotateWatcher)(nil).Changes))
}

// Kill mocks base method.
func (m *MockSecretBackendRotateWatcher) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockSecretBackendRotateWatcherMockRecorder) Kill() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockSecretBackendRotateWatcher)(nil).Kill))
}

// Wait mocks base method.
func (m *MockSecretBackendRotateWatcher) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockSecretBackendRotateWatcherMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockSecretBackendRotateWatcher)(nil).Wait))
}
