// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/stateauthenticator (interfaces: ControllerConfigService,UserService,BakeryConfigService,AgentAuthenticatorFactory)
//
// Generated by this command:
//
//	mockgen -typed -package stateauthenticator -destination services_mock_test.go github.com/juju/juju/apiserver/stateauthenticator ControllerConfigService,UserService,BakeryConfigService,AgentAuthenticatorFactory
//

// Package stateauthenticator is a generated GoMock package.
package stateauthenticator

import (
	context "context"
	reflect "reflect"

	bakery "github.com/go-macaroon-bakery/macaroon-bakery/v3/bakery"
	authentication "github.com/juju/juju/apiserver/authentication"
	controller "github.com/juju/juju/controller"
	model "github.com/juju/juju/core/model"
	user "github.com/juju/juju/core/user"
	auth "github.com/juju/juju/internal/auth"
	state "github.com/juju/juju/state"
	gomock "go.uber.org/mock/gomock"
)

// MockControllerConfigService is a mock of ControllerConfigService interface.
type MockControllerConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerConfigServiceMockRecorder
}

// MockControllerConfigServiceMockRecorder is the mock recorder for MockControllerConfigService.
type MockControllerConfigServiceMockRecorder struct {
	mock *MockControllerConfigService
}

// NewMockControllerConfigService creates a new mock instance.
func NewMockControllerConfigService(ctrl *gomock.Controller) *MockControllerConfigService {
	mock := &MockControllerConfigService{ctrl: ctrl}
	mock.recorder = &MockControllerConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerConfigService) EXPECT() *MockControllerConfigServiceMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerConfigService) ControllerConfig(arg0 context.Context) (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerConfigServiceMockRecorder) ControllerConfig(arg0 any) *MockControllerConfigServiceControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerConfigService)(nil).ControllerConfig), arg0)
	return &MockControllerConfigServiceControllerConfigCall{Call: call}
}

// MockControllerConfigServiceControllerConfigCall wrap *gomock.Call
type MockControllerConfigServiceControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigServiceControllerConfigCall) Return(arg0 controller.Config, arg1 error) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigServiceControllerConfigCall) Do(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigServiceControllerConfigCall) DoAndReturn(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// GetUserByAuth mocks base method.
func (m *MockUserService) GetUserByAuth(arg0 context.Context, arg1 string, arg2 auth.Password) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByAuth", arg0, arg1, arg2)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByAuth indicates an expected call of GetUserByAuth.
func (mr *MockUserServiceMockRecorder) GetUserByAuth(arg0, arg1, arg2 any) *MockUserServiceGetUserByAuthCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByAuth", reflect.TypeOf((*MockUserService)(nil).GetUserByAuth), arg0, arg1, arg2)
	return &MockUserServiceGetUserByAuthCall{Call: call}
}

// MockUserServiceGetUserByAuthCall wrap *gomock.Call
type MockUserServiceGetUserByAuthCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceGetUserByAuthCall) Return(arg0 user.User, arg1 error) *MockUserServiceGetUserByAuthCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceGetUserByAuthCall) Do(f func(context.Context, string, auth.Password) (user.User, error)) *MockUserServiceGetUserByAuthCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceGetUserByAuthCall) DoAndReturn(f func(context.Context, string, auth.Password) (user.User, error)) *MockUserServiceGetUserByAuthCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByName mocks base method.
func (m *MockUserService) GetUserByName(arg0 context.Context, arg1 string) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", arg0, arg1)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockUserServiceMockRecorder) GetUserByName(arg0, arg1 any) *MockUserServiceGetUserByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockUserService)(nil).GetUserByName), arg0, arg1)
	return &MockUserServiceGetUserByNameCall{Call: call}
}

// MockUserServiceGetUserByNameCall wrap *gomock.Call
type MockUserServiceGetUserByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceGetUserByNameCall) Return(arg0 user.User, arg1 error) *MockUserServiceGetUserByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceGetUserByNameCall) Do(f func(context.Context, string) (user.User, error)) *MockUserServiceGetUserByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceGetUserByNameCall) DoAndReturn(f func(context.Context, string) (user.User, error)) *MockUserServiceGetUserByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateLastModelLogin mocks base method.
func (m *MockUserService) UpdateLastModelLogin(arg0 context.Context, arg1 string, arg2 model.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastModelLogin", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastModelLogin indicates an expected call of UpdateLastModelLogin.
func (mr *MockUserServiceMockRecorder) UpdateLastModelLogin(arg0, arg1, arg2 any) *MockUserServiceUpdateLastModelLoginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastModelLogin", reflect.TypeOf((*MockUserService)(nil).UpdateLastModelLogin), arg0, arg1, arg2)
	return &MockUserServiceUpdateLastModelLoginCall{Call: call}
}

// MockUserServiceUpdateLastModelLoginCall wrap *gomock.Call
type MockUserServiceUpdateLastModelLoginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceUpdateLastModelLoginCall) Return(arg0 error) *MockUserServiceUpdateLastModelLoginCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceUpdateLastModelLoginCall) Do(f func(context.Context, string, model.UUID) error) *MockUserServiceUpdateLastModelLoginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceUpdateLastModelLoginCall) DoAndReturn(f func(context.Context, string, model.UUID) error) *MockUserServiceUpdateLastModelLoginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockBakeryConfigService is a mock of BakeryConfigService interface.
type MockBakeryConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockBakeryConfigServiceMockRecorder
}

// MockBakeryConfigServiceMockRecorder is the mock recorder for MockBakeryConfigService.
type MockBakeryConfigServiceMockRecorder struct {
	mock *MockBakeryConfigService
}

// NewMockBakeryConfigService creates a new mock instance.
func NewMockBakeryConfigService(ctrl *gomock.Controller) *MockBakeryConfigService {
	mock := &MockBakeryConfigService{ctrl: ctrl}
	mock.recorder = &MockBakeryConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBakeryConfigService) EXPECT() *MockBakeryConfigServiceMockRecorder {
	return m.recorder
}

// GetExternalUsersThirdPartyKey mocks base method.
func (m *MockBakeryConfigService) GetExternalUsersThirdPartyKey(arg0 context.Context) (*bakery.KeyPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExternalUsersThirdPartyKey", arg0)
	ret0, _ := ret[0].(*bakery.KeyPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetExternalUsersThirdPartyKey indicates an expected call of GetExternalUsersThirdPartyKey.
func (mr *MockBakeryConfigServiceMockRecorder) GetExternalUsersThirdPartyKey(arg0 any) *MockBakeryConfigServiceGetExternalUsersThirdPartyKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExternalUsersThirdPartyKey", reflect.TypeOf((*MockBakeryConfigService)(nil).GetExternalUsersThirdPartyKey), arg0)
	return &MockBakeryConfigServiceGetExternalUsersThirdPartyKeyCall{Call: call}
}

// MockBakeryConfigServiceGetExternalUsersThirdPartyKeyCall wrap *gomock.Call
type MockBakeryConfigServiceGetExternalUsersThirdPartyKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBakeryConfigServiceGetExternalUsersThirdPartyKeyCall) Return(arg0 *bakery.KeyPair, arg1 error) *MockBakeryConfigServiceGetExternalUsersThirdPartyKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBakeryConfigServiceGetExternalUsersThirdPartyKeyCall) Do(f func(context.Context) (*bakery.KeyPair, error)) *MockBakeryConfigServiceGetExternalUsersThirdPartyKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBakeryConfigServiceGetExternalUsersThirdPartyKeyCall) DoAndReturn(f func(context.Context) (*bakery.KeyPair, error)) *MockBakeryConfigServiceGetExternalUsersThirdPartyKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetLocalUsersKey mocks base method.
func (m *MockBakeryConfigService) GetLocalUsersKey(arg0 context.Context) (*bakery.KeyPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalUsersKey", arg0)
	ret0, _ := ret[0].(*bakery.KeyPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalUsersKey indicates an expected call of GetLocalUsersKey.
func (mr *MockBakeryConfigServiceMockRecorder) GetLocalUsersKey(arg0 any) *MockBakeryConfigServiceGetLocalUsersKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalUsersKey", reflect.TypeOf((*MockBakeryConfigService)(nil).GetLocalUsersKey), arg0)
	return &MockBakeryConfigServiceGetLocalUsersKeyCall{Call: call}
}

// MockBakeryConfigServiceGetLocalUsersKeyCall wrap *gomock.Call
type MockBakeryConfigServiceGetLocalUsersKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBakeryConfigServiceGetLocalUsersKeyCall) Return(arg0 *bakery.KeyPair, arg1 error) *MockBakeryConfigServiceGetLocalUsersKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBakeryConfigServiceGetLocalUsersKeyCall) Do(f func(context.Context) (*bakery.KeyPair, error)) *MockBakeryConfigServiceGetLocalUsersKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBakeryConfigServiceGetLocalUsersKeyCall) DoAndReturn(f func(context.Context) (*bakery.KeyPair, error)) *MockBakeryConfigServiceGetLocalUsersKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetLocalUsersThirdPartyKey mocks base method.
func (m *MockBakeryConfigService) GetLocalUsersThirdPartyKey(arg0 context.Context) (*bakery.KeyPair, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLocalUsersThirdPartyKey", arg0)
	ret0, _ := ret[0].(*bakery.KeyPair)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLocalUsersThirdPartyKey indicates an expected call of GetLocalUsersThirdPartyKey.
func (mr *MockBakeryConfigServiceMockRecorder) GetLocalUsersThirdPartyKey(arg0 any) *MockBakeryConfigServiceGetLocalUsersThirdPartyKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLocalUsersThirdPartyKey", reflect.TypeOf((*MockBakeryConfigService)(nil).GetLocalUsersThirdPartyKey), arg0)
	return &MockBakeryConfigServiceGetLocalUsersThirdPartyKeyCall{Call: call}
}

// MockBakeryConfigServiceGetLocalUsersThirdPartyKeyCall wrap *gomock.Call
type MockBakeryConfigServiceGetLocalUsersThirdPartyKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockBakeryConfigServiceGetLocalUsersThirdPartyKeyCall) Return(arg0 *bakery.KeyPair, arg1 error) *MockBakeryConfigServiceGetLocalUsersThirdPartyKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockBakeryConfigServiceGetLocalUsersThirdPartyKeyCall) Do(f func(context.Context) (*bakery.KeyPair, error)) *MockBakeryConfigServiceGetLocalUsersThirdPartyKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockBakeryConfigServiceGetLocalUsersThirdPartyKeyCall) DoAndReturn(f func(context.Context) (*bakery.KeyPair, error)) *MockBakeryConfigServiceGetLocalUsersThirdPartyKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAgentAuthenticatorFactory is a mock of AgentAuthenticatorFactory interface.
type MockAgentAuthenticatorFactory struct {
	ctrl     *gomock.Controller
	recorder *MockAgentAuthenticatorFactoryMockRecorder
}

// MockAgentAuthenticatorFactoryMockRecorder is the mock recorder for MockAgentAuthenticatorFactory.
type MockAgentAuthenticatorFactoryMockRecorder struct {
	mock *MockAgentAuthenticatorFactory
}

// NewMockAgentAuthenticatorFactory creates a new mock instance.
func NewMockAgentAuthenticatorFactory(ctrl *gomock.Controller) *MockAgentAuthenticatorFactory {
	mock := &MockAgentAuthenticatorFactory{ctrl: ctrl}
	mock.recorder = &MockAgentAuthenticatorFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentAuthenticatorFactory) EXPECT() *MockAgentAuthenticatorFactoryMockRecorder {
	return m.recorder
}

// Authenticator mocks base method.
func (m *MockAgentAuthenticatorFactory) Authenticator() authentication.EntityAuthenticator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Authenticator")
	ret0, _ := ret[0].(authentication.EntityAuthenticator)
	return ret0
}

// Authenticator indicates an expected call of Authenticator.
func (mr *MockAgentAuthenticatorFactoryMockRecorder) Authenticator() *MockAgentAuthenticatorFactoryAuthenticatorCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Authenticator", reflect.TypeOf((*MockAgentAuthenticatorFactory)(nil).Authenticator))
	return &MockAgentAuthenticatorFactoryAuthenticatorCall{Call: call}
}

// MockAgentAuthenticatorFactoryAuthenticatorCall wrap *gomock.Call
type MockAgentAuthenticatorFactoryAuthenticatorCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentAuthenticatorFactoryAuthenticatorCall) Return(arg0 authentication.EntityAuthenticator) *MockAgentAuthenticatorFactoryAuthenticatorCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentAuthenticatorFactoryAuthenticatorCall) Do(f func() authentication.EntityAuthenticator) *MockAgentAuthenticatorFactoryAuthenticatorCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentAuthenticatorFactoryAuthenticatorCall) DoAndReturn(f func() authentication.EntityAuthenticator) *MockAgentAuthenticatorFactoryAuthenticatorCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AuthenticatorForState mocks base method.
func (m *MockAgentAuthenticatorFactory) AuthenticatorForState(arg0 *state.State) authentication.EntityAuthenticator {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticatorForState", arg0)
	ret0, _ := ret[0].(authentication.EntityAuthenticator)
	return ret0
}

// AuthenticatorForState indicates an expected call of AuthenticatorForState.
func (mr *MockAgentAuthenticatorFactoryMockRecorder) AuthenticatorForState(arg0 any) *MockAgentAuthenticatorFactoryAuthenticatorForStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticatorForState", reflect.TypeOf((*MockAgentAuthenticatorFactory)(nil).AuthenticatorForState), arg0)
	return &MockAgentAuthenticatorFactoryAuthenticatorForStateCall{Call: call}
}

// MockAgentAuthenticatorFactoryAuthenticatorForStateCall wrap *gomock.Call
type MockAgentAuthenticatorFactoryAuthenticatorForStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentAuthenticatorFactoryAuthenticatorForStateCall) Return(arg0 authentication.EntityAuthenticator) *MockAgentAuthenticatorFactoryAuthenticatorForStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentAuthenticatorFactoryAuthenticatorForStateCall) Do(f func(*state.State) authentication.EntityAuthenticator) *MockAgentAuthenticatorFactoryAuthenticatorForStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentAuthenticatorFactoryAuthenticatorForStateCall) DoAndReturn(f func(*state.State) authentication.EntityAuthenticator) *MockAgentAuthenticatorFactoryAuthenticatorForStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
