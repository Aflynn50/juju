// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/observer (interfaces: DomainServiceGetter,ModelService,ApplicationService)
//
// Generated by this command:
//
//	mockgen -typed -package observer -destination services_mock_test.go github.com/juju/juju/apiserver/observer DomainServiceGetter,ModelService,ApplicationService
//

// Package observer is a generated GoMock package.
package observer

import (
	context "context"
	reflect "reflect"

	model "github.com/juju/juju/core/model"
	unit "github.com/juju/juju/core/unit"
	gomock "go.uber.org/mock/gomock"
)

// MockDomainServiceGetter is a mock of DomainServiceGetter interface.
type MockDomainServiceGetter struct {
	ctrl     *gomock.Controller
	recorder *MockDomainServiceGetterMockRecorder
}

// MockDomainServiceGetterMockRecorder is the mock recorder for MockDomainServiceGetter.
type MockDomainServiceGetterMockRecorder struct {
	mock *MockDomainServiceGetter
}

// NewMockDomainServiceGetter creates a new mock instance.
func NewMockDomainServiceGetter(ctrl *gomock.Controller) *MockDomainServiceGetter {
	mock := &MockDomainServiceGetter{ctrl: ctrl}
	mock.recorder = &MockDomainServiceGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainServiceGetter) EXPECT() *MockDomainServiceGetterMockRecorder {
	return m.recorder
}

// DomainServicesForModel mocks base method.
func (m *MockDomainServiceGetter) DomainServicesForModel(arg0 context.Context, arg1 model.UUID) (ModelService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DomainServicesForModel", arg0, arg1)
	ret0, _ := ret[0].(ModelService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DomainServicesForModel indicates an expected call of DomainServicesForModel.
func (mr *MockDomainServiceGetterMockRecorder) DomainServicesForModel(arg0, arg1 any) *MockDomainServiceGetterDomainServicesForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DomainServicesForModel", reflect.TypeOf((*MockDomainServiceGetter)(nil).DomainServicesForModel), arg0, arg1)
	return &MockDomainServiceGetterDomainServicesForModelCall{Call: call}
}

// MockDomainServiceGetterDomainServicesForModelCall wrap *gomock.Call
type MockDomainServiceGetterDomainServicesForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServiceGetterDomainServicesForModelCall) Return(arg0 ModelService, arg1 error) *MockDomainServiceGetterDomainServicesForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServiceGetterDomainServicesForModelCall) Do(f func(context.Context, model.UUID) (ModelService, error)) *MockDomainServiceGetterDomainServicesForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServiceGetterDomainServicesForModelCall) DoAndReturn(f func(context.Context, model.UUID) (ModelService, error)) *MockDomainServiceGetterDomainServicesForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelService is a mock of ModelService interface.
type MockModelService struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceMockRecorder
}

// MockModelServiceMockRecorder is the mock recorder for MockModelService.
type MockModelServiceMockRecorder struct {
	mock *MockModelService
}

// NewMockModelService creates a new mock instance.
func NewMockModelService(ctrl *gomock.Controller) *MockModelService {
	mock := &MockModelService{ctrl: ctrl}
	mock.recorder = &MockModelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelService) EXPECT() *MockModelServiceMockRecorder {
	return m.recorder
}

// ApplicationService mocks base method.
func (m *MockModelService) ApplicationService() ApplicationService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplicationService")
	ret0, _ := ret[0].(ApplicationService)
	return ret0
}

// ApplicationService indicates an expected call of ApplicationService.
func (mr *MockModelServiceMockRecorder) ApplicationService() *MockModelServiceApplicationServiceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplicationService", reflect.TypeOf((*MockModelService)(nil).ApplicationService))
	return &MockModelServiceApplicationServiceCall{Call: call}
}

// MockModelServiceApplicationServiceCall wrap *gomock.Call
type MockModelServiceApplicationServiceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceApplicationServiceCall) Return(arg0 ApplicationService) *MockModelServiceApplicationServiceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceApplicationServiceCall) Do(f func() ApplicationService) *MockModelServiceApplicationServiceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceApplicationServiceCall) DoAndReturn(f func() ApplicationService) *MockModelServiceApplicationServiceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// DeleteUnitPresence mocks base method.
func (m *MockApplicationService) DeleteUnitPresence(arg0 context.Context, arg1 unit.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnitPresence", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnitPresence indicates an expected call of DeleteUnitPresence.
func (mr *MockApplicationServiceMockRecorder) DeleteUnitPresence(arg0, arg1 any) *MockApplicationServiceDeleteUnitPresenceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnitPresence", reflect.TypeOf((*MockApplicationService)(nil).DeleteUnitPresence), arg0, arg1)
	return &MockApplicationServiceDeleteUnitPresenceCall{Call: call}
}

// MockApplicationServiceDeleteUnitPresenceCall wrap *gomock.Call
type MockApplicationServiceDeleteUnitPresenceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceDeleteUnitPresenceCall) Return(arg0 error) *MockApplicationServiceDeleteUnitPresenceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceDeleteUnitPresenceCall) Do(f func(context.Context, unit.Name) error) *MockApplicationServiceDeleteUnitPresenceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceDeleteUnitPresenceCall) DoAndReturn(f func(context.Context, unit.Name) error) *MockApplicationServiceDeleteUnitPresenceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitPresence mocks base method.
func (m *MockApplicationService) SetUnitPresence(arg0 context.Context, arg1 unit.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitPresence", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitPresence indicates an expected call of SetUnitPresence.
func (mr *MockApplicationServiceMockRecorder) SetUnitPresence(arg0, arg1 any) *MockApplicationServiceSetUnitPresenceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitPresence", reflect.TypeOf((*MockApplicationService)(nil).SetUnitPresence), arg0, arg1)
	return &MockApplicationServiceSetUnitPresenceCall{Call: call}
}

// MockApplicationServiceSetUnitPresenceCall wrap *gomock.Call
type MockApplicationServiceSetUnitPresenceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceSetUnitPresenceCall) Return(arg0 error) *MockApplicationServiceSetUnitPresenceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceSetUnitPresenceCall) Do(f func(context.Context, unit.Name) error) *MockApplicationServiceSetUnitPresenceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceSetUnitPresenceCall) DoAndReturn(f func(context.Context, unit.Name) error) *MockApplicationServiceSetUnitPresenceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
