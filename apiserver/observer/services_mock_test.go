// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/observer (interfaces: DomainServicesGetter,ModelService,StatusService)
//
// Generated by this command:
//
//	mockgen -typed -package observer -destination services_mock_test.go github.com/juju/juju/apiserver/observer DomainServicesGetter,ModelService,StatusService
//

// Package observer is a generated GoMock package.
package observer

import (
	context "context"
	reflect "reflect"

	model "github.com/juju/juju/core/model"
	unit "github.com/juju/juju/core/unit"
	gomock "go.uber.org/mock/gomock"
)

// MockDomainServicesGetter is a mock of DomainServicesGetter interface.
type MockDomainServicesGetter struct {
	ctrl     *gomock.Controller
	recorder *MockDomainServicesGetterMockRecorder
}

// MockDomainServicesGetterMockRecorder is the mock recorder for MockDomainServicesGetter.
type MockDomainServicesGetterMockRecorder struct {
	mock *MockDomainServicesGetter
}

// NewMockDomainServicesGetter creates a new mock instance.
func NewMockDomainServicesGetter(ctrl *gomock.Controller) *MockDomainServicesGetter {
	mock := &MockDomainServicesGetter{ctrl: ctrl}
	mock.recorder = &MockDomainServicesGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainServicesGetter) EXPECT() *MockDomainServicesGetterMockRecorder {
	return m.recorder
}

// ServicesForModel mocks base method.
func (m *MockDomainServicesGetter) ServicesForModel(arg0 context.Context, arg1 model.UUID) (ModelService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServicesForModel", arg0, arg1)
	ret0, _ := ret[0].(ModelService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ServicesForModel indicates an expected call of ServicesForModel.
func (mr *MockDomainServicesGetterMockRecorder) ServicesForModel(arg0, arg1 any) *MockDomainServicesGetterServicesForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServicesForModel", reflect.TypeOf((*MockDomainServicesGetter)(nil).ServicesForModel), arg0, arg1)
	return &MockDomainServicesGetterServicesForModelCall{Call: call}
}

// MockDomainServicesGetterServicesForModelCall wrap *gomock.Call
type MockDomainServicesGetterServicesForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDomainServicesGetterServicesForModelCall) Return(arg0 ModelService, arg1 error) *MockDomainServicesGetterServicesForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDomainServicesGetterServicesForModelCall) Do(f func(context.Context, model.UUID) (ModelService, error)) *MockDomainServicesGetterServicesForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDomainServicesGetterServicesForModelCall) DoAndReturn(f func(context.Context, model.UUID) (ModelService, error)) *MockDomainServicesGetterServicesForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockModelService is a mock of ModelService interface.
type MockModelService struct {
	ctrl     *gomock.Controller
	recorder *MockModelServiceMockRecorder
}

// MockModelServiceMockRecorder is the mock recorder for MockModelService.
type MockModelServiceMockRecorder struct {
	mock *MockModelService
}

// NewMockModelService creates a new mock instance.
func NewMockModelService(ctrl *gomock.Controller) *MockModelService {
	mock := &MockModelService{ctrl: ctrl}
	mock.recorder = &MockModelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelService) EXPECT() *MockModelServiceMockRecorder {
	return m.recorder
}

// StatusService mocks base method.
func (m *MockModelService) StatusService() StatusService {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StatusService")
	ret0, _ := ret[0].(StatusService)
	return ret0
}

// StatusService indicates an expected call of StatusService.
func (mr *MockModelServiceMockRecorder) StatusService() *MockModelServiceStatusServiceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusService", reflect.TypeOf((*MockModelService)(nil).StatusService))
	return &MockModelServiceStatusServiceCall{Call: call}
}

// MockModelServiceStatusServiceCall wrap *gomock.Call
type MockModelServiceStatusServiceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelServiceStatusServiceCall) Return(arg0 StatusService) *MockModelServiceStatusServiceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelServiceStatusServiceCall) Do(f func() StatusService) *MockModelServiceStatusServiceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelServiceStatusServiceCall) DoAndReturn(f func() StatusService) *MockModelServiceStatusServiceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStatusService is a mock of StatusService interface.
type MockStatusService struct {
	ctrl     *gomock.Controller
	recorder *MockStatusServiceMockRecorder
}

// MockStatusServiceMockRecorder is the mock recorder for MockStatusService.
type MockStatusServiceMockRecorder struct {
	mock *MockStatusService
}

// NewMockStatusService creates a new mock instance.
func NewMockStatusService(ctrl *gomock.Controller) *MockStatusService {
	mock := &MockStatusService{ctrl: ctrl}
	mock.recorder = &MockStatusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusService) EXPECT() *MockStatusServiceMockRecorder {
	return m.recorder
}

// DeleteUnitPresence mocks base method.
func (m *MockStatusService) DeleteUnitPresence(arg0 context.Context, arg1 unit.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnitPresence", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUnitPresence indicates an expected call of DeleteUnitPresence.
func (mr *MockStatusServiceMockRecorder) DeleteUnitPresence(arg0, arg1 any) *MockStatusServiceDeleteUnitPresenceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnitPresence", reflect.TypeOf((*MockStatusService)(nil).DeleteUnitPresence), arg0, arg1)
	return &MockStatusServiceDeleteUnitPresenceCall{Call: call}
}

// MockStatusServiceDeleteUnitPresenceCall wrap *gomock.Call
type MockStatusServiceDeleteUnitPresenceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceDeleteUnitPresenceCall) Return(arg0 error) *MockStatusServiceDeleteUnitPresenceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceDeleteUnitPresenceCall) Do(f func(context.Context, unit.Name) error) *MockStatusServiceDeleteUnitPresenceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceDeleteUnitPresenceCall) DoAndReturn(f func(context.Context, unit.Name) error) *MockStatusServiceDeleteUnitPresenceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitPresence mocks base method.
func (m *MockStatusService) SetUnitPresence(arg0 context.Context, arg1 unit.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitPresence", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitPresence indicates an expected call of SetUnitPresence.
func (mr *MockStatusServiceMockRecorder) SetUnitPresence(arg0, arg1 any) *MockStatusServiceSetUnitPresenceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitPresence", reflect.TypeOf((*MockStatusService)(nil).SetUnitPresence), arg0, arg1)
	return &MockStatusServiceSetUnitPresenceCall{Call: call}
}

// MockStatusServiceSetUnitPresenceCall wrap *gomock.Call
type MockStatusServiceSetUnitPresenceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatusServiceSetUnitPresenceCall) Return(arg0 error) *MockStatusServiceSetUnitPresenceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatusServiceSetUnitPresenceCall) Do(f func(context.Context, unit.Name) error) *MockStatusServiceSetUnitPresenceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatusServiceSetUnitPresenceCall) DoAndReturn(f func(context.Context, unit.Name) error) *MockStatusServiceSetUnitPresenceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
