// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver (interfaces: DeltaTranslater)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/deltatranslater_mock.go github.com/juju/juju/apiserver DeltaTranslater
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	multiwatcher "github.com/juju/juju/core/multiwatcher"
	params "github.com/juju/juju/rpc/params"
	gomock "go.uber.org/mock/gomock"
)

// MockDeltaTranslater is a mock of DeltaTranslater interface.
type MockDeltaTranslater struct {
	ctrl     *gomock.Controller
	recorder *MockDeltaTranslaterMockRecorder
}

// MockDeltaTranslaterMockRecorder is the mock recorder for MockDeltaTranslater.
type MockDeltaTranslaterMockRecorder struct {
	mock *MockDeltaTranslater
}

// NewMockDeltaTranslater creates a new mock instance.
func NewMockDeltaTranslater(ctrl *gomock.Controller) *MockDeltaTranslater {
	mock := &MockDeltaTranslater{ctrl: ctrl}
	mock.recorder = &MockDeltaTranslaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeltaTranslater) EXPECT() *MockDeltaTranslaterMockRecorder {
	return m.recorder
}

// TranslateAction mocks base method.
func (m *MockDeltaTranslater) TranslateAction(arg0 multiwatcher.EntityInfo) params.EntityInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateAction", arg0)
	ret0, _ := ret[0].(params.EntityInfo)
	return ret0
}

// TranslateAction indicates an expected call of TranslateAction.
func (mr *MockDeltaTranslaterMockRecorder) TranslateAction(arg0 any) *MockDeltaTranslaterTranslateActionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateAction", reflect.TypeOf((*MockDeltaTranslater)(nil).TranslateAction), arg0)
	return &MockDeltaTranslaterTranslateActionCall{Call: call}
}

// MockDeltaTranslaterTranslateActionCall wrap *gomock.Call
type MockDeltaTranslaterTranslateActionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeltaTranslaterTranslateActionCall) Return(arg0 params.EntityInfo) *MockDeltaTranslaterTranslateActionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeltaTranslaterTranslateActionCall) Do(f func(multiwatcher.EntityInfo) params.EntityInfo) *MockDeltaTranslaterTranslateActionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeltaTranslaterTranslateActionCall) DoAndReturn(f func(multiwatcher.EntityInfo) params.EntityInfo) *MockDeltaTranslaterTranslateActionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TranslateAnnotation mocks base method.
func (m *MockDeltaTranslater) TranslateAnnotation(arg0 multiwatcher.EntityInfo) params.EntityInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateAnnotation", arg0)
	ret0, _ := ret[0].(params.EntityInfo)
	return ret0
}

// TranslateAnnotation indicates an expected call of TranslateAnnotation.
func (mr *MockDeltaTranslaterMockRecorder) TranslateAnnotation(arg0 any) *MockDeltaTranslaterTranslateAnnotationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateAnnotation", reflect.TypeOf((*MockDeltaTranslater)(nil).TranslateAnnotation), arg0)
	return &MockDeltaTranslaterTranslateAnnotationCall{Call: call}
}

// MockDeltaTranslaterTranslateAnnotationCall wrap *gomock.Call
type MockDeltaTranslaterTranslateAnnotationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeltaTranslaterTranslateAnnotationCall) Return(arg0 params.EntityInfo) *MockDeltaTranslaterTranslateAnnotationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeltaTranslaterTranslateAnnotationCall) Do(f func(multiwatcher.EntityInfo) params.EntityInfo) *MockDeltaTranslaterTranslateAnnotationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeltaTranslaterTranslateAnnotationCall) DoAndReturn(f func(multiwatcher.EntityInfo) params.EntityInfo) *MockDeltaTranslaterTranslateAnnotationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TranslateApplication mocks base method.
func (m *MockDeltaTranslater) TranslateApplication(arg0 multiwatcher.EntityInfo) params.EntityInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateApplication", arg0)
	ret0, _ := ret[0].(params.EntityInfo)
	return ret0
}

// TranslateApplication indicates an expected call of TranslateApplication.
func (mr *MockDeltaTranslaterMockRecorder) TranslateApplication(arg0 any) *MockDeltaTranslaterTranslateApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateApplication", reflect.TypeOf((*MockDeltaTranslater)(nil).TranslateApplication), arg0)
	return &MockDeltaTranslaterTranslateApplicationCall{Call: call}
}

// MockDeltaTranslaterTranslateApplicationCall wrap *gomock.Call
type MockDeltaTranslaterTranslateApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeltaTranslaterTranslateApplicationCall) Return(arg0 params.EntityInfo) *MockDeltaTranslaterTranslateApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeltaTranslaterTranslateApplicationCall) Do(f func(multiwatcher.EntityInfo) params.EntityInfo) *MockDeltaTranslaterTranslateApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeltaTranslaterTranslateApplicationCall) DoAndReturn(f func(multiwatcher.EntityInfo) params.EntityInfo) *MockDeltaTranslaterTranslateApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TranslateApplicationOffer mocks base method.
func (m *MockDeltaTranslater) TranslateApplicationOffer(arg0 multiwatcher.EntityInfo) params.EntityInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateApplicationOffer", arg0)
	ret0, _ := ret[0].(params.EntityInfo)
	return ret0
}

// TranslateApplicationOffer indicates an expected call of TranslateApplicationOffer.
func (mr *MockDeltaTranslaterMockRecorder) TranslateApplicationOffer(arg0 any) *MockDeltaTranslaterTranslateApplicationOfferCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateApplicationOffer", reflect.TypeOf((*MockDeltaTranslater)(nil).TranslateApplicationOffer), arg0)
	return &MockDeltaTranslaterTranslateApplicationOfferCall{Call: call}
}

// MockDeltaTranslaterTranslateApplicationOfferCall wrap *gomock.Call
type MockDeltaTranslaterTranslateApplicationOfferCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeltaTranslaterTranslateApplicationOfferCall) Return(arg0 params.EntityInfo) *MockDeltaTranslaterTranslateApplicationOfferCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeltaTranslaterTranslateApplicationOfferCall) Do(f func(multiwatcher.EntityInfo) params.EntityInfo) *MockDeltaTranslaterTranslateApplicationOfferCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeltaTranslaterTranslateApplicationOfferCall) DoAndReturn(f func(multiwatcher.EntityInfo) params.EntityInfo) *MockDeltaTranslaterTranslateApplicationOfferCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TranslateBlock mocks base method.
func (m *MockDeltaTranslater) TranslateBlock(arg0 multiwatcher.EntityInfo) params.EntityInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateBlock", arg0)
	ret0, _ := ret[0].(params.EntityInfo)
	return ret0
}

// TranslateBlock indicates an expected call of TranslateBlock.
func (mr *MockDeltaTranslaterMockRecorder) TranslateBlock(arg0 any) *MockDeltaTranslaterTranslateBlockCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateBlock", reflect.TypeOf((*MockDeltaTranslater)(nil).TranslateBlock), arg0)
	return &MockDeltaTranslaterTranslateBlockCall{Call: call}
}

// MockDeltaTranslaterTranslateBlockCall wrap *gomock.Call
type MockDeltaTranslaterTranslateBlockCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeltaTranslaterTranslateBlockCall) Return(arg0 params.EntityInfo) *MockDeltaTranslaterTranslateBlockCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeltaTranslaterTranslateBlockCall) Do(f func(multiwatcher.EntityInfo) params.EntityInfo) *MockDeltaTranslaterTranslateBlockCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeltaTranslaterTranslateBlockCall) DoAndReturn(f func(multiwatcher.EntityInfo) params.EntityInfo) *MockDeltaTranslaterTranslateBlockCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TranslateBranch mocks base method.
func (m *MockDeltaTranslater) TranslateBranch(arg0 multiwatcher.EntityInfo) params.EntityInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateBranch", arg0)
	ret0, _ := ret[0].(params.EntityInfo)
	return ret0
}

// TranslateBranch indicates an expected call of TranslateBranch.
func (mr *MockDeltaTranslaterMockRecorder) TranslateBranch(arg0 any) *MockDeltaTranslaterTranslateBranchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateBranch", reflect.TypeOf((*MockDeltaTranslater)(nil).TranslateBranch), arg0)
	return &MockDeltaTranslaterTranslateBranchCall{Call: call}
}

// MockDeltaTranslaterTranslateBranchCall wrap *gomock.Call
type MockDeltaTranslaterTranslateBranchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeltaTranslaterTranslateBranchCall) Return(arg0 params.EntityInfo) *MockDeltaTranslaterTranslateBranchCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeltaTranslaterTranslateBranchCall) Do(f func(multiwatcher.EntityInfo) params.EntityInfo) *MockDeltaTranslaterTranslateBranchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeltaTranslaterTranslateBranchCall) DoAndReturn(f func(multiwatcher.EntityInfo) params.EntityInfo) *MockDeltaTranslaterTranslateBranchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TranslateCharm mocks base method.
func (m *MockDeltaTranslater) TranslateCharm(arg0 multiwatcher.EntityInfo) params.EntityInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateCharm", arg0)
	ret0, _ := ret[0].(params.EntityInfo)
	return ret0
}

// TranslateCharm indicates an expected call of TranslateCharm.
func (mr *MockDeltaTranslaterMockRecorder) TranslateCharm(arg0 any) *MockDeltaTranslaterTranslateCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateCharm", reflect.TypeOf((*MockDeltaTranslater)(nil).TranslateCharm), arg0)
	return &MockDeltaTranslaterTranslateCharmCall{Call: call}
}

// MockDeltaTranslaterTranslateCharmCall wrap *gomock.Call
type MockDeltaTranslaterTranslateCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeltaTranslaterTranslateCharmCall) Return(arg0 params.EntityInfo) *MockDeltaTranslaterTranslateCharmCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeltaTranslaterTranslateCharmCall) Do(f func(multiwatcher.EntityInfo) params.EntityInfo) *MockDeltaTranslaterTranslateCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeltaTranslaterTranslateCharmCall) DoAndReturn(f func(multiwatcher.EntityInfo) params.EntityInfo) *MockDeltaTranslaterTranslateCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TranslateMachine mocks base method.
func (m *MockDeltaTranslater) TranslateMachine(arg0 multiwatcher.EntityInfo) params.EntityInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateMachine", arg0)
	ret0, _ := ret[0].(params.EntityInfo)
	return ret0
}

// TranslateMachine indicates an expected call of TranslateMachine.
func (mr *MockDeltaTranslaterMockRecorder) TranslateMachine(arg0 any) *MockDeltaTranslaterTranslateMachineCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateMachine", reflect.TypeOf((*MockDeltaTranslater)(nil).TranslateMachine), arg0)
	return &MockDeltaTranslaterTranslateMachineCall{Call: call}
}

// MockDeltaTranslaterTranslateMachineCall wrap *gomock.Call
type MockDeltaTranslaterTranslateMachineCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeltaTranslaterTranslateMachineCall) Return(arg0 params.EntityInfo) *MockDeltaTranslaterTranslateMachineCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeltaTranslaterTranslateMachineCall) Do(f func(multiwatcher.EntityInfo) params.EntityInfo) *MockDeltaTranslaterTranslateMachineCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeltaTranslaterTranslateMachineCall) DoAndReturn(f func(multiwatcher.EntityInfo) params.EntityInfo) *MockDeltaTranslaterTranslateMachineCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TranslateModel mocks base method.
func (m *MockDeltaTranslater) TranslateModel(arg0 multiwatcher.EntityInfo) params.EntityInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateModel", arg0)
	ret0, _ := ret[0].(params.EntityInfo)
	return ret0
}

// TranslateModel indicates an expected call of TranslateModel.
func (mr *MockDeltaTranslaterMockRecorder) TranslateModel(arg0 any) *MockDeltaTranslaterTranslateModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateModel", reflect.TypeOf((*MockDeltaTranslater)(nil).TranslateModel), arg0)
	return &MockDeltaTranslaterTranslateModelCall{Call: call}
}

// MockDeltaTranslaterTranslateModelCall wrap *gomock.Call
type MockDeltaTranslaterTranslateModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeltaTranslaterTranslateModelCall) Return(arg0 params.EntityInfo) *MockDeltaTranslaterTranslateModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeltaTranslaterTranslateModelCall) Do(f func(multiwatcher.EntityInfo) params.EntityInfo) *MockDeltaTranslaterTranslateModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeltaTranslaterTranslateModelCall) DoAndReturn(f func(multiwatcher.EntityInfo) params.EntityInfo) *MockDeltaTranslaterTranslateModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TranslateRelation mocks base method.
func (m *MockDeltaTranslater) TranslateRelation(arg0 multiwatcher.EntityInfo) params.EntityInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateRelation", arg0)
	ret0, _ := ret[0].(params.EntityInfo)
	return ret0
}

// TranslateRelation indicates an expected call of TranslateRelation.
func (mr *MockDeltaTranslaterMockRecorder) TranslateRelation(arg0 any) *MockDeltaTranslaterTranslateRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateRelation", reflect.TypeOf((*MockDeltaTranslater)(nil).TranslateRelation), arg0)
	return &MockDeltaTranslaterTranslateRelationCall{Call: call}
}

// MockDeltaTranslaterTranslateRelationCall wrap *gomock.Call
type MockDeltaTranslaterTranslateRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeltaTranslaterTranslateRelationCall) Return(arg0 params.EntityInfo) *MockDeltaTranslaterTranslateRelationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeltaTranslaterTranslateRelationCall) Do(f func(multiwatcher.EntityInfo) params.EntityInfo) *MockDeltaTranslaterTranslateRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeltaTranslaterTranslateRelationCall) DoAndReturn(f func(multiwatcher.EntityInfo) params.EntityInfo) *MockDeltaTranslaterTranslateRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TranslateRemoteApplication mocks base method.
func (m *MockDeltaTranslater) TranslateRemoteApplication(arg0 multiwatcher.EntityInfo) params.EntityInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateRemoteApplication", arg0)
	ret0, _ := ret[0].(params.EntityInfo)
	return ret0
}

// TranslateRemoteApplication indicates an expected call of TranslateRemoteApplication.
func (mr *MockDeltaTranslaterMockRecorder) TranslateRemoteApplication(arg0 any) *MockDeltaTranslaterTranslateRemoteApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateRemoteApplication", reflect.TypeOf((*MockDeltaTranslater)(nil).TranslateRemoteApplication), arg0)
	return &MockDeltaTranslaterTranslateRemoteApplicationCall{Call: call}
}

// MockDeltaTranslaterTranslateRemoteApplicationCall wrap *gomock.Call
type MockDeltaTranslaterTranslateRemoteApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeltaTranslaterTranslateRemoteApplicationCall) Return(arg0 params.EntityInfo) *MockDeltaTranslaterTranslateRemoteApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeltaTranslaterTranslateRemoteApplicationCall) Do(f func(multiwatcher.EntityInfo) params.EntityInfo) *MockDeltaTranslaterTranslateRemoteApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeltaTranslaterTranslateRemoteApplicationCall) DoAndReturn(f func(multiwatcher.EntityInfo) params.EntityInfo) *MockDeltaTranslaterTranslateRemoteApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TranslateUnit mocks base method.
func (m *MockDeltaTranslater) TranslateUnit(arg0 multiwatcher.EntityInfo) params.EntityInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateUnit", arg0)
	ret0, _ := ret[0].(params.EntityInfo)
	return ret0
}

// TranslateUnit indicates an expected call of TranslateUnit.
func (mr *MockDeltaTranslaterMockRecorder) TranslateUnit(arg0 any) *MockDeltaTranslaterTranslateUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateUnit", reflect.TypeOf((*MockDeltaTranslater)(nil).TranslateUnit), arg0)
	return &MockDeltaTranslaterTranslateUnitCall{Call: call}
}

// MockDeltaTranslaterTranslateUnitCall wrap *gomock.Call
type MockDeltaTranslaterTranslateUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeltaTranslaterTranslateUnitCall) Return(arg0 params.EntityInfo) *MockDeltaTranslaterTranslateUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeltaTranslaterTranslateUnitCall) Do(f func(multiwatcher.EntityInfo) params.EntityInfo) *MockDeltaTranslaterTranslateUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeltaTranslaterTranslateUnitCall) DoAndReturn(f func(multiwatcher.EntityInfo) params.EntityInfo) *MockDeltaTranslaterTranslateUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
