// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/state (interfaces: Resources)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/resources_mock.go github.com/juju/juju/state Resources
//

// Package mocks is a generated GoMock package.
package mocks

import (
	io "io"
	reflect "reflect"
	time "time"

	resource "github.com/juju/juju/internal/charm/resource"
	resources "github.com/juju/juju/core/resources"
	state "github.com/juju/juju/state"
	gomock "go.uber.org/mock/gomock"
)

// MockResources is a mock of Resources interface.
type MockResources struct {
	ctrl     *gomock.Controller
	recorder *MockResourcesMockRecorder
}

// MockResourcesMockRecorder is the mock recorder for MockResources.
type MockResourcesMockRecorder struct {
	mock *MockResources
}

// NewMockResources creates a new mock instance.
func NewMockResources(ctrl *gomock.Controller) *MockResources {
	mock := &MockResources{ctrl: ctrl}
	mock.recorder = &MockResourcesMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResources) EXPECT() *MockResourcesMockRecorder {
	return m.recorder
}

// AddPendingResource mocks base method.
func (m *MockResources) AddPendingResource(arg0, arg1 string, arg2 resource.Resource) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPendingResource", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddPendingResource indicates an expected call of AddPendingResource.
func (mr *MockResourcesMockRecorder) AddPendingResource(arg0, arg1, arg2 any) *MockResourcesAddPendingResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPendingResource", reflect.TypeOf((*MockResources)(nil).AddPendingResource), arg0, arg1, arg2)
	return &MockResourcesAddPendingResourceCall{Call: call}
}

// MockResourcesAddPendingResourceCall wrap *gomock.Call
type MockResourcesAddPendingResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourcesAddPendingResourceCall) Return(arg0 string, arg1 error) *MockResourcesAddPendingResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourcesAddPendingResourceCall) Do(f func(string, string, resource.Resource) (string, error)) *MockResourcesAddPendingResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourcesAddPendingResourceCall) DoAndReturn(f func(string, string, resource.Resource) (string, error)) *MockResourcesAddPendingResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPendingResource mocks base method.
func (m *MockResources) GetPendingResource(arg0, arg1, arg2 string) (resources.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPendingResource", arg0, arg1, arg2)
	ret0, _ := ret[0].(resources.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPendingResource indicates an expected call of GetPendingResource.
func (mr *MockResourcesMockRecorder) GetPendingResource(arg0, arg1, arg2 any) *MockResourcesGetPendingResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPendingResource", reflect.TypeOf((*MockResources)(nil).GetPendingResource), arg0, arg1, arg2)
	return &MockResourcesGetPendingResourceCall{Call: call}
}

// MockResourcesGetPendingResourceCall wrap *gomock.Call
type MockResourcesGetPendingResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourcesGetPendingResourceCall) Return(arg0 resources.Resource, arg1 error) *MockResourcesGetPendingResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourcesGetPendingResourceCall) Do(f func(string, string, string) (resources.Resource, error)) *MockResourcesGetPendingResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourcesGetPendingResourceCall) DoAndReturn(f func(string, string, string) (resources.Resource, error)) *MockResourcesGetPendingResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetResource mocks base method.
func (m *MockResources) GetResource(arg0, arg1 string) (resources.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", arg0, arg1)
	ret0, _ := ret[0].(resources.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockResourcesMockRecorder) GetResource(arg0, arg1 any) *MockResourcesGetResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockResources)(nil).GetResource), arg0, arg1)
	return &MockResourcesGetResourceCall{Call: call}
}

// MockResourcesGetResourceCall wrap *gomock.Call
type MockResourcesGetResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourcesGetResourceCall) Return(arg0 resources.Resource, arg1 error) *MockResourcesGetResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourcesGetResourceCall) Do(f func(string, string) (resources.Resource, error)) *MockResourcesGetResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourcesGetResourceCall) DoAndReturn(f func(string, string) (resources.Resource, error)) *MockResourcesGetResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListPendingResources mocks base method.
func (m *MockResources) ListPendingResources(arg0 string) (resources.ApplicationResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPendingResources", arg0)
	ret0, _ := ret[0].(resources.ApplicationResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPendingResources indicates an expected call of ListPendingResources.
func (mr *MockResourcesMockRecorder) ListPendingResources(arg0 any) *MockResourcesListPendingResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPendingResources", reflect.TypeOf((*MockResources)(nil).ListPendingResources), arg0)
	return &MockResourcesListPendingResourcesCall{Call: call}
}

// MockResourcesListPendingResourcesCall wrap *gomock.Call
type MockResourcesListPendingResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourcesListPendingResourcesCall) Return(arg0 resources.ApplicationResources, arg1 error) *MockResourcesListPendingResourcesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourcesListPendingResourcesCall) Do(f func(string) (resources.ApplicationResources, error)) *MockResourcesListPendingResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourcesListPendingResourcesCall) DoAndReturn(f func(string) (resources.ApplicationResources, error)) *MockResourcesListPendingResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListResources mocks base method.
func (m *MockResources) ListResources(arg0 string) (resources.ApplicationResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResources", arg0)
	ret0, _ := ret[0].(resources.ApplicationResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResources indicates an expected call of ListResources.
func (mr *MockResourcesMockRecorder) ListResources(arg0 any) *MockResourcesListResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockResources)(nil).ListResources), arg0)
	return &MockResourcesListResourcesCall{Call: call}
}

// MockResourcesListResourcesCall wrap *gomock.Call
type MockResourcesListResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourcesListResourcesCall) Return(arg0 resources.ApplicationResources, arg1 error) *MockResourcesListResourcesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourcesListResourcesCall) Do(f func(string) (resources.ApplicationResources, error)) *MockResourcesListResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourcesListResourcesCall) DoAndReturn(f func(string) (resources.ApplicationResources, error)) *MockResourcesListResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenResource mocks base method.
func (m *MockResources) OpenResource(arg0, arg1 string) (resources.Resource, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenResource", arg0, arg1)
	ret0, _ := ret[0].(resources.Resource)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OpenResource indicates an expected call of OpenResource.
func (mr *MockResourcesMockRecorder) OpenResource(arg0, arg1 any) *MockResourcesOpenResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenResource", reflect.TypeOf((*MockResources)(nil).OpenResource), arg0, arg1)
	return &MockResourcesOpenResourceCall{Call: call}
}

// MockResourcesOpenResourceCall wrap *gomock.Call
type MockResourcesOpenResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourcesOpenResourceCall) Return(arg0 resources.Resource, arg1 io.ReadCloser, arg2 error) *MockResourcesOpenResourceCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourcesOpenResourceCall) Do(f func(string, string) (resources.Resource, io.ReadCloser, error)) *MockResourcesOpenResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourcesOpenResourceCall) DoAndReturn(f func(string, string) (resources.Resource, io.ReadCloser, error)) *MockResourcesOpenResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenResourceForUniter mocks base method.
func (m *MockResources) OpenResourceForUniter(arg0, arg1 string) (resources.Resource, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenResourceForUniter", arg0, arg1)
	ret0, _ := ret[0].(resources.Resource)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OpenResourceForUniter indicates an expected call of OpenResourceForUniter.
func (mr *MockResourcesMockRecorder) OpenResourceForUniter(arg0, arg1 any) *MockResourcesOpenResourceForUniterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenResourceForUniter", reflect.TypeOf((*MockResources)(nil).OpenResourceForUniter), arg0, arg1)
	return &MockResourcesOpenResourceForUniterCall{Call: call}
}

// MockResourcesOpenResourceForUniterCall wrap *gomock.Call
type MockResourcesOpenResourceForUniterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourcesOpenResourceForUniterCall) Return(arg0 resources.Resource, arg1 io.ReadCloser, arg2 error) *MockResourcesOpenResourceForUniterCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourcesOpenResourceForUniterCall) Do(f func(string, string) (resources.Resource, io.ReadCloser, error)) *MockResourcesOpenResourceForUniterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourcesOpenResourceForUniterCall) DoAndReturn(f func(string, string) (resources.Resource, io.ReadCloser, error)) *MockResourcesOpenResourceForUniterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemovePendingAppResources mocks base method.
func (m *MockResources) RemovePendingAppResources(arg0 string, arg1 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemovePendingAppResources", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemovePendingAppResources indicates an expected call of RemovePendingAppResources.
func (mr *MockResourcesMockRecorder) RemovePendingAppResources(arg0, arg1 any) *MockResourcesRemovePendingAppResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemovePendingAppResources", reflect.TypeOf((*MockResources)(nil).RemovePendingAppResources), arg0, arg1)
	return &MockResourcesRemovePendingAppResourcesCall{Call: call}
}

// MockResourcesRemovePendingAppResourcesCall wrap *gomock.Call
type MockResourcesRemovePendingAppResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourcesRemovePendingAppResourcesCall) Return(arg0 error) *MockResourcesRemovePendingAppResourcesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourcesRemovePendingAppResourcesCall) Do(f func(string, map[string]string) error) *MockResourcesRemovePendingAppResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourcesRemovePendingAppResourcesCall) DoAndReturn(f func(string, map[string]string) error) *MockResourcesRemovePendingAppResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCharmStoreResources mocks base method.
func (m *MockResources) SetCharmStoreResources(arg0 string, arg1 []resource.Resource, arg2 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCharmStoreResources", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCharmStoreResources indicates an expected call of SetCharmStoreResources.
func (mr *MockResourcesMockRecorder) SetCharmStoreResources(arg0, arg1, arg2 any) *MockResourcesSetCharmStoreResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCharmStoreResources", reflect.TypeOf((*MockResources)(nil).SetCharmStoreResources), arg0, arg1, arg2)
	return &MockResourcesSetCharmStoreResourcesCall{Call: call}
}

// MockResourcesSetCharmStoreResourcesCall wrap *gomock.Call
type MockResourcesSetCharmStoreResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourcesSetCharmStoreResourcesCall) Return(arg0 error) *MockResourcesSetCharmStoreResourcesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourcesSetCharmStoreResourcesCall) Do(f func(string, []resource.Resource, time.Time) error) *MockResourcesSetCharmStoreResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourcesSetCharmStoreResourcesCall) DoAndReturn(f func(string, []resource.Resource, time.Time) error) *MockResourcesSetCharmStoreResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetResource mocks base method.
func (m *MockResources) SetResource(arg0, arg1 string, arg2 resource.Resource, arg3 io.Reader, arg4 state.IncrementCharmModifiedVersionType) (resources.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetResource", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(resources.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetResource indicates an expected call of SetResource.
func (mr *MockResourcesMockRecorder) SetResource(arg0, arg1, arg2, arg3, arg4 any) *MockResourcesSetResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResource", reflect.TypeOf((*MockResources)(nil).SetResource), arg0, arg1, arg2, arg3, arg4)
	return &MockResourcesSetResourceCall{Call: call}
}

// MockResourcesSetResourceCall wrap *gomock.Call
type MockResourcesSetResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourcesSetResourceCall) Return(arg0 resources.Resource, arg1 error) *MockResourcesSetResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourcesSetResourceCall) Do(f func(string, string, resource.Resource, io.Reader, state.IncrementCharmModifiedVersionType) (resources.Resource, error)) *MockResourcesSetResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourcesSetResourceCall) DoAndReturn(f func(string, string, resource.Resource, io.Reader, state.IncrementCharmModifiedVersionType) (resources.Resource, error)) *MockResourcesSetResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitResource mocks base method.
func (m *MockResources) SetUnitResource(arg0, arg1 string, arg2 resource.Resource) (resources.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitResource", arg0, arg1, arg2)
	ret0, _ := ret[0].(resources.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUnitResource indicates an expected call of SetUnitResource.
func (mr *MockResourcesMockRecorder) SetUnitResource(arg0, arg1, arg2 any) *MockResourcesSetUnitResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitResource", reflect.TypeOf((*MockResources)(nil).SetUnitResource), arg0, arg1, arg2)
	return &MockResourcesSetUnitResourceCall{Call: call}
}

// MockResourcesSetUnitResourceCall wrap *gomock.Call
type MockResourcesSetUnitResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourcesSetUnitResourceCall) Return(arg0 resources.Resource, arg1 error) *MockResourcesSetUnitResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourcesSetUnitResourceCall) Do(f func(string, string, resource.Resource) (resources.Resource, error)) *MockResourcesSetUnitResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourcesSetUnitResourceCall) DoAndReturn(f func(string, string, resource.Resource) (resources.Resource, error)) *MockResourcesSetUnitResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdatePendingResource mocks base method.
func (m *MockResources) UpdatePendingResource(arg0, arg1, arg2 string, arg3 resource.Resource, arg4 io.Reader) (resources.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePendingResource", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(resources.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePendingResource indicates an expected call of UpdatePendingResource.
func (mr *MockResourcesMockRecorder) UpdatePendingResource(arg0, arg1, arg2, arg3, arg4 any) *MockResourcesUpdatePendingResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePendingResource", reflect.TypeOf((*MockResources)(nil).UpdatePendingResource), arg0, arg1, arg2, arg3, arg4)
	return &MockResourcesUpdatePendingResourceCall{Call: call}
}

// MockResourcesUpdatePendingResourceCall wrap *gomock.Call
type MockResourcesUpdatePendingResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourcesUpdatePendingResourceCall) Return(arg0 resources.Resource, arg1 error) *MockResourcesUpdatePendingResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourcesUpdatePendingResourceCall) Do(f func(string, string, string, resource.Resource, io.Reader) (resources.Resource, error)) *MockResourcesUpdatePendingResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourcesUpdatePendingResourceCall) DoAndReturn(f func(string, string, string, resource.Resource, io.Reader) (resources.Resource, error)) *MockResourcesUpdatePendingResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
