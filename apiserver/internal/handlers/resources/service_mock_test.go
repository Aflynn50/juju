// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/internal/handlers/resources (interfaces: ResourceServiceGetter,ApplicationServiceGetter,ApplicationService,ResourceService,ResourceOpenerGetter)
//
// Generated by this command:
//
//	mockgen -typed -package resources -destination service_mock_test.go github.com/juju/juju/apiserver/internal/handlers/resources ResourceServiceGetter,ApplicationServiceGetter,ApplicationService,ResourceService,ResourceOpenerGetter
//

// Package resources is a generated GoMock package.
package resources

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	resource "github.com/juju/juju/core/resource"
	unit "github.com/juju/juju/core/unit"
	resource0 "github.com/juju/juju/domain/resource"
	gomock "go.uber.org/mock/gomock"
)

// MockResourceServiceGetter is a mock of ResourceServiceGetter interface.
type MockResourceServiceGetter struct {
	ctrl     *gomock.Controller
	recorder *MockResourceServiceGetterMockRecorder
}

// MockResourceServiceGetterMockRecorder is the mock recorder for MockResourceServiceGetter.
type MockResourceServiceGetterMockRecorder struct {
	mock *MockResourceServiceGetter
}

// NewMockResourceServiceGetter creates a new mock instance.
func NewMockResourceServiceGetter(ctrl *gomock.Controller) *MockResourceServiceGetter {
	mock := &MockResourceServiceGetter{ctrl: ctrl}
	mock.recorder = &MockResourceServiceGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceServiceGetter) EXPECT() *MockResourceServiceGetterMockRecorder {
	return m.recorder
}

// Resource mocks base method.
func (m *MockResourceServiceGetter) Resource(arg0 *http.Request) (ResourceService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resource", arg0)
	ret0, _ := ret[0].(ResourceService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resource indicates an expected call of Resource.
func (mr *MockResourceServiceGetterMockRecorder) Resource(arg0 any) *MockResourceServiceGetterResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resource", reflect.TypeOf((*MockResourceServiceGetter)(nil).Resource), arg0)
	return &MockResourceServiceGetterResourceCall{Call: call}
}

// MockResourceServiceGetterResourceCall wrap *gomock.Call
type MockResourceServiceGetterResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceServiceGetterResourceCall) Return(arg0 ResourceService, arg1 error) *MockResourceServiceGetterResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceServiceGetterResourceCall) Do(f func(*http.Request) (ResourceService, error)) *MockResourceServiceGetterResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceServiceGetterResourceCall) DoAndReturn(f func(*http.Request) (ResourceService, error)) *MockResourceServiceGetterResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationServiceGetter is a mock of ApplicationServiceGetter interface.
type MockApplicationServiceGetter struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceGetterMockRecorder
}

// MockApplicationServiceGetterMockRecorder is the mock recorder for MockApplicationServiceGetter.
type MockApplicationServiceGetterMockRecorder struct {
	mock *MockApplicationServiceGetter
}

// NewMockApplicationServiceGetter creates a new mock instance.
func NewMockApplicationServiceGetter(ctrl *gomock.Controller) *MockApplicationServiceGetter {
	mock := &MockApplicationServiceGetter{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationServiceGetter) EXPECT() *MockApplicationServiceGetterMockRecorder {
	return m.recorder
}

// Application mocks base method.
func (m *MockApplicationServiceGetter) Application(arg0 *http.Request) (ApplicationService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Application", arg0)
	ret0, _ := ret[0].(ApplicationService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Application indicates an expected call of Application.
func (mr *MockApplicationServiceGetterMockRecorder) Application(arg0 any) *MockApplicationServiceGetterApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockApplicationServiceGetter)(nil).Application), arg0)
	return &MockApplicationServiceGetterApplicationCall{Call: call}
}

// MockApplicationServiceGetterApplicationCall wrap *gomock.Call
type MockApplicationServiceGetterApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetterApplicationCall) Return(arg0 ApplicationService, arg1 error) *MockApplicationServiceGetterApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetterApplicationCall) Do(f func(*http.Request) (ApplicationService, error)) *MockApplicationServiceGetterApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetterApplicationCall) DoAndReturn(f func(*http.Request) (ApplicationService, error)) *MockApplicationServiceGetterApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// GetApplicationIDByName mocks base method.
func (m *MockApplicationService) GetApplicationIDByName(arg0 context.Context, arg1 string) (application.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationIDByName", arg0, arg1)
	ret0, _ := ret[0].(application.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationIDByName indicates an expected call of GetApplicationIDByName.
func (mr *MockApplicationServiceMockRecorder) GetApplicationIDByName(arg0, arg1 any) *MockApplicationServiceGetApplicationIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationIDByName", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationIDByName), arg0, arg1)
	return &MockApplicationServiceGetApplicationIDByNameCall{Call: call}
}

// MockApplicationServiceGetApplicationIDByNameCall wrap *gomock.Call
type MockApplicationServiceGetApplicationIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationIDByNameCall) Return(arg0 application.ID, arg1 error) *MockApplicationServiceGetApplicationIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationIDByNameCall) Do(f func(context.Context, string) (application.ID, error)) *MockApplicationServiceGetApplicationIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationIDByNameCall) DoAndReturn(f func(context.Context, string) (application.ID, error)) *MockApplicationServiceGetApplicationIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationIDByUnitName mocks base method.
func (m *MockApplicationService) GetApplicationIDByUnitName(arg0 context.Context, arg1 unit.Name) (application.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationIDByUnitName", arg0, arg1)
	ret0, _ := ret[0].(application.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationIDByUnitName indicates an expected call of GetApplicationIDByUnitName.
func (mr *MockApplicationServiceMockRecorder) GetApplicationIDByUnitName(arg0, arg1 any) *MockApplicationServiceGetApplicationIDByUnitNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationIDByUnitName", reflect.TypeOf((*MockApplicationService)(nil).GetApplicationIDByUnitName), arg0, arg1)
	return &MockApplicationServiceGetApplicationIDByUnitNameCall{Call: call}
}

// MockApplicationServiceGetApplicationIDByUnitNameCall wrap *gomock.Call
type MockApplicationServiceGetApplicationIDByUnitNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetApplicationIDByUnitNameCall) Return(arg0 application.ID, arg1 error) *MockApplicationServiceGetApplicationIDByUnitNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetApplicationIDByUnitNameCall) Do(f func(context.Context, unit.Name) (application.ID, error)) *MockApplicationServiceGetApplicationIDByUnitNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetApplicationIDByUnitNameCall) DoAndReturn(f func(context.Context, unit.Name) (application.ID, error)) *MockApplicationServiceGetApplicationIDByUnitNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUID mocks base method.
func (m *MockApplicationService) GetUnitUUID(arg0 context.Context, arg1 unit.Name) (unit.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUID", arg0, arg1)
	ret0, _ := ret[0].(unit.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUID indicates an expected call of GetUnitUUID.
func (mr *MockApplicationServiceMockRecorder) GetUnitUUID(arg0, arg1 any) *MockApplicationServiceGetUnitUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUID", reflect.TypeOf((*MockApplicationService)(nil).GetUnitUUID), arg0, arg1)
	return &MockApplicationServiceGetUnitUUIDCall{Call: call}
}

// MockApplicationServiceGetUnitUUIDCall wrap *gomock.Call
type MockApplicationServiceGetUnitUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetUnitUUIDCall) Return(arg0 unit.UUID, arg1 error) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetUnitUUIDCall) Do(f func(context.Context, unit.Name) (unit.UUID, error)) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetUnitUUIDCall) DoAndReturn(f func(context.Context, unit.Name) (unit.UUID, error)) *MockApplicationServiceGetUnitUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockResourceService is a mock of ResourceService interface.
type MockResourceService struct {
	ctrl     *gomock.Controller
	recorder *MockResourceServiceMockRecorder
}

// MockResourceServiceMockRecorder is the mock recorder for MockResourceService.
type MockResourceServiceMockRecorder struct {
	mock *MockResourceService
}

// NewMockResourceService creates a new mock instance.
func NewMockResourceService(ctrl *gomock.Controller) *MockResourceService {
	mock := &MockResourceService{ctrl: ctrl}
	mock.recorder = &MockResourceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceService) EXPECT() *MockResourceServiceMockRecorder {
	return m.recorder
}

// GetApplicationResourceID mocks base method.
func (m *MockResourceService) GetApplicationResourceID(arg0 context.Context, arg1 resource0.GetApplicationResourceIDArgs) (resource.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationResourceID", arg0, arg1)
	ret0, _ := ret[0].(resource.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationResourceID indicates an expected call of GetApplicationResourceID.
func (mr *MockResourceServiceMockRecorder) GetApplicationResourceID(arg0, arg1 any) *MockResourceServiceGetApplicationResourceIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationResourceID", reflect.TypeOf((*MockResourceService)(nil).GetApplicationResourceID), arg0, arg1)
	return &MockResourceServiceGetApplicationResourceIDCall{Call: call}
}

// MockResourceServiceGetApplicationResourceIDCall wrap *gomock.Call
type MockResourceServiceGetApplicationResourceIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceServiceGetApplicationResourceIDCall) Return(arg0 resource.UUID, arg1 error) *MockResourceServiceGetApplicationResourceIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceServiceGetApplicationResourceIDCall) Do(f func(context.Context, resource0.GetApplicationResourceIDArgs) (resource.UUID, error)) *MockResourceServiceGetApplicationResourceIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceServiceGetApplicationResourceIDCall) DoAndReturn(f func(context.Context, resource0.GetApplicationResourceIDArgs) (resource.UUID, error)) *MockResourceServiceGetApplicationResourceIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetResource mocks base method.
func (m *MockResourceService) GetResource(arg0 context.Context, arg1 resource.UUID) (resource.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", arg0, arg1)
	ret0, _ := ret[0].(resource.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockResourceServiceMockRecorder) GetResource(arg0, arg1 any) *MockResourceServiceGetResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockResourceService)(nil).GetResource), arg0, arg1)
	return &MockResourceServiceGetResourceCall{Call: call}
}

// MockResourceServiceGetResourceCall wrap *gomock.Call
type MockResourceServiceGetResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceServiceGetResourceCall) Return(arg0 resource.Resource, arg1 error) *MockResourceServiceGetResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceServiceGetResourceCall) Do(f func(context.Context, resource.UUID) (resource.Resource, error)) *MockResourceServiceGetResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceServiceGetResourceCall) DoAndReturn(f func(context.Context, resource.UUID) (resource.Resource, error)) *MockResourceServiceGetResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetResourceUUIDByApplicationAndResourceName mocks base method.
func (m *MockResourceService) GetResourceUUIDByApplicationAndResourceName(arg0 context.Context, arg1, arg2 string) (resource.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceUUIDByApplicationAndResourceName", arg0, arg1, arg2)
	ret0, _ := ret[0].(resource.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceUUIDByApplicationAndResourceName indicates an expected call of GetResourceUUIDByApplicationAndResourceName.
func (mr *MockResourceServiceMockRecorder) GetResourceUUIDByApplicationAndResourceName(arg0, arg1, arg2 any) *MockResourceServiceGetResourceUUIDByApplicationAndResourceNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceUUIDByApplicationAndResourceName", reflect.TypeOf((*MockResourceService)(nil).GetResourceUUIDByApplicationAndResourceName), arg0, arg1, arg2)
	return &MockResourceServiceGetResourceUUIDByApplicationAndResourceNameCall{Call: call}
}

// MockResourceServiceGetResourceUUIDByApplicationAndResourceNameCall wrap *gomock.Call
type MockResourceServiceGetResourceUUIDByApplicationAndResourceNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceServiceGetResourceUUIDByApplicationAndResourceNameCall) Return(arg0 resource.UUID, arg1 error) *MockResourceServiceGetResourceUUIDByApplicationAndResourceNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceServiceGetResourceUUIDByApplicationAndResourceNameCall) Do(f func(context.Context, string, string) (resource.UUID, error)) *MockResourceServiceGetResourceUUIDByApplicationAndResourceNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceServiceGetResourceUUIDByApplicationAndResourceNameCall) DoAndReturn(f func(context.Context, string, string) (resource.UUID, error)) *MockResourceServiceGetResourceUUIDByApplicationAndResourceNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenResource mocks base method.
func (m *MockResourceService) OpenResource(arg0 context.Context, arg1 resource.UUID) (resource.Resource, io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenResource", arg0, arg1)
	ret0, _ := ret[0].(resource.Resource)
	ret1, _ := ret[1].(io.ReadCloser)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// OpenResource indicates an expected call of OpenResource.
func (mr *MockResourceServiceMockRecorder) OpenResource(arg0, arg1 any) *MockResourceServiceOpenResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenResource", reflect.TypeOf((*MockResourceService)(nil).OpenResource), arg0, arg1)
	return &MockResourceServiceOpenResourceCall{Call: call}
}

// MockResourceServiceOpenResourceCall wrap *gomock.Call
type MockResourceServiceOpenResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceServiceOpenResourceCall) Return(arg0 resource.Resource, arg1 io.ReadCloser, arg2 error) *MockResourceServiceOpenResourceCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceServiceOpenResourceCall) Do(f func(context.Context, resource.UUID) (resource.Resource, io.ReadCloser, error)) *MockResourceServiceOpenResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceServiceOpenResourceCall) DoAndReturn(f func(context.Context, resource.UUID) (resource.Resource, io.ReadCloser, error)) *MockResourceServiceOpenResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitResource mocks base method.
func (m *MockResourceService) SetUnitResource(arg0 context.Context, arg1 resource.UUID, arg2 unit.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitResource", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitResource indicates an expected call of SetUnitResource.
func (mr *MockResourceServiceMockRecorder) SetUnitResource(arg0, arg1, arg2 any) *MockResourceServiceSetUnitResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitResource", reflect.TypeOf((*MockResourceService)(nil).SetUnitResource), arg0, arg1, arg2)
	return &MockResourceServiceSetUnitResourceCall{Call: call}
}

// MockResourceServiceSetUnitResourceCall wrap *gomock.Call
type MockResourceServiceSetUnitResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceServiceSetUnitResourceCall) Return(arg0 error) *MockResourceServiceSetUnitResourceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceServiceSetUnitResourceCall) Do(f func(context.Context, resource.UUID, unit.UUID) error) *MockResourceServiceSetUnitResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceServiceSetUnitResourceCall) DoAndReturn(f func(context.Context, resource.UUID, unit.UUID) error) *MockResourceServiceSetUnitResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StoreResource mocks base method.
func (m *MockResourceService) StoreResource(arg0 context.Context, arg1 resource0.StoreResourceArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreResource", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreResource indicates an expected call of StoreResource.
func (mr *MockResourceServiceMockRecorder) StoreResource(arg0, arg1 any) *MockResourceServiceStoreResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreResource", reflect.TypeOf((*MockResourceService)(nil).StoreResource), arg0, arg1)
	return &MockResourceServiceStoreResourceCall{Call: call}
}

// MockResourceServiceStoreResourceCall wrap *gomock.Call
type MockResourceServiceStoreResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceServiceStoreResourceCall) Return(arg0 error) *MockResourceServiceStoreResourceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceServiceStoreResourceCall) Do(f func(context.Context, resource0.StoreResourceArgs) error) *MockResourceServiceStoreResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceServiceStoreResourceCall) DoAndReturn(f func(context.Context, resource0.StoreResourceArgs) error) *MockResourceServiceStoreResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StoreResourceAndIncrementCharmModifiedVersion mocks base method.
func (m *MockResourceService) StoreResourceAndIncrementCharmModifiedVersion(arg0 context.Context, arg1 resource0.StoreResourceArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreResourceAndIncrementCharmModifiedVersion", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreResourceAndIncrementCharmModifiedVersion indicates an expected call of StoreResourceAndIncrementCharmModifiedVersion.
func (mr *MockResourceServiceMockRecorder) StoreResourceAndIncrementCharmModifiedVersion(arg0, arg1 any) *MockResourceServiceStoreResourceAndIncrementCharmModifiedVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreResourceAndIncrementCharmModifiedVersion", reflect.TypeOf((*MockResourceService)(nil).StoreResourceAndIncrementCharmModifiedVersion), arg0, arg1)
	return &MockResourceServiceStoreResourceAndIncrementCharmModifiedVersionCall{Call: call}
}

// MockResourceServiceStoreResourceAndIncrementCharmModifiedVersionCall wrap *gomock.Call
type MockResourceServiceStoreResourceAndIncrementCharmModifiedVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceServiceStoreResourceAndIncrementCharmModifiedVersionCall) Return(arg0 error) *MockResourceServiceStoreResourceAndIncrementCharmModifiedVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceServiceStoreResourceAndIncrementCharmModifiedVersionCall) Do(f func(context.Context, resource0.StoreResourceArgs) error) *MockResourceServiceStoreResourceAndIncrementCharmModifiedVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceServiceStoreResourceAndIncrementCharmModifiedVersionCall) DoAndReturn(f func(context.Context, resource0.StoreResourceArgs) error) *MockResourceServiceStoreResourceAndIncrementCharmModifiedVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockResourceOpenerGetter is a mock of ResourceOpenerGetter interface.
type MockResourceOpenerGetter struct {
	ctrl     *gomock.Controller
	recorder *MockResourceOpenerGetterMockRecorder
}

// MockResourceOpenerGetterMockRecorder is the mock recorder for MockResourceOpenerGetter.
type MockResourceOpenerGetterMockRecorder struct {
	mock *MockResourceOpenerGetter
}

// NewMockResourceOpenerGetter creates a new mock instance.
func NewMockResourceOpenerGetter(ctrl *gomock.Controller) *MockResourceOpenerGetter {
	mock := &MockResourceOpenerGetter{ctrl: ctrl}
	mock.recorder = &MockResourceOpenerGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceOpenerGetter) EXPECT() *MockResourceOpenerGetterMockRecorder {
	return m.recorder
}

// Opener mocks base method.
func (m *MockResourceOpenerGetter) Opener(arg0 *http.Request, arg1 ...string) (resource.Opener, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Opener", varargs...)
	ret0, _ := ret[0].(resource.Opener)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Opener indicates an expected call of Opener.
func (mr *MockResourceOpenerGetterMockRecorder) Opener(arg0 any, arg1 ...any) *MockResourceOpenerGetterOpenerCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Opener", reflect.TypeOf((*MockResourceOpenerGetter)(nil).Opener), varargs...)
	return &MockResourceOpenerGetterOpenerCall{Call: call}
}

// MockResourceOpenerGetterOpenerCall wrap *gomock.Call
type MockResourceOpenerGetterOpenerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceOpenerGetterOpenerCall) Return(arg0 resource.Opener, arg1 error) *MockResourceOpenerGetterOpenerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceOpenerGetterOpenerCall) Do(f func(*http.Request, ...string) (resource.Opener, error)) *MockResourceOpenerGetterOpenerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceOpenerGetterOpenerCall) DoAndReturn(f func(*http.Request, ...string) (resource.Opener, error)) *MockResourceOpenerGetterOpenerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
