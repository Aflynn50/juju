// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/internal/handlers/objects (interfaces: ApplicationServiceGetter,ApplicationService,StateGetter,State,ObjectStoreServiceGetter,ObjectStoreService)
//
// Generated by this command:
//
//	mockgen -typed -package objects -destination service_mock_test.go github.com/juju/juju/apiserver/internal/handlers/objects ApplicationServiceGetter,ApplicationService,StateGetter,State,ObjectStoreServiceGetter,ObjectStoreService
//

// Package objects is a generated GoMock package.
package objects

import (
	context "context"
	io "io"
	http "net/http"
	reflect "reflect"

	charm "github.com/juju/juju/domain/application/charm"
	state "github.com/juju/juju/state"
	gomock "go.uber.org/mock/gomock"
)

// MockApplicationServiceGetter is a mock of ApplicationServiceGetter interface.
type MockApplicationServiceGetter struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceGetterMockRecorder
}

// MockApplicationServiceGetterMockRecorder is the mock recorder for MockApplicationServiceGetter.
type MockApplicationServiceGetterMockRecorder struct {
	mock *MockApplicationServiceGetter
}

// NewMockApplicationServiceGetter creates a new mock instance.
func NewMockApplicationServiceGetter(ctrl *gomock.Controller) *MockApplicationServiceGetter {
	mock := &MockApplicationServiceGetter{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationServiceGetter) EXPECT() *MockApplicationServiceGetterMockRecorder {
	return m.recorder
}

// Application mocks base method.
func (m *MockApplicationServiceGetter) Application(arg0 *http.Request) (ApplicationService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Application", arg0)
	ret0, _ := ret[0].(ApplicationService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Application indicates an expected call of Application.
func (mr *MockApplicationServiceGetterMockRecorder) Application(arg0 any) *MockApplicationServiceGetterApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Application", reflect.TypeOf((*MockApplicationServiceGetter)(nil).Application), arg0)
	return &MockApplicationServiceGetterApplicationCall{Call: call}
}

// MockApplicationServiceGetterApplicationCall wrap *gomock.Call
type MockApplicationServiceGetterApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetterApplicationCall) Return(arg0 ApplicationService, arg1 error) *MockApplicationServiceGetterApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetterApplicationCall) Do(f func(*http.Request) (ApplicationService, error)) *MockApplicationServiceGetterApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetterApplicationCall) DoAndReturn(f func(*http.Request) (ApplicationService, error)) *MockApplicationServiceGetterApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockApplicationService is a mock of ApplicationService interface.
type MockApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationServiceMockRecorder
}

// MockApplicationServiceMockRecorder is the mock recorder for MockApplicationService.
type MockApplicationServiceMockRecorder struct {
	mock *MockApplicationService
}

// NewMockApplicationService creates a new mock instance.
func NewMockApplicationService(ctrl *gomock.Controller) *MockApplicationService {
	mock := &MockApplicationService{ctrl: ctrl}
	mock.recorder = &MockApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationService) EXPECT() *MockApplicationServiceMockRecorder {
	return m.recorder
}

// GetCharmArchiveBySHA256Prefix mocks base method.
func (m *MockApplicationService) GetCharmArchiveBySHA256Prefix(arg0 context.Context, arg1 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmArchiveBySHA256Prefix", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmArchiveBySHA256Prefix indicates an expected call of GetCharmArchiveBySHA256Prefix.
func (mr *MockApplicationServiceMockRecorder) GetCharmArchiveBySHA256Prefix(arg0, arg1 any) *MockApplicationServiceGetCharmArchiveBySHA256PrefixCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmArchiveBySHA256Prefix", reflect.TypeOf((*MockApplicationService)(nil).GetCharmArchiveBySHA256Prefix), arg0, arg1)
	return &MockApplicationServiceGetCharmArchiveBySHA256PrefixCall{Call: call}
}

// MockApplicationServiceGetCharmArchiveBySHA256PrefixCall wrap *gomock.Call
type MockApplicationServiceGetCharmArchiveBySHA256PrefixCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceGetCharmArchiveBySHA256PrefixCall) Return(arg0 io.ReadCloser, arg1 error) *MockApplicationServiceGetCharmArchiveBySHA256PrefixCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceGetCharmArchiveBySHA256PrefixCall) Do(f func(context.Context, string) (io.ReadCloser, error)) *MockApplicationServiceGetCharmArchiveBySHA256PrefixCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceGetCharmArchiveBySHA256PrefixCall) DoAndReturn(f func(context.Context, string) (io.ReadCloser, error)) *MockApplicationServiceGetCharmArchiveBySHA256PrefixCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResolveUploadCharm mocks base method.
func (m *MockApplicationService) ResolveUploadCharm(arg0 context.Context, arg1 charm.ResolveUploadCharm) (charm.CharmLocator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveUploadCharm", arg0, arg1)
	ret0, _ := ret[0].(charm.CharmLocator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResolveUploadCharm indicates an expected call of ResolveUploadCharm.
func (mr *MockApplicationServiceMockRecorder) ResolveUploadCharm(arg0, arg1 any) *MockApplicationServiceResolveUploadCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveUploadCharm", reflect.TypeOf((*MockApplicationService)(nil).ResolveUploadCharm), arg0, arg1)
	return &MockApplicationServiceResolveUploadCharmCall{Call: call}
}

// MockApplicationServiceResolveUploadCharmCall wrap *gomock.Call
type MockApplicationServiceResolveUploadCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockApplicationServiceResolveUploadCharmCall) Return(arg0 charm.CharmLocator, arg1 error) *MockApplicationServiceResolveUploadCharmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockApplicationServiceResolveUploadCharmCall) Do(f func(context.Context, charm.ResolveUploadCharm) (charm.CharmLocator, error)) *MockApplicationServiceResolveUploadCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockApplicationServiceResolveUploadCharmCall) DoAndReturn(f func(context.Context, charm.ResolveUploadCharm) (charm.CharmLocator, error)) *MockApplicationServiceResolveUploadCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockStateGetter is a mock of StateGetter interface.
type MockStateGetter struct {
	ctrl     *gomock.Controller
	recorder *MockStateGetterMockRecorder
}

// MockStateGetterMockRecorder is the mock recorder for MockStateGetter.
type MockStateGetterMockRecorder struct {
	mock *MockStateGetter
}

// NewMockStateGetter creates a new mock instance.
func NewMockStateGetter(ctrl *gomock.Controller) *MockStateGetter {
	mock := &MockStateGetter{ctrl: ctrl}
	mock.recorder = &MockStateGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStateGetter) EXPECT() *MockStateGetterMockRecorder {
	return m.recorder
}

// GetState mocks base method.
func (m *MockStateGetter) GetState(arg0 *http.Request) (State, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetState", arg0)
	ret0, _ := ret[0].(State)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetState indicates an expected call of GetState.
func (mr *MockStateGetterMockRecorder) GetState(arg0 any) *MockStateGetterGetStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetState", reflect.TypeOf((*MockStateGetter)(nil).GetState), arg0)
	return &MockStateGetterGetStateCall{Call: call}
}

// MockStateGetterGetStateCall wrap *gomock.Call
type MockStateGetterGetStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetterGetStateCall) Return(arg0 State, arg1 error) *MockStateGetterGetStateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetterGetStateCall) Do(f func(*http.Request) (State, error)) *MockStateGetterGetStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetterGetStateCall) DoAndReturn(f func(*http.Request) (State, error)) *MockStateGetterGetStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// MigrationMode mocks base method.
func (m *MockState) MigrationMode() (state.MigrationMode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MigrationMode")
	ret0, _ := ret[0].(state.MigrationMode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MigrationMode indicates an expected call of MigrationMode.
func (mr *MockStateMockRecorder) MigrationMode() *MockStateMigrationModeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MigrationMode", reflect.TypeOf((*MockState)(nil).MigrationMode))
	return &MockStateMigrationModeCall{Call: call}
}

// MockStateMigrationModeCall wrap *gomock.Call
type MockStateMigrationModeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateMigrationModeCall) Return(arg0 state.MigrationMode, arg1 error) *MockStateMigrationModeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateMigrationModeCall) Do(f func() (state.MigrationMode, error)) *MockStateMigrationModeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateMigrationModeCall) DoAndReturn(f func() (state.MigrationMode, error)) *MockStateMigrationModeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Release mocks base method.
func (m *MockState) Release() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Release")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Release indicates an expected call of Release.
func (mr *MockStateMockRecorder) Release() *MockStateReleaseCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Release", reflect.TypeOf((*MockState)(nil).Release))
	return &MockStateReleaseCall{Call: call}
}

// MockStateReleaseCall wrap *gomock.Call
type MockStateReleaseCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateReleaseCall) Return(arg0 bool) *MockStateReleaseCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateReleaseCall) Do(f func() bool) *MockStateReleaseCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateReleaseCall) DoAndReturn(f func() bool) *MockStateReleaseCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockObjectStoreServiceGetter is a mock of ObjectStoreServiceGetter interface.
type MockObjectStoreServiceGetter struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStoreServiceGetterMockRecorder
}

// MockObjectStoreServiceGetterMockRecorder is the mock recorder for MockObjectStoreServiceGetter.
type MockObjectStoreServiceGetterMockRecorder struct {
	mock *MockObjectStoreServiceGetter
}

// NewMockObjectStoreServiceGetter creates a new mock instance.
func NewMockObjectStoreServiceGetter(ctrl *gomock.Controller) *MockObjectStoreServiceGetter {
	mock := &MockObjectStoreServiceGetter{ctrl: ctrl}
	mock.recorder = &MockObjectStoreServiceGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStoreServiceGetter) EXPECT() *MockObjectStoreServiceGetterMockRecorder {
	return m.recorder
}

// ObjectStore mocks base method.
func (m *MockObjectStoreServiceGetter) ObjectStore(arg0 *http.Request) (ObjectStoreService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObjectStore", arg0)
	ret0, _ := ret[0].(ObjectStoreService)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ObjectStore indicates an expected call of ObjectStore.
func (mr *MockObjectStoreServiceGetterMockRecorder) ObjectStore(arg0 any) *MockObjectStoreServiceGetterObjectStoreCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObjectStore", reflect.TypeOf((*MockObjectStoreServiceGetter)(nil).ObjectStore), arg0)
	return &MockObjectStoreServiceGetterObjectStoreCall{Call: call}
}

// MockObjectStoreServiceGetterObjectStoreCall wrap *gomock.Call
type MockObjectStoreServiceGetterObjectStoreCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectStoreServiceGetterObjectStoreCall) Return(arg0 ObjectStoreService, arg1 error) *MockObjectStoreServiceGetterObjectStoreCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectStoreServiceGetterObjectStoreCall) Do(f func(*http.Request) (ObjectStoreService, error)) *MockObjectStoreServiceGetterObjectStoreCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectStoreServiceGetterObjectStoreCall) DoAndReturn(f func(*http.Request) (ObjectStoreService, error)) *MockObjectStoreServiceGetterObjectStoreCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockObjectStoreService is a mock of ObjectStoreService interface.
type MockObjectStoreService struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStoreServiceMockRecorder
}

// MockObjectStoreServiceMockRecorder is the mock recorder for MockObjectStoreService.
type MockObjectStoreServiceMockRecorder struct {
	mock *MockObjectStoreService
}

// NewMockObjectStoreService creates a new mock instance.
func NewMockObjectStoreService(ctrl *gomock.Controller) *MockObjectStoreService {
	mock := &MockObjectStoreService{ctrl: ctrl}
	mock.recorder = &MockObjectStoreServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStoreService) EXPECT() *MockObjectStoreServiceMockRecorder {
	return m.recorder
}

// GetBySHA256 mocks base method.
func (m *MockObjectStoreService) GetBySHA256(arg0 context.Context, arg1 string) (io.ReadCloser, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBySHA256", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetBySHA256 indicates an expected call of GetBySHA256.
func (mr *MockObjectStoreServiceMockRecorder) GetBySHA256(arg0, arg1 any) *MockObjectStoreServiceGetBySHA256Call {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBySHA256", reflect.TypeOf((*MockObjectStoreService)(nil).GetBySHA256), arg0, arg1)
	return &MockObjectStoreServiceGetBySHA256Call{Call: call}
}

// MockObjectStoreServiceGetBySHA256Call wrap *gomock.Call
type MockObjectStoreServiceGetBySHA256Call struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectStoreServiceGetBySHA256Call) Return(arg0 io.ReadCloser, arg1 int64, arg2 error) *MockObjectStoreServiceGetBySHA256Call {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectStoreServiceGetBySHA256Call) Do(f func(context.Context, string) (io.ReadCloser, int64, error)) *MockObjectStoreServiceGetBySHA256Call {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectStoreServiceGetBySHA256Call) DoAndReturn(f func(context.Context, string) (io.ReadCloser, int64, error)) *MockObjectStoreServiceGetBySHA256Call {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
