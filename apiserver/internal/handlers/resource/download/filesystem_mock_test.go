// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/apiserver/internal/handlers/resource/download (interfaces: FileSystem)
//
// Generated by this command:
//
//	mockgen -typed -package download_test -destination filesystem_mock_test.go github.com/juju/juju/apiserver/internal/handlers/resource/download FileSystem
//

// Package download_test is a generated GoMock package.
package download_test

import (
	os "os"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFileSystem is a mock of FileSystem interface.
type MockFileSystem struct {
	ctrl     *gomock.Controller
	recorder *MockFileSystemMockRecorder
}

// MockFileSystemMockRecorder is the mock recorder for MockFileSystem.
type MockFileSystemMockRecorder struct {
	mock *MockFileSystem
}

// NewMockFileSystem creates a new mock instance.
func NewMockFileSystem(ctrl *gomock.Controller) *MockFileSystem {
	mock := &MockFileSystem{ctrl: ctrl}
	mock.recorder = &MockFileSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileSystem) EXPECT() *MockFileSystemMockRecorder {
	return m.recorder
}

// CreateTemp mocks base method.
func (m *MockFileSystem) CreateTemp(arg0, arg1 string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTemp", arg0, arg1)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemp indicates an expected call of CreateTemp.
func (mr *MockFileSystemMockRecorder) CreateTemp(arg0, arg1 any) *MockFileSystemCreateTempCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemp", reflect.TypeOf((*MockFileSystem)(nil).CreateTemp), arg0, arg1)
	return &MockFileSystemCreateTempCall{Call: call}
}

// MockFileSystemCreateTempCall wrap *gomock.Call
type MockFileSystemCreateTempCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileSystemCreateTempCall) Return(arg0 *os.File, arg1 error) *MockFileSystemCreateTempCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileSystemCreateTempCall) Do(f func(string, string) (*os.File, error)) *MockFileSystemCreateTempCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileSystemCreateTempCall) DoAndReturn(f func(string, string) (*os.File, error)) *MockFileSystemCreateTempCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Open mocks base method.
func (m *MockFileSystem) Open(arg0 string) (*os.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0)
	ret0, _ := ret[0].(*os.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockFileSystemMockRecorder) Open(arg0 any) *MockFileSystemOpenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockFileSystem)(nil).Open), arg0)
	return &MockFileSystemOpenCall{Call: call}
}

// MockFileSystemOpenCall wrap *gomock.Call
type MockFileSystemOpenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileSystemOpenCall) Return(arg0 *os.File, arg1 error) *MockFileSystemOpenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileSystemOpenCall) Do(f func(string) (*os.File, error)) *MockFileSystemOpenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileSystemOpenCall) DoAndReturn(f func(string) (*os.File, error)) *MockFileSystemOpenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Remove mocks base method.
func (m *MockFileSystem) Remove(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockFileSystemMockRecorder) Remove(arg0 any) *MockFileSystemRemoveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockFileSystem)(nil).Remove), arg0)
	return &MockFileSystemRemoveCall{Call: call}
}

// MockFileSystemRemoveCall wrap *gomock.Call
type MockFileSystemRemoveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockFileSystemRemoveCall) Return(arg0 error) *MockFileSystemRemoveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockFileSystemRemoveCall) Do(f func(string) error) *MockFileSystemRemoveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockFileSystemRemoveCall) DoAndReturn(f func(string) error) *MockFileSystemRemoveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
