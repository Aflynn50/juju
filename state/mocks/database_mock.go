// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/state (interfaces: Database)
//
// Generated by this command:
//
//	mockgen -typed -package mocks -destination mocks/database_mock.go github.com/juju/juju/state Database
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	mongo "github.com/juju/juju/internal/mongo"
	state "github.com/juju/juju/state"
	mgo "github.com/juju/mgo/v3"
	txn "github.com/juju/mgo/v3/txn"
	txn0 "github.com/juju/txn/v3"
	gomock "go.uber.org/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// Copy mocks base method.
func (m *MockDatabase) Copy() (state.Database, state.SessionCloser) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Copy")
	ret0, _ := ret[0].(state.Database)
	ret1, _ := ret[1].(state.SessionCloser)
	return ret0, ret1
}

// Copy indicates an expected call of Copy.
func (mr *MockDatabaseMockRecorder) Copy() *MockDatabaseCopyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Copy", reflect.TypeOf((*MockDatabase)(nil).Copy))
	return &MockDatabaseCopyCall{Call: call}
}

// MockDatabaseCopyCall wrap *gomock.Call
type MockDatabaseCopyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseCopyCall) Return(arg0 state.Database, arg1 state.SessionCloser) *MockDatabaseCopyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseCopyCall) Do(f func() (state.Database, state.SessionCloser)) *MockDatabaseCopyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseCopyCall) DoAndReturn(f func() (state.Database, state.SessionCloser)) *MockDatabaseCopyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CopyForModel mocks base method.
func (m *MockDatabase) CopyForModel(arg0 string) (state.Database, state.SessionCloser) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CopyForModel", arg0)
	ret0, _ := ret[0].(state.Database)
	ret1, _ := ret[1].(state.SessionCloser)
	return ret0, ret1
}

// CopyForModel indicates an expected call of CopyForModel.
func (mr *MockDatabaseMockRecorder) CopyForModel(arg0 any) *MockDatabaseCopyForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CopyForModel", reflect.TypeOf((*MockDatabase)(nil).CopyForModel), arg0)
	return &MockDatabaseCopyForModelCall{Call: call}
}

// MockDatabaseCopyForModelCall wrap *gomock.Call
type MockDatabaseCopyForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseCopyForModelCall) Return(arg0 state.Database, arg1 state.SessionCloser) *MockDatabaseCopyForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseCopyForModelCall) Do(f func(string) (state.Database, state.SessionCloser)) *MockDatabaseCopyForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseCopyForModelCall) DoAndReturn(f func(string) (state.Database, state.SessionCloser)) *MockDatabaseCopyForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCollection mocks base method.
func (m *MockDatabase) GetCollection(arg0 string) (mongo.Collection, state.SessionCloser) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollection", arg0)
	ret0, _ := ret[0].(mongo.Collection)
	ret1, _ := ret[1].(state.SessionCloser)
	return ret0, ret1
}

// GetCollection indicates an expected call of GetCollection.
func (mr *MockDatabaseMockRecorder) GetCollection(arg0 any) *MockDatabaseGetCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollection", reflect.TypeOf((*MockDatabase)(nil).GetCollection), arg0)
	return &MockDatabaseGetCollectionCall{Call: call}
}

// MockDatabaseGetCollectionCall wrap *gomock.Call
type MockDatabaseGetCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseGetCollectionCall) Return(arg0 mongo.Collection, arg1 state.SessionCloser) *MockDatabaseGetCollectionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseGetCollectionCall) Do(f func(string) (mongo.Collection, state.SessionCloser)) *MockDatabaseGetCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseGetCollectionCall) DoAndReturn(f func(string) (mongo.Collection, state.SessionCloser)) *MockDatabaseGetCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCollectionFor mocks base method.
func (m *MockDatabase) GetCollectionFor(arg0, arg1 string) (mongo.Collection, state.SessionCloser) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCollectionFor", arg0, arg1)
	ret0, _ := ret[0].(mongo.Collection)
	ret1, _ := ret[1].(state.SessionCloser)
	return ret0, ret1
}

// GetCollectionFor indicates an expected call of GetCollectionFor.
func (mr *MockDatabaseMockRecorder) GetCollectionFor(arg0, arg1 any) *MockDatabaseGetCollectionForCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCollectionFor", reflect.TypeOf((*MockDatabase)(nil).GetCollectionFor), arg0, arg1)
	return &MockDatabaseGetCollectionForCall{Call: call}
}

// MockDatabaseGetCollectionForCall wrap *gomock.Call
type MockDatabaseGetCollectionForCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseGetCollectionForCall) Return(arg0 mongo.Collection, arg1 state.SessionCloser) *MockDatabaseGetCollectionForCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseGetCollectionForCall) Do(f func(string, string) (mongo.Collection, state.SessionCloser)) *MockDatabaseGetCollectionForCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseGetCollectionForCall) DoAndReturn(f func(string, string) (mongo.Collection, state.SessionCloser)) *MockDatabaseGetCollectionForCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRawCollection mocks base method.
func (m *MockDatabase) GetRawCollection(arg0 string) (*mgo.Collection, state.SessionCloser) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRawCollection", arg0)
	ret0, _ := ret[0].(*mgo.Collection)
	ret1, _ := ret[1].(state.SessionCloser)
	return ret0, ret1
}

// GetRawCollection indicates an expected call of GetRawCollection.
func (mr *MockDatabaseMockRecorder) GetRawCollection(arg0 any) *MockDatabaseGetRawCollectionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRawCollection", reflect.TypeOf((*MockDatabase)(nil).GetRawCollection), arg0)
	return &MockDatabaseGetRawCollectionCall{Call: call}
}

// MockDatabaseGetRawCollectionCall wrap *gomock.Call
type MockDatabaseGetRawCollectionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseGetRawCollectionCall) Return(arg0 *mgo.Collection, arg1 state.SessionCloser) *MockDatabaseGetRawCollectionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseGetRawCollectionCall) Do(f func(string) (*mgo.Collection, state.SessionCloser)) *MockDatabaseGetRawCollectionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseGetRawCollectionCall) DoAndReturn(f func(string) (*mgo.Collection, state.SessionCloser)) *MockDatabaseGetRawCollectionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Run mocks base method.
func (m *MockDatabase) Run(arg0 txn0.TransactionSource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockDatabaseMockRecorder) Run(arg0 any) *MockDatabaseRunCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockDatabase)(nil).Run), arg0)
	return &MockDatabaseRunCall{Call: call}
}

// MockDatabaseRunCall wrap *gomock.Call
type MockDatabaseRunCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseRunCall) Return(arg0 error) *MockDatabaseRunCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseRunCall) Do(f func(txn0.TransactionSource) error) *MockDatabaseRunCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseRunCall) DoAndReturn(f func(txn0.TransactionSource) error) *MockDatabaseRunCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunRaw mocks base method.
func (m *MockDatabase) RunRaw(arg0 txn0.TransactionSource) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunRaw", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunRaw indicates an expected call of RunRaw.
func (mr *MockDatabaseMockRecorder) RunRaw(arg0 any) *MockDatabaseRunRawCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunRaw", reflect.TypeOf((*MockDatabase)(nil).RunRaw), arg0)
	return &MockDatabaseRunRawCall{Call: call}
}

// MockDatabaseRunRawCall wrap *gomock.Call
type MockDatabaseRunRawCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseRunRawCall) Return(arg0 error) *MockDatabaseRunRawCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseRunRawCall) Do(f func(txn0.TransactionSource) error) *MockDatabaseRunRawCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseRunRawCall) DoAndReturn(f func(txn0.TransactionSource) error) *MockDatabaseRunRawCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunRawTransaction mocks base method.
func (m *MockDatabase) RunRawTransaction(arg0 []txn.Op) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunRawTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunRawTransaction indicates an expected call of RunRawTransaction.
func (mr *MockDatabaseMockRecorder) RunRawTransaction(arg0 any) *MockDatabaseRunRawTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunRawTransaction", reflect.TypeOf((*MockDatabase)(nil).RunRawTransaction), arg0)
	return &MockDatabaseRunRawTransactionCall{Call: call}
}

// MockDatabaseRunRawTransactionCall wrap *gomock.Call
type MockDatabaseRunRawTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseRunRawTransactionCall) Return(arg0 error) *MockDatabaseRunRawTransactionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseRunRawTransactionCall) Do(f func([]txn.Op) error) *MockDatabaseRunRawTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseRunRawTransactionCall) DoAndReturn(f func([]txn.Op) error) *MockDatabaseRunRawTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunTransaction mocks base method.
func (m *MockDatabase) RunTransaction(arg0 []txn.Op) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTransaction", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTransaction indicates an expected call of RunTransaction.
func (mr *MockDatabaseMockRecorder) RunTransaction(arg0 any) *MockDatabaseRunTransactionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTransaction", reflect.TypeOf((*MockDatabase)(nil).RunTransaction), arg0)
	return &MockDatabaseRunTransactionCall{Call: call}
}

// MockDatabaseRunTransactionCall wrap *gomock.Call
type MockDatabaseRunTransactionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseRunTransactionCall) Return(arg0 error) *MockDatabaseRunTransactionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseRunTransactionCall) Do(f func([]txn.Op) error) *MockDatabaseRunTransactionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseRunTransactionCall) DoAndReturn(f func([]txn.Op) error) *MockDatabaseRunTransactionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunTransactionFor mocks base method.
func (m *MockDatabase) RunTransactionFor(arg0 string, arg1 []txn.Op) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunTransactionFor", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunTransactionFor indicates an expected call of RunTransactionFor.
func (mr *MockDatabaseMockRecorder) RunTransactionFor(arg0, arg1 any) *MockDatabaseRunTransactionForCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunTransactionFor", reflect.TypeOf((*MockDatabase)(nil).RunTransactionFor), arg0, arg1)
	return &MockDatabaseRunTransactionForCall{Call: call}
}

// MockDatabaseRunTransactionForCall wrap *gomock.Call
type MockDatabaseRunTransactionForCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseRunTransactionForCall) Return(arg0 error) *MockDatabaseRunTransactionForCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseRunTransactionForCall) Do(f func(string, []txn.Op) error) *MockDatabaseRunTransactionForCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseRunTransactionForCall) DoAndReturn(f func(string, []txn.Op) error) *MockDatabaseRunTransactionForCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Schema mocks base method.
func (m *MockDatabase) Schema() state.CollectionSchema {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schema")
	ret0, _ := ret[0].(state.CollectionSchema)
	return ret0
}

// Schema indicates an expected call of Schema.
func (mr *MockDatabaseMockRecorder) Schema() *MockDatabaseSchemaCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schema", reflect.TypeOf((*MockDatabase)(nil).Schema))
	return &MockDatabaseSchemaCall{Call: call}
}

// MockDatabaseSchemaCall wrap *gomock.Call
type MockDatabaseSchemaCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseSchemaCall) Return(arg0 state.CollectionSchema) *MockDatabaseSchemaCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseSchemaCall) Do(f func() state.CollectionSchema) *MockDatabaseSchemaCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseSchemaCall) DoAndReturn(f func() state.CollectionSchema) *MockDatabaseSchemaCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// TransactionRunner mocks base method.
func (m *MockDatabase) TransactionRunner() (txn0.Runner, state.SessionCloser) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TransactionRunner")
	ret0, _ := ret[0].(txn0.Runner)
	ret1, _ := ret[1].(state.SessionCloser)
	return ret0, ret1
}

// TransactionRunner indicates an expected call of TransactionRunner.
func (mr *MockDatabaseMockRecorder) TransactionRunner() *MockDatabaseTransactionRunnerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransactionRunner", reflect.TypeOf((*MockDatabase)(nil).TransactionRunner))
	return &MockDatabaseTransactionRunnerCall{Call: call}
}

// MockDatabaseTransactionRunnerCall wrap *gomock.Call
type MockDatabaseTransactionRunnerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDatabaseTransactionRunnerCall) Return(arg0 txn0.Runner, arg1 state.SessionCloser) *MockDatabaseTransactionRunnerCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDatabaseTransactionRunnerCall) Do(f func() (txn0.Runner, state.SessionCloser)) *MockDatabaseTransactionRunnerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDatabaseTransactionRunnerCall) DoAndReturn(f func() (txn0.Runner, state.SessionCloser)) *MockDatabaseTransactionRunnerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
