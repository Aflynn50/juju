// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/unitstate/service (interfaces: State)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination state_mock_test.go github.com/juju/juju/domain/unitstate/service State
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	domain "github.com/juju/juju/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// EnsureUnitStateRecord mocks base method.
func (m *MockState) EnsureUnitStateRecord(arg0 domain.AtomicContext, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureUnitStateRecord", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureUnitStateRecord indicates an expected call of EnsureUnitStateRecord.
func (mr *MockStateMockRecorder) EnsureUnitStateRecord(arg0, arg1 any) *MockStateEnsureUnitStateRecordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureUnitStateRecord", reflect.TypeOf((*MockState)(nil).EnsureUnitStateRecord), arg0, arg1)
	return &MockStateEnsureUnitStateRecordCall{Call: call}
}

// MockStateEnsureUnitStateRecordCall wrap *gomock.Call
type MockStateEnsureUnitStateRecordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateEnsureUnitStateRecordCall) Return(arg0 error) *MockStateEnsureUnitStateRecordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateEnsureUnitStateRecordCall) Do(f func(domain.AtomicContext, string) error) *MockStateEnsureUnitStateRecordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateEnsureUnitStateRecordCall) DoAndReturn(f func(domain.AtomicContext, string) error) *MockStateEnsureUnitStateRecordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUIDForName mocks base method.
func (m *MockState) GetUnitUUIDForName(arg0 domain.AtomicContext, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUIDForName", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUIDForName indicates an expected call of GetUnitUUIDForName.
func (mr *MockStateMockRecorder) GetUnitUUIDForName(arg0, arg1 any) *MockStateGetUnitUUIDForNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUIDForName", reflect.TypeOf((*MockState)(nil).GetUnitUUIDForName), arg0, arg1)
	return &MockStateGetUnitUUIDForNameCall{Call: call}
}

// MockStateGetUnitUUIDForNameCall wrap *gomock.Call
type MockStateGetUnitUUIDForNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitUUIDForNameCall) Return(arg0 string, arg1 error) *MockStateGetUnitUUIDForNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitUUIDForNameCall) Do(f func(domain.AtomicContext, string) (string, error)) *MockStateGetUnitUUIDForNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitUUIDForNameCall) DoAndReturn(f func(domain.AtomicContext, string) (string, error)) *MockStateGetUnitUUIDForNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunAtomic mocks base method.
func (m *MockState) RunAtomic(arg0 context.Context, arg1 func(domain.AtomicContext) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunAtomic", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunAtomic indicates an expected call of RunAtomic.
func (mr *MockStateMockRecorder) RunAtomic(arg0, arg1 any) *MockStateRunAtomicCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAtomic", reflect.TypeOf((*MockState)(nil).RunAtomic), arg0, arg1)
	return &MockStateRunAtomicCall{Call: call}
}

// MockStateRunAtomicCall wrap *gomock.Call
type MockStateRunAtomicCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateRunAtomicCall) Return(arg0 error) *MockStateRunAtomicCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateRunAtomicCall) Do(f func(context.Context, func(domain.AtomicContext) error) error) *MockStateRunAtomicCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateRunAtomicCall) DoAndReturn(f func(context.Context, func(domain.AtomicContext) error) error) *MockStateRunAtomicCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUnitStateCharm mocks base method.
func (m *MockState) UpdateUnitStateCharm(arg0 domain.AtomicContext, arg1 string, arg2 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUnitStateCharm", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUnitStateCharm indicates an expected call of UpdateUnitStateCharm.
func (mr *MockStateMockRecorder) UpdateUnitStateCharm(arg0, arg1, arg2 any) *MockStateUpdateUnitStateCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUnitStateCharm", reflect.TypeOf((*MockState)(nil).UpdateUnitStateCharm), arg0, arg1, arg2)
	return &MockStateUpdateUnitStateCharmCall{Call: call}
}

// MockStateUpdateUnitStateCharmCall wrap *gomock.Call
type MockStateUpdateUnitStateCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpdateUnitStateCharmCall) Return(arg0 error) *MockStateUpdateUnitStateCharmCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpdateUnitStateCharmCall) Do(f func(domain.AtomicContext, string, map[string]string) error) *MockStateUpdateUnitStateCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpdateUnitStateCharmCall) DoAndReturn(f func(domain.AtomicContext, string, map[string]string) error) *MockStateUpdateUnitStateCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUnitStateRelation mocks base method.
func (m *MockState) UpdateUnitStateRelation(arg0 domain.AtomicContext, arg1 string, arg2 map[int]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUnitStateRelation", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUnitStateRelation indicates an expected call of UpdateUnitStateRelation.
func (mr *MockStateMockRecorder) UpdateUnitStateRelation(arg0, arg1, arg2 any) *MockStateUpdateUnitStateRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUnitStateRelation", reflect.TypeOf((*MockState)(nil).UpdateUnitStateRelation), arg0, arg1, arg2)
	return &MockStateUpdateUnitStateRelationCall{Call: call}
}

// MockStateUpdateUnitStateRelationCall wrap *gomock.Call
type MockStateUpdateUnitStateRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpdateUnitStateRelationCall) Return(arg0 error) *MockStateUpdateUnitStateRelationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpdateUnitStateRelationCall) Do(f func(domain.AtomicContext, string, map[int]string) error) *MockStateUpdateUnitStateRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpdateUnitStateRelationCall) DoAndReturn(f func(domain.AtomicContext, string, map[int]string) error) *MockStateUpdateUnitStateRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUnitStateSecret mocks base method.
func (m *MockState) UpdateUnitStateSecret(arg0 domain.AtomicContext, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUnitStateSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUnitStateSecret indicates an expected call of UpdateUnitStateSecret.
func (mr *MockStateMockRecorder) UpdateUnitStateSecret(arg0, arg1, arg2 any) *MockStateUpdateUnitStateSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUnitStateSecret", reflect.TypeOf((*MockState)(nil).UpdateUnitStateSecret), arg0, arg1, arg2)
	return &MockStateUpdateUnitStateSecretCall{Call: call}
}

// MockStateUpdateUnitStateSecretCall wrap *gomock.Call
type MockStateUpdateUnitStateSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpdateUnitStateSecretCall) Return(arg0 error) *MockStateUpdateUnitStateSecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpdateUnitStateSecretCall) Do(f func(domain.AtomicContext, string, string) error) *MockStateUpdateUnitStateSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpdateUnitStateSecretCall) DoAndReturn(f func(domain.AtomicContext, string, string) error) *MockStateUpdateUnitStateSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUnitStateStorage mocks base method.
func (m *MockState) UpdateUnitStateStorage(arg0 domain.AtomicContext, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUnitStateStorage", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUnitStateStorage indicates an expected call of UpdateUnitStateStorage.
func (mr *MockStateMockRecorder) UpdateUnitStateStorage(arg0, arg1, arg2 any) *MockStateUpdateUnitStateStorageCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUnitStateStorage", reflect.TypeOf((*MockState)(nil).UpdateUnitStateStorage), arg0, arg1, arg2)
	return &MockStateUpdateUnitStateStorageCall{Call: call}
}

// MockStateUpdateUnitStateStorageCall wrap *gomock.Call
type MockStateUpdateUnitStateStorageCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpdateUnitStateStorageCall) Return(arg0 error) *MockStateUpdateUnitStateStorageCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpdateUnitStateStorageCall) Do(f func(domain.AtomicContext, string, string) error) *MockStateUpdateUnitStateStorageCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpdateUnitStateStorageCall) DoAndReturn(f func(domain.AtomicContext, string, string) error) *MockStateUpdateUnitStateStorageCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUnitStateUniter mocks base method.
func (m *MockState) UpdateUnitStateUniter(arg0 domain.AtomicContext, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUnitStateUniter", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUnitStateUniter indicates an expected call of UpdateUnitStateUniter.
func (mr *MockStateMockRecorder) UpdateUnitStateUniter(arg0, arg1, arg2 any) *MockStateUpdateUnitStateUniterCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUnitStateUniter", reflect.TypeOf((*MockState)(nil).UpdateUnitStateUniter), arg0, arg1, arg2)
	return &MockStateUpdateUnitStateUniterCall{Call: call}
}

// MockStateUpdateUnitStateUniterCall wrap *gomock.Call
type MockStateUpdateUnitStateUniterCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpdateUnitStateUniterCall) Return(arg0 error) *MockStateUpdateUnitStateUniterCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpdateUnitStateUniterCall) Do(f func(domain.AtomicContext, string, string) error) *MockStateUpdateUnitStateUniterCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpdateUnitStateUniterCall) DoAndReturn(f func(domain.AtomicContext, string, string) error) *MockStateUpdateUnitStateUniterCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
