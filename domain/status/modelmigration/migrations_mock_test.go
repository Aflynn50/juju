// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/status/modelmigration (interfaces: ImportService,ExportService)
//
// Generated by this command:
//
//	mockgen -typed -package modelmigration -destination migrations_mock_test.go github.com/juju/juju/domain/status/modelmigration ImportService,ExportService
//

// Package modelmigration is a generated GoMock package.
package modelmigration

import (
	context "context"
	reflect "reflect"

	status "github.com/juju/juju/core/status"
	unit "github.com/juju/juju/core/unit"
	gomock "go.uber.org/mock/gomock"
)

// MockImportService is a mock of ImportService interface.
type MockImportService struct {
	ctrl     *gomock.Controller
	recorder *MockImportServiceMockRecorder
}

// MockImportServiceMockRecorder is the mock recorder for MockImportService.
type MockImportServiceMockRecorder struct {
	mock *MockImportService
}

// NewMockImportService creates a new mock instance.
func NewMockImportService(ctrl *gomock.Controller) *MockImportService {
	mock := &MockImportService{ctrl: ctrl}
	mock.recorder = &MockImportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImportService) EXPECT() *MockImportServiceMockRecorder {
	return m.recorder
}

// SetApplicationStatus mocks base method.
func (m *MockImportService) SetApplicationStatus(arg0 context.Context, arg1 string, arg2 *status.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetApplicationStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetApplicationStatus indicates an expected call of SetApplicationStatus.
func (mr *MockImportServiceMockRecorder) SetApplicationStatus(arg0, arg1, arg2 any) *MockImportServiceSetApplicationStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplicationStatus", reflect.TypeOf((*MockImportService)(nil).SetApplicationStatus), arg0, arg1, arg2)
	return &MockImportServiceSetApplicationStatusCall{Call: call}
}

// MockImportServiceSetApplicationStatusCall wrap *gomock.Call
type MockImportServiceSetApplicationStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImportServiceSetApplicationStatusCall) Return(arg0 error) *MockImportServiceSetApplicationStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImportServiceSetApplicationStatusCall) Do(f func(context.Context, string, *status.StatusInfo) error) *MockImportServiceSetApplicationStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImportServiceSetApplicationStatusCall) DoAndReturn(f func(context.Context, string, *status.StatusInfo) error) *MockImportServiceSetApplicationStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitAgentStatus mocks base method.
func (m *MockImportService) SetUnitAgentStatus(arg0 context.Context, arg1 unit.Name, arg2 *status.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitAgentStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitAgentStatus indicates an expected call of SetUnitAgentStatus.
func (mr *MockImportServiceMockRecorder) SetUnitAgentStatus(arg0, arg1, arg2 any) *MockImportServiceSetUnitAgentStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitAgentStatus", reflect.TypeOf((*MockImportService)(nil).SetUnitAgentStatus), arg0, arg1, arg2)
	return &MockImportServiceSetUnitAgentStatusCall{Call: call}
}

// MockImportServiceSetUnitAgentStatusCall wrap *gomock.Call
type MockImportServiceSetUnitAgentStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImportServiceSetUnitAgentStatusCall) Return(arg0 error) *MockImportServiceSetUnitAgentStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImportServiceSetUnitAgentStatusCall) Do(f func(context.Context, unit.Name, *status.StatusInfo) error) *MockImportServiceSetUnitAgentStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImportServiceSetUnitAgentStatusCall) DoAndReturn(f func(context.Context, unit.Name, *status.StatusInfo) error) *MockImportServiceSetUnitAgentStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitWorkloadStatus mocks base method.
func (m *MockImportService) SetUnitWorkloadStatus(arg0 context.Context, arg1 unit.Name, arg2 *status.StatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitWorkloadStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitWorkloadStatus indicates an expected call of SetUnitWorkloadStatus.
func (mr *MockImportServiceMockRecorder) SetUnitWorkloadStatus(arg0, arg1, arg2 any) *MockImportServiceSetUnitWorkloadStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitWorkloadStatus", reflect.TypeOf((*MockImportService)(nil).SetUnitWorkloadStatus), arg0, arg1, arg2)
	return &MockImportServiceSetUnitWorkloadStatusCall{Call: call}
}

// MockImportServiceSetUnitWorkloadStatusCall wrap *gomock.Call
type MockImportServiceSetUnitWorkloadStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImportServiceSetUnitWorkloadStatusCall) Return(arg0 error) *MockImportServiceSetUnitWorkloadStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImportServiceSetUnitWorkloadStatusCall) Do(f func(context.Context, unit.Name, *status.StatusInfo) error) *MockImportServiceSetUnitWorkloadStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImportServiceSetUnitWorkloadStatusCall) DoAndReturn(f func(context.Context, unit.Name, *status.StatusInfo) error) *MockImportServiceSetUnitWorkloadStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockExportService is a mock of ExportService interface.
type MockExportService struct {
	ctrl     *gomock.Controller
	recorder *MockExportServiceMockRecorder
}

// MockExportServiceMockRecorder is the mock recorder for MockExportService.
type MockExportServiceMockRecorder struct {
	mock *MockExportService
}

// NewMockExportService creates a new mock instance.
func NewMockExportService(ctrl *gomock.Controller) *MockExportService {
	mock := &MockExportService{ctrl: ctrl}
	mock.recorder = &MockExportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExportService) EXPECT() *MockExportServiceMockRecorder {
	return m.recorder
}

// ExportApplicationStatuses mocks base method.
func (m *MockExportService) ExportApplicationStatuses(arg0 context.Context) (map[string]status.StatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportApplicationStatuses", arg0)
	ret0, _ := ret[0].(map[string]status.StatusInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportApplicationStatuses indicates an expected call of ExportApplicationStatuses.
func (mr *MockExportServiceMockRecorder) ExportApplicationStatuses(arg0 any) *MockExportServiceExportApplicationStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportApplicationStatuses", reflect.TypeOf((*MockExportService)(nil).ExportApplicationStatuses), arg0)
	return &MockExportServiceExportApplicationStatusesCall{Call: call}
}

// MockExportServiceExportApplicationStatusesCall wrap *gomock.Call
type MockExportServiceExportApplicationStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExportServiceExportApplicationStatusesCall) Return(arg0 map[string]status.StatusInfo, arg1 error) *MockExportServiceExportApplicationStatusesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExportServiceExportApplicationStatusesCall) Do(f func(context.Context) (map[string]status.StatusInfo, error)) *MockExportServiceExportApplicationStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExportServiceExportApplicationStatusesCall) DoAndReturn(f func(context.Context) (map[string]status.StatusInfo, error)) *MockExportServiceExportApplicationStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ExportUnitStatuses mocks base method.
func (m *MockExportService) ExportUnitStatuses(arg0 context.Context) (map[unit.Name]status.StatusInfo, map[unit.Name]status.StatusInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportUnitStatuses", arg0)
	ret0, _ := ret[0].(map[unit.Name]status.StatusInfo)
	ret1, _ := ret[1].(map[unit.Name]status.StatusInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExportUnitStatuses indicates an expected call of ExportUnitStatuses.
func (mr *MockExportServiceMockRecorder) ExportUnitStatuses(arg0 any) *MockExportServiceExportUnitStatusesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportUnitStatuses", reflect.TypeOf((*MockExportService)(nil).ExportUnitStatuses), arg0)
	return &MockExportServiceExportUnitStatusesCall{Call: call}
}

// MockExportServiceExportUnitStatusesCall wrap *gomock.Call
type MockExportServiceExportUnitStatusesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExportServiceExportUnitStatusesCall) Return(arg0, arg1 map[unit.Name]status.StatusInfo, arg2 error) *MockExportServiceExportUnitStatusesCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExportServiceExportUnitStatusesCall) Do(f func(context.Context) (map[unit.Name]status.StatusInfo, map[unit.Name]status.StatusInfo, error)) *MockExportServiceExportUnitStatusesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExportServiceExportUnitStatusesCall) DoAndReturn(f func(context.Context) (map[unit.Name]status.StatusInfo, map[unit.Name]status.StatusInfo, error)) *MockExportServiceExportUnitStatusesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
