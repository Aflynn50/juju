// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/access/service (interfaces: State,UserState,PermissionState)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination state_mock_test.go github.com/juju/juju/domain/access/service State,UserState,PermissionState
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	credential "github.com/juju/juju/core/credential"
	permission "github.com/juju/juju/core/permission"
	user "github.com/juju/juju/core/user"
	access "github.com/juju/juju/domain/access"
	auth "github.com/juju/juju/internal/auth"
	uuid "github.com/juju/juju/internal/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockState) AddUser(arg0 context.Context, arg1 user.UUID, arg2, arg3 string, arg4 user.UUID, arg5 permission.AccessSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockStateMockRecorder) AddUser(arg0, arg1, arg2, arg3, arg4, arg5 any) *MockStateAddUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockState)(nil).AddUser), arg0, arg1, arg2, arg3, arg4, arg5)
	return &MockStateAddUserCall{Call: call}
}

// MockStateAddUserCall wrap *gomock.Call
type MockStateAddUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAddUserCall) Return(arg0 error) *MockStateAddUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAddUserCall) Do(f func(context.Context, user.UUID, string, string, user.UUID, permission.AccessSpec) error) *MockStateAddUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAddUserCall) DoAndReturn(f func(context.Context, user.UUID, string, string, user.UUID, permission.AccessSpec) error) *MockStateAddUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddUserWithActivationKey mocks base method.
func (m *MockState) AddUserWithActivationKey(arg0 context.Context, arg1 user.UUID, arg2, arg3 string, arg4 user.UUID, arg5 permission.AccessSpec, arg6 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserWithActivationKey", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserWithActivationKey indicates an expected call of AddUserWithActivationKey.
func (mr *MockStateMockRecorder) AddUserWithActivationKey(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *MockStateAddUserWithActivationKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserWithActivationKey", reflect.TypeOf((*MockState)(nil).AddUserWithActivationKey), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	return &MockStateAddUserWithActivationKeyCall{Call: call}
}

// MockStateAddUserWithActivationKeyCall wrap *gomock.Call
type MockStateAddUserWithActivationKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAddUserWithActivationKeyCall) Return(arg0 error) *MockStateAddUserWithActivationKeyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAddUserWithActivationKeyCall) Do(f func(context.Context, user.UUID, string, string, user.UUID, permission.AccessSpec, []byte) error) *MockStateAddUserWithActivationKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAddUserWithActivationKeyCall) DoAndReturn(f func(context.Context, user.UUID, string, string, user.UUID, permission.AccessSpec, []byte) error) *MockStateAddUserWithActivationKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddUserWithPasswordHash mocks base method.
func (m *MockState) AddUserWithPasswordHash(arg0 context.Context, arg1 user.UUID, arg2, arg3 string, arg4 user.UUID, arg5 permission.AccessSpec, arg6 string, arg7 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserWithPasswordHash", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserWithPasswordHash indicates an expected call of AddUserWithPasswordHash.
func (mr *MockStateMockRecorder) AddUserWithPasswordHash(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 any) *MockStateAddUserWithPasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserWithPasswordHash", reflect.TypeOf((*MockState)(nil).AddUserWithPasswordHash), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	return &MockStateAddUserWithPasswordHashCall{Call: call}
}

// MockStateAddUserWithPasswordHashCall wrap *gomock.Call
type MockStateAddUserWithPasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAddUserWithPasswordHashCall) Return(arg0 error) *MockStateAddUserWithPasswordHashCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAddUserWithPasswordHashCall) Do(f func(context.Context, user.UUID, string, string, user.UUID, permission.AccessSpec, string, []byte) error) *MockStateAddUserWithPasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAddUserWithPasswordHashCall) DoAndReturn(f func(context.Context, user.UUID, string, string, user.UUID, permission.AccessSpec, string, []byte) error) *MockStateAddUserWithPasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AllModelAccessForCloudCredential mocks base method.
func (m *MockState) AllModelAccessForCloudCredential(arg0 context.Context, arg1 credential.Key) ([]access.CredentialOwnerModelAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllModelAccessForCloudCredential", arg0, arg1)
	ret0, _ := ret[0].([]access.CredentialOwnerModelAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllModelAccessForCloudCredential indicates an expected call of AllModelAccessForCloudCredential.
func (mr *MockStateMockRecorder) AllModelAccessForCloudCredential(arg0, arg1 any) *MockStateAllModelAccessForCloudCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllModelAccessForCloudCredential", reflect.TypeOf((*MockState)(nil).AllModelAccessForCloudCredential), arg0, arg1)
	return &MockStateAllModelAccessForCloudCredentialCall{Call: call}
}

// MockStateAllModelAccessForCloudCredentialCall wrap *gomock.Call
type MockStateAllModelAccessForCloudCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAllModelAccessForCloudCredentialCall) Return(arg0 []access.CredentialOwnerModelAccess, arg1 error) *MockStateAllModelAccessForCloudCredentialCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAllModelAccessForCloudCredentialCall) Do(f func(context.Context, credential.Key) ([]access.CredentialOwnerModelAccess, error)) *MockStateAllModelAccessForCloudCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAllModelAccessForCloudCredentialCall) DoAndReturn(f func(context.Context, credential.Key) ([]access.CredentialOwnerModelAccess, error)) *MockStateAllModelAccessForCloudCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePermission mocks base method.
func (m *MockState) CreatePermission(arg0 context.Context, arg1 uuid.UUID, arg2 permission.UserAccessSpec) (permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", arg0, arg1, arg2)
	ret0, _ := ret[0].(permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockStateMockRecorder) CreatePermission(arg0, arg1, arg2 any) *MockStateCreatePermissionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockState)(nil).CreatePermission), arg0, arg1, arg2)
	return &MockStateCreatePermissionCall{Call: call}
}

// MockStateCreatePermissionCall wrap *gomock.Call
type MockStateCreatePermissionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCreatePermissionCall) Return(arg0 permission.UserAccess, arg1 error) *MockStateCreatePermissionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCreatePermissionCall) Do(f func(context.Context, uuid.UUID, permission.UserAccessSpec) (permission.UserAccess, error)) *MockStateCreatePermissionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCreatePermissionCall) DoAndReturn(f func(context.Context, uuid.UUID, permission.UserAccessSpec) (permission.UserAccess, error)) *MockStateCreatePermissionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeletePermission mocks base method.
func (m *MockState) DeletePermission(arg0 context.Context, arg1 string, arg2 permission.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermission", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockStateMockRecorder) DeletePermission(arg0, arg1, arg2 any) *MockStateDeletePermissionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockState)(nil).DeletePermission), arg0, arg1, arg2)
	return &MockStateDeletePermissionCall{Call: call}
}

// MockStateDeletePermissionCall wrap *gomock.Call
type MockStateDeletePermissionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeletePermissionCall) Return(arg0 error) *MockStateDeletePermissionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeletePermissionCall) Do(f func(context.Context, string, permission.ID) error) *MockStateDeletePermissionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeletePermissionCall) DoAndReturn(f func(context.Context, string, permission.ID) error) *MockStateDeletePermissionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DisableUserAuthentication mocks base method.
func (m *MockState) DisableUserAuthentication(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableUserAuthentication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableUserAuthentication indicates an expected call of DisableUserAuthentication.
func (mr *MockStateMockRecorder) DisableUserAuthentication(arg0, arg1 any) *MockStateDisableUserAuthenticationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableUserAuthentication", reflect.TypeOf((*MockState)(nil).DisableUserAuthentication), arg0, arg1)
	return &MockStateDisableUserAuthenticationCall{Call: call}
}

// MockStateDisableUserAuthenticationCall wrap *gomock.Call
type MockStateDisableUserAuthenticationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDisableUserAuthenticationCall) Return(arg0 error) *MockStateDisableUserAuthenticationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDisableUserAuthenticationCall) Do(f func(context.Context, string) error) *MockStateDisableUserAuthenticationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDisableUserAuthenticationCall) DoAndReturn(f func(context.Context, string) error) *MockStateDisableUserAuthenticationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnableUserAuthentication mocks base method.
func (m *MockState) EnableUserAuthentication(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableUserAuthentication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableUserAuthentication indicates an expected call of EnableUserAuthentication.
func (mr *MockStateMockRecorder) EnableUserAuthentication(arg0, arg1 any) *MockStateEnableUserAuthenticationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableUserAuthentication", reflect.TypeOf((*MockState)(nil).EnableUserAuthentication), arg0, arg1)
	return &MockStateEnableUserAuthenticationCall{Call: call}
}

// MockStateEnableUserAuthenticationCall wrap *gomock.Call
type MockStateEnableUserAuthenticationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateEnableUserAuthenticationCall) Return(arg0 error) *MockStateEnableUserAuthenticationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateEnableUserAuthenticationCall) Do(f func(context.Context, string) error) *MockStateEnableUserAuthenticationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateEnableUserAuthenticationCall) DoAndReturn(f func(context.Context, string) error) *MockStateEnableUserAuthenticationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetActivationKey mocks base method.
func (m *MockState) GetActivationKey(arg0 context.Context, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivationKey", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivationKey indicates an expected call of GetActivationKey.
func (mr *MockStateMockRecorder) GetActivationKey(arg0, arg1 any) *MockStateGetActivationKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivationKey", reflect.TypeOf((*MockState)(nil).GetActivationKey), arg0, arg1)
	return &MockStateGetActivationKeyCall{Call: call}
}

// MockStateGetActivationKeyCall wrap *gomock.Call
type MockStateGetActivationKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetActivationKeyCall) Return(arg0 []byte, arg1 error) *MockStateGetActivationKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetActivationKeyCall) Do(f func(context.Context, string) ([]byte, error)) *MockStateGetActivationKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetActivationKeyCall) DoAndReturn(f func(context.Context, string) ([]byte, error)) *MockStateGetActivationKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllUsers mocks base method.
func (m *MockState) GetAllUsers(arg0 context.Context) ([]user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", arg0)
	ret0, _ := ret[0].([]user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockStateMockRecorder) GetAllUsers(arg0 any) *MockStateGetAllUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockState)(nil).GetAllUsers), arg0)
	return &MockStateGetAllUsersCall{Call: call}
}

// MockStateGetAllUsersCall wrap *gomock.Call
type MockStateGetAllUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAllUsersCall) Return(arg0 []user.User, arg1 error) *MockStateGetAllUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAllUsersCall) Do(f func(context.Context) ([]user.User, error)) *MockStateGetAllUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAllUsersCall) DoAndReturn(f func(context.Context) ([]user.User, error)) *MockStateGetAllUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUser mocks base method.
func (m *MockState) GetUser(arg0 context.Context, arg1 user.UUID) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStateMockRecorder) GetUser(arg0, arg1 any) *MockStateGetUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockState)(nil).GetUser), arg0, arg1)
	return &MockStateGetUserCall{Call: call}
}

// MockStateGetUserCall wrap *gomock.Call
type MockStateGetUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUserCall) Return(arg0 user.User, arg1 error) *MockStateGetUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUserCall) Do(f func(context.Context, user.UUID) (user.User, error)) *MockStateGetUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUserCall) DoAndReturn(f func(context.Context, user.UUID) (user.User, error)) *MockStateGetUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByAuth mocks base method.
func (m *MockState) GetUserByAuth(arg0 context.Context, arg1 string, arg2 auth.Password) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByAuth", arg0, arg1, arg2)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByAuth indicates an expected call of GetUserByAuth.
func (mr *MockStateMockRecorder) GetUserByAuth(arg0, arg1, arg2 any) *MockStateGetUserByAuthCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByAuth", reflect.TypeOf((*MockState)(nil).GetUserByAuth), arg0, arg1, arg2)
	return &MockStateGetUserByAuthCall{Call: call}
}

// MockStateGetUserByAuthCall wrap *gomock.Call
type MockStateGetUserByAuthCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUserByAuthCall) Return(arg0 user.User, arg1 error) *MockStateGetUserByAuthCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUserByAuthCall) Do(f func(context.Context, string, auth.Password) (user.User, error)) *MockStateGetUserByAuthCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUserByAuthCall) DoAndReturn(f func(context.Context, string, auth.Password) (user.User, error)) *MockStateGetUserByAuthCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByName mocks base method.
func (m *MockState) GetUserByName(arg0 context.Context, arg1 string) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", arg0, arg1)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockStateMockRecorder) GetUserByName(arg0, arg1 any) *MockStateGetUserByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockState)(nil).GetUserByName), arg0, arg1)
	return &MockStateGetUserByNameCall{Call: call}
}

// MockStateGetUserByNameCall wrap *gomock.Call
type MockStateGetUserByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUserByNameCall) Return(arg0 user.User, arg1 error) *MockStateGetUserByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUserByNameCall) Do(f func(context.Context, string) (user.User, error)) *MockStateGetUserByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUserByNameCall) DoAndReturn(f func(context.Context, string) (user.User, error)) *MockStateGetUserByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadAllAccessForUserAndObjectType mocks base method.
func (m *MockState) ReadAllAccessForUserAndObjectType(arg0 context.Context, arg1 string, arg2 permission.ObjectType) ([]permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllAccessForUserAndObjectType", arg0, arg1, arg2)
	ret0, _ := ret[0].([]permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllAccessForUserAndObjectType indicates an expected call of ReadAllAccessForUserAndObjectType.
func (mr *MockStateMockRecorder) ReadAllAccessForUserAndObjectType(arg0, arg1, arg2 any) *MockStateReadAllAccessForUserAndObjectTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllAccessForUserAndObjectType", reflect.TypeOf((*MockState)(nil).ReadAllAccessForUserAndObjectType), arg0, arg1, arg2)
	return &MockStateReadAllAccessForUserAndObjectTypeCall{Call: call}
}

// MockStateReadAllAccessForUserAndObjectTypeCall wrap *gomock.Call
type MockStateReadAllAccessForUserAndObjectTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateReadAllAccessForUserAndObjectTypeCall) Return(arg0 []permission.UserAccess, arg1 error) *MockStateReadAllAccessForUserAndObjectTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateReadAllAccessForUserAndObjectTypeCall) Do(f func(context.Context, string, permission.ObjectType) ([]permission.UserAccess, error)) *MockStateReadAllAccessForUserAndObjectTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateReadAllAccessForUserAndObjectTypeCall) DoAndReturn(f func(context.Context, string, permission.ObjectType) ([]permission.UserAccess, error)) *MockStateReadAllAccessForUserAndObjectTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadAllUserAccessForTarget mocks base method.
func (m *MockState) ReadAllUserAccessForTarget(arg0 context.Context, arg1 permission.ID) ([]permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllUserAccessForTarget", arg0, arg1)
	ret0, _ := ret[0].([]permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllUserAccessForTarget indicates an expected call of ReadAllUserAccessForTarget.
func (mr *MockStateMockRecorder) ReadAllUserAccessForTarget(arg0, arg1 any) *MockStateReadAllUserAccessForTargetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllUserAccessForTarget", reflect.TypeOf((*MockState)(nil).ReadAllUserAccessForTarget), arg0, arg1)
	return &MockStateReadAllUserAccessForTargetCall{Call: call}
}

// MockStateReadAllUserAccessForTargetCall wrap *gomock.Call
type MockStateReadAllUserAccessForTargetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateReadAllUserAccessForTargetCall) Return(arg0 []permission.UserAccess, arg1 error) *MockStateReadAllUserAccessForTargetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateReadAllUserAccessForTargetCall) Do(f func(context.Context, permission.ID) ([]permission.UserAccess, error)) *MockStateReadAllUserAccessForTargetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateReadAllUserAccessForTargetCall) DoAndReturn(f func(context.Context, permission.ID) ([]permission.UserAccess, error)) *MockStateReadAllUserAccessForTargetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadAllUserAccessForUser mocks base method.
func (m *MockState) ReadAllUserAccessForUser(arg0 context.Context, arg1 string) ([]permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllUserAccessForUser", arg0, arg1)
	ret0, _ := ret[0].([]permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllUserAccessForUser indicates an expected call of ReadAllUserAccessForUser.
func (mr *MockStateMockRecorder) ReadAllUserAccessForUser(arg0, arg1 any) *MockStateReadAllUserAccessForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllUserAccessForUser", reflect.TypeOf((*MockState)(nil).ReadAllUserAccessForUser), arg0, arg1)
	return &MockStateReadAllUserAccessForUserCall{Call: call}
}

// MockStateReadAllUserAccessForUserCall wrap *gomock.Call
type MockStateReadAllUserAccessForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateReadAllUserAccessForUserCall) Return(arg0 []permission.UserAccess, arg1 error) *MockStateReadAllUserAccessForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateReadAllUserAccessForUserCall) Do(f func(context.Context, string) ([]permission.UserAccess, error)) *MockStateReadAllUserAccessForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateReadAllUserAccessForUserCall) DoAndReturn(f func(context.Context, string) ([]permission.UserAccess, error)) *MockStateReadAllUserAccessForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadUserAccessForTarget mocks base method.
func (m *MockState) ReadUserAccessForTarget(arg0 context.Context, arg1 string, arg2 permission.ID) (permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserAccessForTarget", arg0, arg1, arg2)
	ret0, _ := ret[0].(permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserAccessForTarget indicates an expected call of ReadUserAccessForTarget.
func (mr *MockStateMockRecorder) ReadUserAccessForTarget(arg0, arg1, arg2 any) *MockStateReadUserAccessForTargetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserAccessForTarget", reflect.TypeOf((*MockState)(nil).ReadUserAccessForTarget), arg0, arg1, arg2)
	return &MockStateReadUserAccessForTargetCall{Call: call}
}

// MockStateReadUserAccessForTargetCall wrap *gomock.Call
type MockStateReadUserAccessForTargetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateReadUserAccessForTargetCall) Return(arg0 permission.UserAccess, arg1 error) *MockStateReadUserAccessForTargetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateReadUserAccessForTargetCall) Do(f func(context.Context, string, permission.ID) (permission.UserAccess, error)) *MockStateReadUserAccessForTargetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateReadUserAccessForTargetCall) DoAndReturn(f func(context.Context, string, permission.ID) (permission.UserAccess, error)) *MockStateReadUserAccessForTargetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadUserAccessLevelForTarget mocks base method.
func (m *MockState) ReadUserAccessLevelForTarget(arg0 context.Context, arg1 string, arg2 permission.ID) (permission.Access, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserAccessLevelForTarget", arg0, arg1, arg2)
	ret0, _ := ret[0].(permission.Access)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserAccessLevelForTarget indicates an expected call of ReadUserAccessLevelForTarget.
func (mr *MockStateMockRecorder) ReadUserAccessLevelForTarget(arg0, arg1, arg2 any) *MockStateReadUserAccessLevelForTargetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserAccessLevelForTarget", reflect.TypeOf((*MockState)(nil).ReadUserAccessLevelForTarget), arg0, arg1, arg2)
	return &MockStateReadUserAccessLevelForTargetCall{Call: call}
}

// MockStateReadUserAccessLevelForTargetCall wrap *gomock.Call
type MockStateReadUserAccessLevelForTargetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateReadUserAccessLevelForTargetCall) Return(arg0 permission.Access, arg1 error) *MockStateReadUserAccessLevelForTargetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateReadUserAccessLevelForTargetCall) Do(f func(context.Context, string, permission.ID) (permission.Access, error)) *MockStateReadUserAccessLevelForTargetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateReadUserAccessLevelForTargetCall) DoAndReturn(f func(context.Context, string, permission.ID) (permission.Access, error)) *MockStateReadUserAccessLevelForTargetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveUser mocks base method.
func (m *MockState) RemoveUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockStateMockRecorder) RemoveUser(arg0, arg1 any) *MockStateRemoveUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockState)(nil).RemoveUser), arg0, arg1)
	return &MockStateRemoveUserCall{Call: call}
}

// MockStateRemoveUserCall wrap *gomock.Call
type MockStateRemoveUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateRemoveUserCall) Return(arg0 error) *MockStateRemoveUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateRemoveUserCall) Do(f func(context.Context, string) error) *MockStateRemoveUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateRemoveUserCall) DoAndReturn(f func(context.Context, string) error) *MockStateRemoveUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetActivationKey mocks base method.
func (m *MockState) SetActivationKey(arg0 context.Context, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetActivationKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetActivationKey indicates an expected call of SetActivationKey.
func (mr *MockStateMockRecorder) SetActivationKey(arg0, arg1, arg2 any) *MockStateSetActivationKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActivationKey", reflect.TypeOf((*MockState)(nil).SetActivationKey), arg0, arg1, arg2)
	return &MockStateSetActivationKeyCall{Call: call}
}

// MockStateSetActivationKeyCall wrap *gomock.Call
type MockStateSetActivationKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetActivationKeyCall) Return(arg0 error) *MockStateSetActivationKeyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetActivationKeyCall) Do(f func(context.Context, string, []byte) error) *MockStateSetActivationKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetActivationKeyCall) DoAndReturn(f func(context.Context, string, []byte) error) *MockStateSetActivationKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetPasswordHash mocks base method.
func (m *MockState) SetPasswordHash(arg0 context.Context, arg1, arg2 string, arg3 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPasswordHash", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPasswordHash indicates an expected call of SetPasswordHash.
func (mr *MockStateMockRecorder) SetPasswordHash(arg0, arg1, arg2, arg3 any) *MockStateSetPasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPasswordHash", reflect.TypeOf((*MockState)(nil).SetPasswordHash), arg0, arg1, arg2, arg3)
	return &MockStateSetPasswordHashCall{Call: call}
}

// MockStateSetPasswordHashCall wrap *gomock.Call
type MockStateSetPasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetPasswordHashCall) Return(arg0 error) *MockStateSetPasswordHashCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetPasswordHashCall) Do(f func(context.Context, string, string, []byte) error) *MockStateSetPasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetPasswordHashCall) DoAndReturn(f func(context.Context, string, string, []byte) error) *MockStateSetPasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateLastLogin mocks base method.
func (m *MockState) UpdateLastLogin(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastLogin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastLogin indicates an expected call of UpdateLastLogin.
func (mr *MockStateMockRecorder) UpdateLastLogin(arg0, arg1 any) *MockStateUpdateLastLoginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastLogin", reflect.TypeOf((*MockState)(nil).UpdateLastLogin), arg0, arg1)
	return &MockStateUpdateLastLoginCall{Call: call}
}

// MockStateUpdateLastLoginCall wrap *gomock.Call
type MockStateUpdateLastLoginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpdateLastLoginCall) Return(arg0 error) *MockStateUpdateLastLoginCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpdateLastLoginCall) Do(f func(context.Context, string) error) *MockStateUpdateLastLoginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpdateLastLoginCall) DoAndReturn(f func(context.Context, string) error) *MockStateUpdateLastLoginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpsertPermission mocks base method.
func (m *MockState) UpsertPermission(arg0 context.Context, arg1 access.UpdatePermissionArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertPermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPermission indicates an expected call of UpsertPermission.
func (mr *MockStateMockRecorder) UpsertPermission(arg0, arg1 any) *MockStateUpsertPermissionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPermission", reflect.TypeOf((*MockState)(nil).UpsertPermission), arg0, arg1)
	return &MockStateUpsertPermissionCall{Call: call}
}

// MockStateUpsertPermissionCall wrap *gomock.Call
type MockStateUpsertPermissionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpsertPermissionCall) Return(arg0 error) *MockStateUpsertPermissionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpsertPermissionCall) Do(f func(context.Context, access.UpdatePermissionArgs) error) *MockStateUpsertPermissionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpsertPermissionCall) DoAndReturn(f func(context.Context, access.UpdatePermissionArgs) error) *MockStateUpsertPermissionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUserState is a mock of UserState interface.
type MockUserState struct {
	ctrl     *gomock.Controller
	recorder *MockUserStateMockRecorder
}

// MockUserStateMockRecorder is the mock recorder for MockUserState.
type MockUserStateMockRecorder struct {
	mock *MockUserState
}

// NewMockUserState creates a new mock instance.
func NewMockUserState(ctrl *gomock.Controller) *MockUserState {
	mock := &MockUserState{ctrl: ctrl}
	mock.recorder = &MockUserStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserState) EXPECT() *MockUserStateMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockUserState) AddUser(arg0 context.Context, arg1 user.UUID, arg2, arg3 string, arg4 user.UUID, arg5 permission.AccessSpec) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUser indicates an expected call of AddUser.
func (mr *MockUserStateMockRecorder) AddUser(arg0, arg1, arg2, arg3, arg4, arg5 any) *MockUserStateAddUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockUserState)(nil).AddUser), arg0, arg1, arg2, arg3, arg4, arg5)
	return &MockUserStateAddUserCall{Call: call}
}

// MockUserStateAddUserCall wrap *gomock.Call
type MockUserStateAddUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserStateAddUserCall) Return(arg0 error) *MockUserStateAddUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserStateAddUserCall) Do(f func(context.Context, user.UUID, string, string, user.UUID, permission.AccessSpec) error) *MockUserStateAddUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserStateAddUserCall) DoAndReturn(f func(context.Context, user.UUID, string, string, user.UUID, permission.AccessSpec) error) *MockUserStateAddUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddUserWithActivationKey mocks base method.
func (m *MockUserState) AddUserWithActivationKey(arg0 context.Context, arg1 user.UUID, arg2, arg3 string, arg4 user.UUID, arg5 permission.AccessSpec, arg6 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserWithActivationKey", arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserWithActivationKey indicates an expected call of AddUserWithActivationKey.
func (mr *MockUserStateMockRecorder) AddUserWithActivationKey(arg0, arg1, arg2, arg3, arg4, arg5, arg6 any) *MockUserStateAddUserWithActivationKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserWithActivationKey", reflect.TypeOf((*MockUserState)(nil).AddUserWithActivationKey), arg0, arg1, arg2, arg3, arg4, arg5, arg6)
	return &MockUserStateAddUserWithActivationKeyCall{Call: call}
}

// MockUserStateAddUserWithActivationKeyCall wrap *gomock.Call
type MockUserStateAddUserWithActivationKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserStateAddUserWithActivationKeyCall) Return(arg0 error) *MockUserStateAddUserWithActivationKeyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserStateAddUserWithActivationKeyCall) Do(f func(context.Context, user.UUID, string, string, user.UUID, permission.AccessSpec, []byte) error) *MockUserStateAddUserWithActivationKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserStateAddUserWithActivationKeyCall) DoAndReturn(f func(context.Context, user.UUID, string, string, user.UUID, permission.AccessSpec, []byte) error) *MockUserStateAddUserWithActivationKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// AddUserWithPasswordHash mocks base method.
func (m *MockUserState) AddUserWithPasswordHash(arg0 context.Context, arg1 user.UUID, arg2, arg3 string, arg4 user.UUID, arg5 permission.AccessSpec, arg6 string, arg7 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserWithPasswordHash", arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserWithPasswordHash indicates an expected call of AddUserWithPasswordHash.
func (mr *MockUserStateMockRecorder) AddUserWithPasswordHash(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7 any) *MockUserStateAddUserWithPasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserWithPasswordHash", reflect.TypeOf((*MockUserState)(nil).AddUserWithPasswordHash), arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7)
	return &MockUserStateAddUserWithPasswordHashCall{Call: call}
}

// MockUserStateAddUserWithPasswordHashCall wrap *gomock.Call
type MockUserStateAddUserWithPasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserStateAddUserWithPasswordHashCall) Return(arg0 error) *MockUserStateAddUserWithPasswordHashCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserStateAddUserWithPasswordHashCall) Do(f func(context.Context, user.UUID, string, string, user.UUID, permission.AccessSpec, string, []byte) error) *MockUserStateAddUserWithPasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserStateAddUserWithPasswordHashCall) DoAndReturn(f func(context.Context, user.UUID, string, string, user.UUID, permission.AccessSpec, string, []byte) error) *MockUserStateAddUserWithPasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DisableUserAuthentication mocks base method.
func (m *MockUserState) DisableUserAuthentication(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DisableUserAuthentication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DisableUserAuthentication indicates an expected call of DisableUserAuthentication.
func (mr *MockUserStateMockRecorder) DisableUserAuthentication(arg0, arg1 any) *MockUserStateDisableUserAuthenticationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DisableUserAuthentication", reflect.TypeOf((*MockUserState)(nil).DisableUserAuthentication), arg0, arg1)
	return &MockUserStateDisableUserAuthenticationCall{Call: call}
}

// MockUserStateDisableUserAuthenticationCall wrap *gomock.Call
type MockUserStateDisableUserAuthenticationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserStateDisableUserAuthenticationCall) Return(arg0 error) *MockUserStateDisableUserAuthenticationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserStateDisableUserAuthenticationCall) Do(f func(context.Context, string) error) *MockUserStateDisableUserAuthenticationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserStateDisableUserAuthenticationCall) DoAndReturn(f func(context.Context, string) error) *MockUserStateDisableUserAuthenticationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnableUserAuthentication mocks base method.
func (m *MockUserState) EnableUserAuthentication(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableUserAuthentication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnableUserAuthentication indicates an expected call of EnableUserAuthentication.
func (mr *MockUserStateMockRecorder) EnableUserAuthentication(arg0, arg1 any) *MockUserStateEnableUserAuthenticationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableUserAuthentication", reflect.TypeOf((*MockUserState)(nil).EnableUserAuthentication), arg0, arg1)
	return &MockUserStateEnableUserAuthenticationCall{Call: call}
}

// MockUserStateEnableUserAuthenticationCall wrap *gomock.Call
type MockUserStateEnableUserAuthenticationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserStateEnableUserAuthenticationCall) Return(arg0 error) *MockUserStateEnableUserAuthenticationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserStateEnableUserAuthenticationCall) Do(f func(context.Context, string) error) *MockUserStateEnableUserAuthenticationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserStateEnableUserAuthenticationCall) DoAndReturn(f func(context.Context, string) error) *MockUserStateEnableUserAuthenticationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetActivationKey mocks base method.
func (m *MockUserState) GetActivationKey(arg0 context.Context, arg1 string) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActivationKey", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActivationKey indicates an expected call of GetActivationKey.
func (mr *MockUserStateMockRecorder) GetActivationKey(arg0, arg1 any) *MockUserStateGetActivationKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActivationKey", reflect.TypeOf((*MockUserState)(nil).GetActivationKey), arg0, arg1)
	return &MockUserStateGetActivationKeyCall{Call: call}
}

// MockUserStateGetActivationKeyCall wrap *gomock.Call
type MockUserStateGetActivationKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserStateGetActivationKeyCall) Return(arg0 []byte, arg1 error) *MockUserStateGetActivationKeyCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserStateGetActivationKeyCall) Do(f func(context.Context, string) ([]byte, error)) *MockUserStateGetActivationKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserStateGetActivationKeyCall) DoAndReturn(f func(context.Context, string) ([]byte, error)) *MockUserStateGetActivationKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllUsers mocks base method.
func (m *MockUserState) GetAllUsers(arg0 context.Context) ([]user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers", arg0)
	ret0, _ := ret[0].([]user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockUserStateMockRecorder) GetAllUsers(arg0 any) *MockUserStateGetAllUsersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockUserState)(nil).GetAllUsers), arg0)
	return &MockUserStateGetAllUsersCall{Call: call}
}

// MockUserStateGetAllUsersCall wrap *gomock.Call
type MockUserStateGetAllUsersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserStateGetAllUsersCall) Return(arg0 []user.User, arg1 error) *MockUserStateGetAllUsersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserStateGetAllUsersCall) Do(f func(context.Context) ([]user.User, error)) *MockUserStateGetAllUsersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserStateGetAllUsersCall) DoAndReturn(f func(context.Context) ([]user.User, error)) *MockUserStateGetAllUsersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUser mocks base method.
func (m *MockUserState) GetUser(arg0 context.Context, arg1 user.UUID) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserStateMockRecorder) GetUser(arg0, arg1 any) *MockUserStateGetUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserState)(nil).GetUser), arg0, arg1)
	return &MockUserStateGetUserCall{Call: call}
}

// MockUserStateGetUserCall wrap *gomock.Call
type MockUserStateGetUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserStateGetUserCall) Return(arg0 user.User, arg1 error) *MockUserStateGetUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserStateGetUserCall) Do(f func(context.Context, user.UUID) (user.User, error)) *MockUserStateGetUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserStateGetUserCall) DoAndReturn(f func(context.Context, user.UUID) (user.User, error)) *MockUserStateGetUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByAuth mocks base method.
func (m *MockUserState) GetUserByAuth(arg0 context.Context, arg1 string, arg2 auth.Password) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByAuth", arg0, arg1, arg2)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByAuth indicates an expected call of GetUserByAuth.
func (mr *MockUserStateMockRecorder) GetUserByAuth(arg0, arg1, arg2 any) *MockUserStateGetUserByAuthCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByAuth", reflect.TypeOf((*MockUserState)(nil).GetUserByAuth), arg0, arg1, arg2)
	return &MockUserStateGetUserByAuthCall{Call: call}
}

// MockUserStateGetUserByAuthCall wrap *gomock.Call
type MockUserStateGetUserByAuthCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserStateGetUserByAuthCall) Return(arg0 user.User, arg1 error) *MockUserStateGetUserByAuthCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserStateGetUserByAuthCall) Do(f func(context.Context, string, auth.Password) (user.User, error)) *MockUserStateGetUserByAuthCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserStateGetUserByAuthCall) DoAndReturn(f func(context.Context, string, auth.Password) (user.User, error)) *MockUserStateGetUserByAuthCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUserByName mocks base method.
func (m *MockUserState) GetUserByName(arg0 context.Context, arg1 string) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", arg0, arg1)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockUserStateMockRecorder) GetUserByName(arg0, arg1 any) *MockUserStateGetUserByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockUserState)(nil).GetUserByName), arg0, arg1)
	return &MockUserStateGetUserByNameCall{Call: call}
}

// MockUserStateGetUserByNameCall wrap *gomock.Call
type MockUserStateGetUserByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserStateGetUserByNameCall) Return(arg0 user.User, arg1 error) *MockUserStateGetUserByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserStateGetUserByNameCall) Do(f func(context.Context, string) (user.User, error)) *MockUserStateGetUserByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserStateGetUserByNameCall) DoAndReturn(f func(context.Context, string) (user.User, error)) *MockUserStateGetUserByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveUser mocks base method.
func (m *MockUserState) RemoveUser(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveUser indicates an expected call of RemoveUser.
func (mr *MockUserStateMockRecorder) RemoveUser(arg0, arg1 any) *MockUserStateRemoveUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveUser", reflect.TypeOf((*MockUserState)(nil).RemoveUser), arg0, arg1)
	return &MockUserStateRemoveUserCall{Call: call}
}

// MockUserStateRemoveUserCall wrap *gomock.Call
type MockUserStateRemoveUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserStateRemoveUserCall) Return(arg0 error) *MockUserStateRemoveUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserStateRemoveUserCall) Do(f func(context.Context, string) error) *MockUserStateRemoveUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserStateRemoveUserCall) DoAndReturn(f func(context.Context, string) error) *MockUserStateRemoveUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetActivationKey mocks base method.
func (m *MockUserState) SetActivationKey(arg0 context.Context, arg1 string, arg2 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetActivationKey", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetActivationKey indicates an expected call of SetActivationKey.
func (mr *MockUserStateMockRecorder) SetActivationKey(arg0, arg1, arg2 any) *MockUserStateSetActivationKeyCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetActivationKey", reflect.TypeOf((*MockUserState)(nil).SetActivationKey), arg0, arg1, arg2)
	return &MockUserStateSetActivationKeyCall{Call: call}
}

// MockUserStateSetActivationKeyCall wrap *gomock.Call
type MockUserStateSetActivationKeyCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserStateSetActivationKeyCall) Return(arg0 error) *MockUserStateSetActivationKeyCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserStateSetActivationKeyCall) Do(f func(context.Context, string, []byte) error) *MockUserStateSetActivationKeyCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserStateSetActivationKeyCall) DoAndReturn(f func(context.Context, string, []byte) error) *MockUserStateSetActivationKeyCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetPasswordHash mocks base method.
func (m *MockUserState) SetPasswordHash(arg0 context.Context, arg1, arg2 string, arg3 []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetPasswordHash", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetPasswordHash indicates an expected call of SetPasswordHash.
func (mr *MockUserStateMockRecorder) SetPasswordHash(arg0, arg1, arg2, arg3 any) *MockUserStateSetPasswordHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPasswordHash", reflect.TypeOf((*MockUserState)(nil).SetPasswordHash), arg0, arg1, arg2, arg3)
	return &MockUserStateSetPasswordHashCall{Call: call}
}

// MockUserStateSetPasswordHashCall wrap *gomock.Call
type MockUserStateSetPasswordHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserStateSetPasswordHashCall) Return(arg0 error) *MockUserStateSetPasswordHashCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserStateSetPasswordHashCall) Do(f func(context.Context, string, string, []byte) error) *MockUserStateSetPasswordHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserStateSetPasswordHashCall) DoAndReturn(f func(context.Context, string, string, []byte) error) *MockUserStateSetPasswordHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateLastLogin mocks base method.
func (m *MockUserState) UpdateLastLogin(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastLogin", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLastLogin indicates an expected call of UpdateLastLogin.
func (mr *MockUserStateMockRecorder) UpdateLastLogin(arg0, arg1 any) *MockUserStateUpdateLastLoginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastLogin", reflect.TypeOf((*MockUserState)(nil).UpdateLastLogin), arg0, arg1)
	return &MockUserStateUpdateLastLoginCall{Call: call}
}

// MockUserStateUpdateLastLoginCall wrap *gomock.Call
type MockUserStateUpdateLastLoginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserStateUpdateLastLoginCall) Return(arg0 error) *MockUserStateUpdateLastLoginCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserStateUpdateLastLoginCall) Do(f func(context.Context, string) error) *MockUserStateUpdateLastLoginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserStateUpdateLastLoginCall) DoAndReturn(f func(context.Context, string) error) *MockUserStateUpdateLastLoginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockPermissionState is a mock of PermissionState interface.
type MockPermissionState struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionStateMockRecorder
}

// MockPermissionStateMockRecorder is the mock recorder for MockPermissionState.
type MockPermissionStateMockRecorder struct {
	mock *MockPermissionState
}

// NewMockPermissionState creates a new mock instance.
func NewMockPermissionState(ctrl *gomock.Controller) *MockPermissionState {
	mock := &MockPermissionState{ctrl: ctrl}
	mock.recorder = &MockPermissionStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionState) EXPECT() *MockPermissionStateMockRecorder {
	return m.recorder
}

// AllModelAccessForCloudCredential mocks base method.
func (m *MockPermissionState) AllModelAccessForCloudCredential(arg0 context.Context, arg1 credential.Key) ([]access.CredentialOwnerModelAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllModelAccessForCloudCredential", arg0, arg1)
	ret0, _ := ret[0].([]access.CredentialOwnerModelAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllModelAccessForCloudCredential indicates an expected call of AllModelAccessForCloudCredential.
func (mr *MockPermissionStateMockRecorder) AllModelAccessForCloudCredential(arg0, arg1 any) *MockPermissionStateAllModelAccessForCloudCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllModelAccessForCloudCredential", reflect.TypeOf((*MockPermissionState)(nil).AllModelAccessForCloudCredential), arg0, arg1)
	return &MockPermissionStateAllModelAccessForCloudCredentialCall{Call: call}
}

// MockPermissionStateAllModelAccessForCloudCredentialCall wrap *gomock.Call
type MockPermissionStateAllModelAccessForCloudCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPermissionStateAllModelAccessForCloudCredentialCall) Return(arg0 []access.CredentialOwnerModelAccess, arg1 error) *MockPermissionStateAllModelAccessForCloudCredentialCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPermissionStateAllModelAccessForCloudCredentialCall) Do(f func(context.Context, credential.Key) ([]access.CredentialOwnerModelAccess, error)) *MockPermissionStateAllModelAccessForCloudCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPermissionStateAllModelAccessForCloudCredentialCall) DoAndReturn(f func(context.Context, credential.Key) ([]access.CredentialOwnerModelAccess, error)) *MockPermissionStateAllModelAccessForCloudCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreatePermission mocks base method.
func (m *MockPermissionState) CreatePermission(arg0 context.Context, arg1 uuid.UUID, arg2 permission.UserAccessSpec) (permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePermission", arg0, arg1, arg2)
	ret0, _ := ret[0].(permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePermission indicates an expected call of CreatePermission.
func (mr *MockPermissionStateMockRecorder) CreatePermission(arg0, arg1, arg2 any) *MockPermissionStateCreatePermissionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePermission", reflect.TypeOf((*MockPermissionState)(nil).CreatePermission), arg0, arg1, arg2)
	return &MockPermissionStateCreatePermissionCall{Call: call}
}

// MockPermissionStateCreatePermissionCall wrap *gomock.Call
type MockPermissionStateCreatePermissionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPermissionStateCreatePermissionCall) Return(arg0 permission.UserAccess, arg1 error) *MockPermissionStateCreatePermissionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPermissionStateCreatePermissionCall) Do(f func(context.Context, uuid.UUID, permission.UserAccessSpec) (permission.UserAccess, error)) *MockPermissionStateCreatePermissionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPermissionStateCreatePermissionCall) DoAndReturn(f func(context.Context, uuid.UUID, permission.UserAccessSpec) (permission.UserAccess, error)) *MockPermissionStateCreatePermissionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeletePermission mocks base method.
func (m *MockPermissionState) DeletePermission(arg0 context.Context, arg1 string, arg2 permission.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermission", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockPermissionStateMockRecorder) DeletePermission(arg0, arg1, arg2 any) *MockPermissionStateDeletePermissionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockPermissionState)(nil).DeletePermission), arg0, arg1, arg2)
	return &MockPermissionStateDeletePermissionCall{Call: call}
}

// MockPermissionStateDeletePermissionCall wrap *gomock.Call
type MockPermissionStateDeletePermissionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPermissionStateDeletePermissionCall) Return(arg0 error) *MockPermissionStateDeletePermissionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPermissionStateDeletePermissionCall) Do(f func(context.Context, string, permission.ID) error) *MockPermissionStateDeletePermissionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPermissionStateDeletePermissionCall) DoAndReturn(f func(context.Context, string, permission.ID) error) *MockPermissionStateDeletePermissionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadAllAccessForUserAndObjectType mocks base method.
func (m *MockPermissionState) ReadAllAccessForUserAndObjectType(arg0 context.Context, arg1 string, arg2 permission.ObjectType) ([]permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllAccessForUserAndObjectType", arg0, arg1, arg2)
	ret0, _ := ret[0].([]permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllAccessForUserAndObjectType indicates an expected call of ReadAllAccessForUserAndObjectType.
func (mr *MockPermissionStateMockRecorder) ReadAllAccessForUserAndObjectType(arg0, arg1, arg2 any) *MockPermissionStateReadAllAccessForUserAndObjectTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllAccessForUserAndObjectType", reflect.TypeOf((*MockPermissionState)(nil).ReadAllAccessForUserAndObjectType), arg0, arg1, arg2)
	return &MockPermissionStateReadAllAccessForUserAndObjectTypeCall{Call: call}
}

// MockPermissionStateReadAllAccessForUserAndObjectTypeCall wrap *gomock.Call
type MockPermissionStateReadAllAccessForUserAndObjectTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPermissionStateReadAllAccessForUserAndObjectTypeCall) Return(arg0 []permission.UserAccess, arg1 error) *MockPermissionStateReadAllAccessForUserAndObjectTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPermissionStateReadAllAccessForUserAndObjectTypeCall) Do(f func(context.Context, string, permission.ObjectType) ([]permission.UserAccess, error)) *MockPermissionStateReadAllAccessForUserAndObjectTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPermissionStateReadAllAccessForUserAndObjectTypeCall) DoAndReturn(f func(context.Context, string, permission.ObjectType) ([]permission.UserAccess, error)) *MockPermissionStateReadAllAccessForUserAndObjectTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadAllUserAccessForTarget mocks base method.
func (m *MockPermissionState) ReadAllUserAccessForTarget(arg0 context.Context, arg1 permission.ID) ([]permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllUserAccessForTarget", arg0, arg1)
	ret0, _ := ret[0].([]permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllUserAccessForTarget indicates an expected call of ReadAllUserAccessForTarget.
func (mr *MockPermissionStateMockRecorder) ReadAllUserAccessForTarget(arg0, arg1 any) *MockPermissionStateReadAllUserAccessForTargetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllUserAccessForTarget", reflect.TypeOf((*MockPermissionState)(nil).ReadAllUserAccessForTarget), arg0, arg1)
	return &MockPermissionStateReadAllUserAccessForTargetCall{Call: call}
}

// MockPermissionStateReadAllUserAccessForTargetCall wrap *gomock.Call
type MockPermissionStateReadAllUserAccessForTargetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPermissionStateReadAllUserAccessForTargetCall) Return(arg0 []permission.UserAccess, arg1 error) *MockPermissionStateReadAllUserAccessForTargetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPermissionStateReadAllUserAccessForTargetCall) Do(f func(context.Context, permission.ID) ([]permission.UserAccess, error)) *MockPermissionStateReadAllUserAccessForTargetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPermissionStateReadAllUserAccessForTargetCall) DoAndReturn(f func(context.Context, permission.ID) ([]permission.UserAccess, error)) *MockPermissionStateReadAllUserAccessForTargetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadAllUserAccessForUser mocks base method.
func (m *MockPermissionState) ReadAllUserAccessForUser(arg0 context.Context, arg1 string) ([]permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllUserAccessForUser", arg0, arg1)
	ret0, _ := ret[0].([]permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllUserAccessForUser indicates an expected call of ReadAllUserAccessForUser.
func (mr *MockPermissionStateMockRecorder) ReadAllUserAccessForUser(arg0, arg1 any) *MockPermissionStateReadAllUserAccessForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllUserAccessForUser", reflect.TypeOf((*MockPermissionState)(nil).ReadAllUserAccessForUser), arg0, arg1)
	return &MockPermissionStateReadAllUserAccessForUserCall{Call: call}
}

// MockPermissionStateReadAllUserAccessForUserCall wrap *gomock.Call
type MockPermissionStateReadAllUserAccessForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPermissionStateReadAllUserAccessForUserCall) Return(arg0 []permission.UserAccess, arg1 error) *MockPermissionStateReadAllUserAccessForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPermissionStateReadAllUserAccessForUserCall) Do(f func(context.Context, string) ([]permission.UserAccess, error)) *MockPermissionStateReadAllUserAccessForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPermissionStateReadAllUserAccessForUserCall) DoAndReturn(f func(context.Context, string) ([]permission.UserAccess, error)) *MockPermissionStateReadAllUserAccessForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadUserAccessForTarget mocks base method.
func (m *MockPermissionState) ReadUserAccessForTarget(arg0 context.Context, arg1 string, arg2 permission.ID) (permission.UserAccess, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserAccessForTarget", arg0, arg1, arg2)
	ret0, _ := ret[0].(permission.UserAccess)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserAccessForTarget indicates an expected call of ReadUserAccessForTarget.
func (mr *MockPermissionStateMockRecorder) ReadUserAccessForTarget(arg0, arg1, arg2 any) *MockPermissionStateReadUserAccessForTargetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserAccessForTarget", reflect.TypeOf((*MockPermissionState)(nil).ReadUserAccessForTarget), arg0, arg1, arg2)
	return &MockPermissionStateReadUserAccessForTargetCall{Call: call}
}

// MockPermissionStateReadUserAccessForTargetCall wrap *gomock.Call
type MockPermissionStateReadUserAccessForTargetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPermissionStateReadUserAccessForTargetCall) Return(arg0 permission.UserAccess, arg1 error) *MockPermissionStateReadUserAccessForTargetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPermissionStateReadUserAccessForTargetCall) Do(f func(context.Context, string, permission.ID) (permission.UserAccess, error)) *MockPermissionStateReadUserAccessForTargetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPermissionStateReadUserAccessForTargetCall) DoAndReturn(f func(context.Context, string, permission.ID) (permission.UserAccess, error)) *MockPermissionStateReadUserAccessForTargetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReadUserAccessLevelForTarget mocks base method.
func (m *MockPermissionState) ReadUserAccessLevelForTarget(arg0 context.Context, arg1 string, arg2 permission.ID) (permission.Access, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadUserAccessLevelForTarget", arg0, arg1, arg2)
	ret0, _ := ret[0].(permission.Access)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadUserAccessLevelForTarget indicates an expected call of ReadUserAccessLevelForTarget.
func (mr *MockPermissionStateMockRecorder) ReadUserAccessLevelForTarget(arg0, arg1, arg2 any) *MockPermissionStateReadUserAccessLevelForTargetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadUserAccessLevelForTarget", reflect.TypeOf((*MockPermissionState)(nil).ReadUserAccessLevelForTarget), arg0, arg1, arg2)
	return &MockPermissionStateReadUserAccessLevelForTargetCall{Call: call}
}

// MockPermissionStateReadUserAccessLevelForTargetCall wrap *gomock.Call
type MockPermissionStateReadUserAccessLevelForTargetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPermissionStateReadUserAccessLevelForTargetCall) Return(arg0 permission.Access, arg1 error) *MockPermissionStateReadUserAccessLevelForTargetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPermissionStateReadUserAccessLevelForTargetCall) Do(f func(context.Context, string, permission.ID) (permission.Access, error)) *MockPermissionStateReadUserAccessLevelForTargetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPermissionStateReadUserAccessLevelForTargetCall) DoAndReturn(f func(context.Context, string, permission.ID) (permission.Access, error)) *MockPermissionStateReadUserAccessLevelForTargetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpsertPermission mocks base method.
func (m *MockPermissionState) UpsertPermission(arg0 context.Context, arg1 access.UpdatePermissionArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertPermission", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertPermission indicates an expected call of UpsertPermission.
func (mr *MockPermissionStateMockRecorder) UpsertPermission(arg0, arg1 any) *MockPermissionStateUpsertPermissionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertPermission", reflect.TypeOf((*MockPermissionState)(nil).UpsertPermission), arg0, arg1)
	return &MockPermissionStateUpsertPermissionCall{Call: call}
}

// MockPermissionStateUpsertPermissionCall wrap *gomock.Call
type MockPermissionStateUpsertPermissionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockPermissionStateUpsertPermissionCall) Return(arg0 error) *MockPermissionStateUpsertPermissionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockPermissionStateUpsertPermissionCall) Do(f func(context.Context, access.UpdatePermissionArgs) error) *MockPermissionStateUpsertPermissionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockPermissionStateUpsertPermissionCall) DoAndReturn(f func(context.Context, access.UpdatePermissionArgs) error) *MockPermissionStateUpsertPermissionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
