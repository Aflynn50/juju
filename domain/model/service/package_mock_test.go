// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/model/service (interfaces: ModelState)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go github.com/juju/juju/domain/model/service ModelState
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	constraints "github.com/juju/juju/core/constraints"
	model "github.com/juju/juju/core/model"
	model0 "github.com/juju/juju/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockModelState is a mock of ModelState interface.
type MockModelState struct {
	ctrl     *gomock.Controller
	recorder *MockModelStateMockRecorder
}

// MockModelStateMockRecorder is the mock recorder for MockModelState.
type MockModelStateMockRecorder struct {
	mock *MockModelState
}

// NewMockModelState creates a new mock instance.
func NewMockModelState(ctrl *gomock.Controller) *MockModelState {
	mock := &MockModelState{ctrl: ctrl}
	mock.recorder = &MockModelStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelState) EXPECT() *MockModelStateMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockModelState) Create(arg0 context.Context, arg1 model0.ReadOnlyModelCreationArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockModelStateMockRecorder) Create(arg0, arg1 any) *MockModelStateCreateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockModelState)(nil).Create), arg0, arg1)
	return &MockModelStateCreateCall{Call: call}
}

// MockModelStateCreateCall wrap *gomock.Call
type MockModelStateCreateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateCreateCall) Return(arg0 error) *MockModelStateCreateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateCreateCall) Do(f func(context.Context, model0.ReadOnlyModelCreationArgs) error) *MockModelStateCreateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateCreateCall) DoAndReturn(f func(context.Context, model0.ReadOnlyModelCreationArgs) error) *MockModelStateCreateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Delete mocks base method.
func (m *MockModelState) Delete(arg0 context.Context, arg1 model.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockModelStateMockRecorder) Delete(arg0, arg1 any) *MockModelStateDeleteCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockModelState)(nil).Delete), arg0, arg1)
	return &MockModelStateDeleteCall{Call: call}
}

// MockModelStateDeleteCall wrap *gomock.Call
type MockModelStateDeleteCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateDeleteCall) Return(arg0 error) *MockModelStateDeleteCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateDeleteCall) Do(f func(context.Context, model.UUID) error) *MockModelStateDeleteCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateDeleteCall) DoAndReturn(f func(context.Context, model.UUID) error) *MockModelStateDeleteCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModel mocks base method.
func (m *MockModelState) GetModel(arg0 context.Context) (model.ReadOnlyModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModel", arg0)
	ret0, _ := ret[0].(model.ReadOnlyModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModel indicates an expected call of GetModel.
func (mr *MockModelStateMockRecorder) GetModel(arg0 any) *MockModelStateGetModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModel", reflect.TypeOf((*MockModelState)(nil).GetModel), arg0)
	return &MockModelStateGetModelCall{Call: call}
}

// MockModelStateGetModelCall wrap *gomock.Call
type MockModelStateGetModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetModelCall) Return(arg0 model.ReadOnlyModel, arg1 error) *MockModelStateGetModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetModelCall) Do(f func(context.Context) (model.ReadOnlyModel, error)) *MockModelStateGetModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetModelCall) DoAndReturn(f func(context.Context) (model.ReadOnlyModel, error)) *MockModelStateGetModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelConstraints mocks base method.
func (m *MockModelState) GetModelConstraints(arg0 context.Context) (constraints.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelConstraints", arg0)
	ret0, _ := ret[0].(constraints.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelConstraints indicates an expected call of GetModelConstraints.
func (mr *MockModelStateMockRecorder) GetModelConstraints(arg0 any) *MockModelStateGetModelConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelConstraints", reflect.TypeOf((*MockModelState)(nil).GetModelConstraints), arg0)
	return &MockModelStateGetModelConstraintsCall{Call: call}
}

// MockModelStateGetModelConstraintsCall wrap *gomock.Call
type MockModelStateGetModelConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetModelConstraintsCall) Return(arg0 constraints.Value, arg1 error) *MockModelStateGetModelConstraintsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetModelConstraintsCall) Do(f func(context.Context) (constraints.Value, error)) *MockModelStateGetModelConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetModelConstraintsCall) DoAndReturn(f func(context.Context) (constraints.Value, error)) *MockModelStateGetModelConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelMetrics mocks base method.
func (m *MockModelState) GetModelMetrics(arg0 context.Context) (model.ModelMetrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelMetrics", arg0)
	ret0, _ := ret[0].(model.ModelMetrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelMetrics indicates an expected call of GetModelMetrics.
func (mr *MockModelStateMockRecorder) GetModelMetrics(arg0 any) *MockModelStateGetModelMetricsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelMetrics", reflect.TypeOf((*MockModelState)(nil).GetModelMetrics), arg0)
	return &MockModelStateGetModelMetricsCall{Call: call}
}

// MockModelStateGetModelMetricsCall wrap *gomock.Call
type MockModelStateGetModelMetricsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateGetModelMetricsCall) Return(arg0 model.ModelMetrics, arg1 error) *MockModelStateGetModelMetricsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateGetModelMetricsCall) Do(f func(context.Context) (model.ModelMetrics, error)) *MockModelStateGetModelMetricsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateGetModelMetricsCall) DoAndReturn(f func(context.Context) (model.ModelMetrics, error)) *MockModelStateGetModelMetricsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetModelConstraints mocks base method.
func (m *MockModelState) SetModelConstraints(arg0 context.Context, arg1 constraints.Value) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModelConstraints", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModelConstraints indicates an expected call of SetModelConstraints.
func (mr *MockModelStateMockRecorder) SetModelConstraints(arg0, arg1 any) *MockModelStateSetModelConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModelConstraints", reflect.TypeOf((*MockModelState)(nil).SetModelConstraints), arg0, arg1)
	return &MockModelStateSetModelConstraintsCall{Call: call}
}

// MockModelStateSetModelConstraintsCall wrap *gomock.Call
type MockModelStateSetModelConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelStateSetModelConstraintsCall) Return(arg0 error) *MockModelStateSetModelConstraintsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelStateSetModelConstraintsCall) Do(f func(context.Context, constraints.Value) error) *MockModelStateSetModelConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelStateSetModelConstraintsCall) DoAndReturn(f func(context.Context, constraints.Value) error) *MockModelStateSetModelConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
