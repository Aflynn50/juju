// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/model/modelmigration (interfaces: ModelImportService,ReadOnlyModelService,UserService,ControllerConfigService)
//
// Generated by this command:
//
//	mockgen -typed -package modelmigration -destination migrations_mock_test.go github.com/juju/juju/domain/model/modelmigration ModelImportService,ReadOnlyModelService,UserService,ControllerConfigService
//

// Package modelmigration is a generated GoMock package.
package modelmigration

import (
	context "context"
	reflect "reflect"

	controller "github.com/juju/juju/controller"
	model "github.com/juju/juju/core/model"
	user "github.com/juju/juju/core/user"
	model0 "github.com/juju/juju/domain/model"
	uuid "github.com/juju/juju/internal/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockModelImportService is a mock of ModelImportService interface.
type MockModelImportService struct {
	ctrl     *gomock.Controller
	recorder *MockModelImportServiceMockRecorder
}

// MockModelImportServiceMockRecorder is the mock recorder for MockModelImportService.
type MockModelImportServiceMockRecorder struct {
	mock *MockModelImportService
}

// NewMockModelImportService creates a new mock instance.
func NewMockModelImportService(ctrl *gomock.Controller) *MockModelImportService {
	mock := &MockModelImportService{ctrl: ctrl}
	mock.recorder = &MockModelImportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockModelImportService) EXPECT() *MockModelImportServiceMockRecorder {
	return m.recorder
}

// DeleteModel mocks base method.
func (m *MockModelImportService) DeleteModel(arg0 context.Context, arg1 model.UUID, arg2 ...model0.DeleteModelOption) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteModel", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModel indicates an expected call of DeleteModel.
func (mr *MockModelImportServiceMockRecorder) DeleteModel(arg0, arg1 any, arg2 ...any) *MockModelImportServiceDeleteModelCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockModelImportService)(nil).DeleteModel), varargs...)
	return &MockModelImportServiceDeleteModelCall{Call: call}
}

// MockModelImportServiceDeleteModelCall wrap *gomock.Call
type MockModelImportServiceDeleteModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelImportServiceDeleteModelCall) Return(arg0 error) *MockModelImportServiceDeleteModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelImportServiceDeleteModelCall) Do(f func(context.Context, model.UUID, ...model0.DeleteModelOption) error) *MockModelImportServiceDeleteModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelImportServiceDeleteModelCall) DoAndReturn(f func(context.Context, model.UUID, ...model0.DeleteModelOption) error) *MockModelImportServiceDeleteModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ImportModel mocks base method.
func (m *MockModelImportService) ImportModel(arg0 context.Context, arg1 model0.ModelImportArgs) (func(context.Context) error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportModel", arg0, arg1)
	ret0, _ := ret[0].(func(context.Context) error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ImportModel indicates an expected call of ImportModel.
func (mr *MockModelImportServiceMockRecorder) ImportModel(arg0, arg1 any) *MockModelImportServiceImportModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportModel", reflect.TypeOf((*MockModelImportService)(nil).ImportModel), arg0, arg1)
	return &MockModelImportServiceImportModelCall{Call: call}
}

// MockModelImportServiceImportModelCall wrap *gomock.Call
type MockModelImportServiceImportModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockModelImportServiceImportModelCall) Return(arg0 func(context.Context) error, arg1 error) *MockModelImportServiceImportModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockModelImportServiceImportModelCall) Do(f func(context.Context, model0.ModelImportArgs) (func(context.Context) error, error)) *MockModelImportServiceImportModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockModelImportServiceImportModelCall) DoAndReturn(f func(context.Context, model0.ModelImportArgs) (func(context.Context) error, error)) *MockModelImportServiceImportModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockReadOnlyModelService is a mock of ReadOnlyModelService interface.
type MockReadOnlyModelService struct {
	ctrl     *gomock.Controller
	recorder *MockReadOnlyModelServiceMockRecorder
}

// MockReadOnlyModelServiceMockRecorder is the mock recorder for MockReadOnlyModelService.
type MockReadOnlyModelServiceMockRecorder struct {
	mock *MockReadOnlyModelService
}

// NewMockReadOnlyModelService creates a new mock instance.
func NewMockReadOnlyModelService(ctrl *gomock.Controller) *MockReadOnlyModelService {
	mock := &MockReadOnlyModelService{ctrl: ctrl}
	mock.recorder = &MockReadOnlyModelServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReadOnlyModelService) EXPECT() *MockReadOnlyModelServiceMockRecorder {
	return m.recorder
}

// CreateModel mocks base method.
func (m *MockReadOnlyModelService) CreateModel(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateModel", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateModel indicates an expected call of CreateModel.
func (mr *MockReadOnlyModelServiceMockRecorder) CreateModel(arg0, arg1 any) *MockReadOnlyModelServiceCreateModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateModel", reflect.TypeOf((*MockReadOnlyModelService)(nil).CreateModel), arg0, arg1)
	return &MockReadOnlyModelServiceCreateModelCall{Call: call}
}

// MockReadOnlyModelServiceCreateModelCall wrap *gomock.Call
type MockReadOnlyModelServiceCreateModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReadOnlyModelServiceCreateModelCall) Return(arg0 error) *MockReadOnlyModelServiceCreateModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReadOnlyModelServiceCreateModelCall) Do(f func(context.Context, uuid.UUID) error) *MockReadOnlyModelServiceCreateModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReadOnlyModelServiceCreateModelCall) DoAndReturn(f func(context.Context, uuid.UUID) error) *MockReadOnlyModelServiceCreateModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteModel mocks base method.
func (m *MockReadOnlyModelService) DeleteModel(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteModel", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteModel indicates an expected call of DeleteModel.
func (mr *MockReadOnlyModelServiceMockRecorder) DeleteModel(arg0 any) *MockReadOnlyModelServiceDeleteModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteModel", reflect.TypeOf((*MockReadOnlyModelService)(nil).DeleteModel), arg0)
	return &MockReadOnlyModelServiceDeleteModelCall{Call: call}
}

// MockReadOnlyModelServiceDeleteModelCall wrap *gomock.Call
type MockReadOnlyModelServiceDeleteModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockReadOnlyModelServiceDeleteModelCall) Return(arg0 error) *MockReadOnlyModelServiceDeleteModelCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockReadOnlyModelServiceDeleteModelCall) Do(f func(context.Context) error) *MockReadOnlyModelServiceDeleteModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockReadOnlyModelServiceDeleteModelCall) DoAndReturn(f func(context.Context) error) *MockReadOnlyModelServiceDeleteModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// GetUserByName mocks base method.
func (m *MockUserService) GetUserByName(arg0 context.Context, arg1 user.Name) (user.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", arg0, arg1)
	ret0, _ := ret[0].(user.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByName indicates an expected call of GetUserByName.
func (mr *MockUserServiceMockRecorder) GetUserByName(arg0, arg1 any) *MockUserServiceGetUserByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockUserService)(nil).GetUserByName), arg0, arg1)
	return &MockUserServiceGetUserByNameCall{Call: call}
}

// MockUserServiceGetUserByNameCall wrap *gomock.Call
type MockUserServiceGetUserByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUserServiceGetUserByNameCall) Return(arg0 user.User, arg1 error) *MockUserServiceGetUserByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUserServiceGetUserByNameCall) Do(f func(context.Context, user.Name) (user.User, error)) *MockUserServiceGetUserByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUserServiceGetUserByNameCall) DoAndReturn(f func(context.Context, user.Name) (user.User, error)) *MockUserServiceGetUserByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockControllerConfigService is a mock of ControllerConfigService interface.
type MockControllerConfigService struct {
	ctrl     *gomock.Controller
	recorder *MockControllerConfigServiceMockRecorder
}

// MockControllerConfigServiceMockRecorder is the mock recorder for MockControllerConfigService.
type MockControllerConfigServiceMockRecorder struct {
	mock *MockControllerConfigService
}

// NewMockControllerConfigService creates a new mock instance.
func NewMockControllerConfigService(ctrl *gomock.Controller) *MockControllerConfigService {
	mock := &MockControllerConfigService{ctrl: ctrl}
	mock.recorder = &MockControllerConfigServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockControllerConfigService) EXPECT() *MockControllerConfigServiceMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockControllerConfigService) ControllerConfig(arg0 context.Context) (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig", arg0)
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockControllerConfigServiceMockRecorder) ControllerConfig(arg0 any) *MockControllerConfigServiceControllerConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockControllerConfigService)(nil).ControllerConfig), arg0)
	return &MockControllerConfigServiceControllerConfigCall{Call: call}
}

// MockControllerConfigServiceControllerConfigCall wrap *gomock.Call
type MockControllerConfigServiceControllerConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockControllerConfigServiceControllerConfigCall) Return(arg0 controller.Config, arg1 error) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockControllerConfigServiceControllerConfigCall) Do(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockControllerConfigServiceControllerConfigCall) DoAndReturn(f func(context.Context) (controller.Config, error)) *MockControllerConfigServiceControllerConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
