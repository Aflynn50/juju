// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/application/service (interfaces: State,DeleteSecretState,ResourceStoreGetter,WatcherFactory,AgentVersionGetter,Provider,CharmStore)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go github.com/juju/juju/domain/application/service State,DeleteSecretState,ResourceStoreGetter,WatcherFactory,AgentVersionGetter,Provider,CharmStore
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	io "io"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	assumes "github.com/juju/juju/core/assumes"
	changestream "github.com/juju/juju/core/changestream"
	charm "github.com/juju/juju/core/charm"
	model "github.com/juju/juju/core/model"
	network "github.com/juju/juju/core/network"
	resource "github.com/juju/juju/core/resource"
	secrets "github.com/juju/juju/core/secrets"
	unit "github.com/juju/juju/core/unit"
	watcher "github.com/juju/juju/core/watcher"
	eventsource "github.com/juju/juju/core/watcher/eventsource"
	domain "github.com/juju/juju/domain"
	application0 "github.com/juju/juju/domain/application"
	charm0 "github.com/juju/juju/domain/application/charm"
	resource0 "github.com/juju/juju/domain/application/resource"
	life "github.com/juju/juju/domain/life"
	storage "github.com/juju/juju/domain/storage"
	resource1 "github.com/juju/juju/internal/charm/resource"
	version "github.com/juju/version/v2"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// AddUnits mocks base method.
func (m *MockState) AddUnits(arg0 domain.AtomicContext, arg1 application.ID, arg2 ...application0.AddUnitArg) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddUnits", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUnits indicates an expected call of AddUnits.
func (mr *MockStateMockRecorder) AddUnits(arg0, arg1 any, arg2 ...any) *MockStateAddUnitsCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUnits", reflect.TypeOf((*MockState)(nil).AddUnits), varargs...)
	return &MockStateAddUnitsCall{Call: call}
}

// MockStateAddUnitsCall wrap *gomock.Call
type MockStateAddUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAddUnitsCall) Return(arg0 error) *MockStateAddUnitsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAddUnitsCall) Do(f func(domain.AtomicContext, application.ID, ...application0.AddUnitArg) error) *MockStateAddUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAddUnitsCall) DoAndReturn(f func(domain.AtomicContext, application.ID, ...application0.AddUnitArg) error) *MockStateAddUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// CreateApplication mocks base method.
func (m *MockState) CreateApplication(arg0 domain.AtomicContext, arg1 string, arg2 application0.AddApplicationArg) (application.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(application.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateApplication indicates an expected call of CreateApplication.
func (mr *MockStateMockRecorder) CreateApplication(arg0, arg1, arg2 any) *MockStateCreateApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateApplication", reflect.TypeOf((*MockState)(nil).CreateApplication), arg0, arg1, arg2)
	return &MockStateCreateApplicationCall{Call: call}
}

// MockStateCreateApplicationCall wrap *gomock.Call
type MockStateCreateApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCreateApplicationCall) Return(arg0 application.ID, arg1 error) *MockStateCreateApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCreateApplicationCall) Do(f func(domain.AtomicContext, string, application0.AddApplicationArg) (application.ID, error)) *MockStateCreateApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCreateApplicationCall) DoAndReturn(f func(domain.AtomicContext, string, application0.AddApplicationArg) (application.ID, error)) *MockStateCreateApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteApplication mocks base method.
func (m *MockState) DeleteApplication(arg0 domain.AtomicContext, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteApplication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteApplication indicates an expected call of DeleteApplication.
func (mr *MockStateMockRecorder) DeleteApplication(arg0, arg1 any) *MockStateDeleteApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteApplication", reflect.TypeOf((*MockState)(nil).DeleteApplication), arg0, arg1)
	return &MockStateDeleteApplicationCall{Call: call}
}

// MockStateDeleteApplicationCall wrap *gomock.Call
type MockStateDeleteApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeleteApplicationCall) Return(arg0 error) *MockStateDeleteApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeleteApplicationCall) Do(f func(domain.AtomicContext, string) error) *MockStateDeleteApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeleteApplicationCall) DoAndReturn(f func(domain.AtomicContext, string) error) *MockStateDeleteApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteCharm mocks base method.
func (m *MockState) DeleteCharm(arg0 context.Context, arg1 charm.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCharm", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCharm indicates an expected call of DeleteCharm.
func (mr *MockStateMockRecorder) DeleteCharm(arg0, arg1 any) *MockStateDeleteCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCharm", reflect.TypeOf((*MockState)(nil).DeleteCharm), arg0, arg1)
	return &MockStateDeleteCharmCall{Call: call}
}

// MockStateDeleteCharmCall wrap *gomock.Call
type MockStateDeleteCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeleteCharmCall) Return(arg0 error) *MockStateDeleteCharmCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeleteCharmCall) Do(f func(context.Context, charm.ID) error) *MockStateDeleteCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeleteCharmCall) DoAndReturn(f func(context.Context, charm.ID) error) *MockStateDeleteCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteUnit mocks base method.
func (m *MockState) DeleteUnit(arg0 domain.AtomicContext, arg1 unit.Name) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUnit", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteUnit indicates an expected call of DeleteUnit.
func (mr *MockStateMockRecorder) DeleteUnit(arg0, arg1 any) *MockStateDeleteUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUnit", reflect.TypeOf((*MockState)(nil).DeleteUnit), arg0, arg1)
	return &MockStateDeleteUnitCall{Call: call}
}

// MockStateDeleteUnitCall wrap *gomock.Call
type MockStateDeleteUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeleteUnitCall) Return(arg0 bool, arg1 error) *MockStateDeleteUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeleteUnitCall) Do(f func(domain.AtomicContext, unit.Name) (bool, error)) *MockStateDeleteUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeleteUnitCall) DoAndReturn(f func(domain.AtomicContext, unit.Name) (bool, error)) *MockStateDeleteUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationID mocks base method.
func (m *MockState) GetApplicationID(arg0 domain.AtomicContext, arg1 string) (application.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationID", arg0, arg1)
	ret0, _ := ret[0].(application.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationID indicates an expected call of GetApplicationID.
func (mr *MockStateMockRecorder) GetApplicationID(arg0, arg1 any) *MockStateGetApplicationIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationID", reflect.TypeOf((*MockState)(nil).GetApplicationID), arg0, arg1)
	return &MockStateGetApplicationIDCall{Call: call}
}

// MockStateGetApplicationIDCall wrap *gomock.Call
type MockStateGetApplicationIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetApplicationIDCall) Return(arg0 application.ID, arg1 error) *MockStateGetApplicationIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetApplicationIDCall) Do(f func(domain.AtomicContext, string) (application.ID, error)) *MockStateGetApplicationIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetApplicationIDCall) DoAndReturn(f func(domain.AtomicContext, string) (application.ID, error)) *MockStateGetApplicationIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationIDByUnitName mocks base method.
func (m *MockState) GetApplicationIDByUnitName(arg0 context.Context, arg1 unit.Name) (application.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationIDByUnitName", arg0, arg1)
	ret0, _ := ret[0].(application.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationIDByUnitName indicates an expected call of GetApplicationIDByUnitName.
func (mr *MockStateMockRecorder) GetApplicationIDByUnitName(arg0, arg1 any) *MockStateGetApplicationIDByUnitNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationIDByUnitName", reflect.TypeOf((*MockState)(nil).GetApplicationIDByUnitName), arg0, arg1)
	return &MockStateGetApplicationIDByUnitNameCall{Call: call}
}

// MockStateGetApplicationIDByUnitNameCall wrap *gomock.Call
type MockStateGetApplicationIDByUnitNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetApplicationIDByUnitNameCall) Return(arg0 application.ID, arg1 error) *MockStateGetApplicationIDByUnitNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetApplicationIDByUnitNameCall) Do(f func(context.Context, unit.Name) (application.ID, error)) *MockStateGetApplicationIDByUnitNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetApplicationIDByUnitNameCall) DoAndReturn(f func(context.Context, unit.Name) (application.ID, error)) *MockStateGetApplicationIDByUnitNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationLife mocks base method.
func (m *MockState) GetApplicationLife(arg0 domain.AtomicContext, arg1 string) (application.ID, life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationLife", arg0, arg1)
	ret0, _ := ret[0].(application.ID)
	ret1, _ := ret[1].(life.Life)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetApplicationLife indicates an expected call of GetApplicationLife.
func (mr *MockStateMockRecorder) GetApplicationLife(arg0, arg1 any) *MockStateGetApplicationLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationLife", reflect.TypeOf((*MockState)(nil).GetApplicationLife), arg0, arg1)
	return &MockStateGetApplicationLifeCall{Call: call}
}

// MockStateGetApplicationLifeCall wrap *gomock.Call
type MockStateGetApplicationLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetApplicationLifeCall) Return(arg0 application.ID, arg1 life.Life, arg2 error) *MockStateGetApplicationLifeCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetApplicationLifeCall) Do(f func(domain.AtomicContext, string) (application.ID, life.Life, error)) *MockStateGetApplicationLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetApplicationLifeCall) DoAndReturn(f func(domain.AtomicContext, string) (application.ID, life.Life, error)) *MockStateGetApplicationLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationResourceID mocks base method.
func (m *MockState) GetApplicationResourceID(arg0 context.Context, arg1 resource0.GetApplicationResourceIDArgs) (resource.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationResourceID", arg0, arg1)
	ret0, _ := ret[0].(resource.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationResourceID indicates an expected call of GetApplicationResourceID.
func (mr *MockStateMockRecorder) GetApplicationResourceID(arg0, arg1 any) *MockStateGetApplicationResourceIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationResourceID", reflect.TypeOf((*MockState)(nil).GetApplicationResourceID), arg0, arg1)
	return &MockStateGetApplicationResourceIDCall{Call: call}
}

// MockStateGetApplicationResourceIDCall wrap *gomock.Call
type MockStateGetApplicationResourceIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetApplicationResourceIDCall) Return(arg0 resource.UUID, arg1 error) *MockStateGetApplicationResourceIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetApplicationResourceIDCall) Do(f func(context.Context, resource0.GetApplicationResourceIDArgs) (resource.UUID, error)) *MockStateGetApplicationResourceIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetApplicationResourceIDCall) DoAndReturn(f func(context.Context, resource0.GetApplicationResourceIDArgs) (resource.UUID, error)) *MockStateGetApplicationResourceIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationScaleState mocks base method.
func (m *MockState) GetApplicationScaleState(arg0 domain.AtomicContext, arg1 application.ID) (application0.ScaleState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationScaleState", arg0, arg1)
	ret0, _ := ret[0].(application0.ScaleState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationScaleState indicates an expected call of GetApplicationScaleState.
func (mr *MockStateMockRecorder) GetApplicationScaleState(arg0, arg1 any) *MockStateGetApplicationScaleStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationScaleState", reflect.TypeOf((*MockState)(nil).GetApplicationScaleState), arg0, arg1)
	return &MockStateGetApplicationScaleStateCall{Call: call}
}

// MockStateGetApplicationScaleStateCall wrap *gomock.Call
type MockStateGetApplicationScaleStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetApplicationScaleStateCall) Return(arg0 application0.ScaleState, arg1 error) *MockStateGetApplicationScaleStateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetApplicationScaleStateCall) Do(f func(domain.AtomicContext, application.ID) (application0.ScaleState, error)) *MockStateGetApplicationScaleStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetApplicationScaleStateCall) DoAndReturn(f func(domain.AtomicContext, application.ID) (application0.ScaleState, error)) *MockStateGetApplicationScaleStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationUnitLife mocks base method.
func (m *MockState) GetApplicationUnitLife(arg0 context.Context, arg1 string, arg2 ...unit.UUID) (map[unit.UUID]life.Life, error) {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetApplicationUnitLife", varargs...)
	ret0, _ := ret[0].(map[unit.UUID]life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationUnitLife indicates an expected call of GetApplicationUnitLife.
func (mr *MockStateMockRecorder) GetApplicationUnitLife(arg0, arg1 any, arg2 ...any) *MockStateGetApplicationUnitLifeCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationUnitLife", reflect.TypeOf((*MockState)(nil).GetApplicationUnitLife), varargs...)
	return &MockStateGetApplicationUnitLifeCall{Call: call}
}

// MockStateGetApplicationUnitLifeCall wrap *gomock.Call
type MockStateGetApplicationUnitLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetApplicationUnitLifeCall) Return(arg0 map[unit.UUID]life.Life, arg1 error) *MockStateGetApplicationUnitLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetApplicationUnitLifeCall) Do(f func(context.Context, string, ...unit.UUID) (map[unit.UUID]life.Life, error)) *MockStateGetApplicationUnitLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetApplicationUnitLifeCall) DoAndReturn(f func(context.Context, string, ...unit.UUID) (map[unit.UUID]life.Life, error)) *MockStateGetApplicationUnitLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationsWithPendingCharmsFromUUIDs mocks base method.
func (m *MockState) GetApplicationsWithPendingCharmsFromUUIDs(arg0 context.Context, arg1 []application.ID) ([]application.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationsWithPendingCharmsFromUUIDs", arg0, arg1)
	ret0, _ := ret[0].([]application.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationsWithPendingCharmsFromUUIDs indicates an expected call of GetApplicationsWithPendingCharmsFromUUIDs.
func (mr *MockStateMockRecorder) GetApplicationsWithPendingCharmsFromUUIDs(arg0, arg1 any) *MockStateGetApplicationsWithPendingCharmsFromUUIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationsWithPendingCharmsFromUUIDs", reflect.TypeOf((*MockState)(nil).GetApplicationsWithPendingCharmsFromUUIDs), arg0, arg1)
	return &MockStateGetApplicationsWithPendingCharmsFromUUIDsCall{Call: call}
}

// MockStateGetApplicationsWithPendingCharmsFromUUIDsCall wrap *gomock.Call
type MockStateGetApplicationsWithPendingCharmsFromUUIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetApplicationsWithPendingCharmsFromUUIDsCall) Return(arg0 []application.ID, arg1 error) *MockStateGetApplicationsWithPendingCharmsFromUUIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetApplicationsWithPendingCharmsFromUUIDsCall) Do(f func(context.Context, []application.ID) ([]application.ID, error)) *MockStateGetApplicationsWithPendingCharmsFromUUIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetApplicationsWithPendingCharmsFromUUIDsCall) DoAndReturn(f func(context.Context, []application.ID) ([]application.ID, error)) *MockStateGetApplicationsWithPendingCharmsFromUUIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharm mocks base method.
func (m *MockState) GetCharm(arg0 context.Context, arg1 charm.ID) (charm0.Charm, *charm0.DownloadInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharm", arg0, arg1)
	ret0, _ := ret[0].(charm0.Charm)
	ret1, _ := ret[1].(*charm0.DownloadInfo)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCharm indicates an expected call of GetCharm.
func (mr *MockStateMockRecorder) GetCharm(arg0, arg1 any) *MockStateGetCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharm", reflect.TypeOf((*MockState)(nil).GetCharm), arg0, arg1)
	return &MockStateGetCharmCall{Call: call}
}

// MockStateGetCharmCall wrap *gomock.Call
type MockStateGetCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetCharmCall) Return(arg0 charm0.Charm, arg1 *charm0.DownloadInfo, arg2 error) *MockStateGetCharmCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetCharmCall) Do(f func(context.Context, charm.ID) (charm0.Charm, *charm0.DownloadInfo, error)) *MockStateGetCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetCharmCall) DoAndReturn(f func(context.Context, charm.ID) (charm0.Charm, *charm0.DownloadInfo, error)) *MockStateGetCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmActions mocks base method.
func (m *MockState) GetCharmActions(arg0 context.Context, arg1 charm.ID) (charm0.Actions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmActions", arg0, arg1)
	ret0, _ := ret[0].(charm0.Actions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmActions indicates an expected call of GetCharmActions.
func (mr *MockStateMockRecorder) GetCharmActions(arg0, arg1 any) *MockStateGetCharmActionsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmActions", reflect.TypeOf((*MockState)(nil).GetCharmActions), arg0, arg1)
	return &MockStateGetCharmActionsCall{Call: call}
}

// MockStateGetCharmActionsCall wrap *gomock.Call
type MockStateGetCharmActionsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetCharmActionsCall) Return(arg0 charm0.Actions, arg1 error) *MockStateGetCharmActionsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetCharmActionsCall) Do(f func(context.Context, charm.ID) (charm0.Actions, error)) *MockStateGetCharmActionsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetCharmActionsCall) DoAndReturn(f func(context.Context, charm.ID) (charm0.Actions, error)) *MockStateGetCharmActionsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmArchiveMetadata mocks base method.
func (m *MockState) GetCharmArchiveMetadata(arg0 context.Context, arg1 charm.ID) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmArchiveMetadata", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCharmArchiveMetadata indicates an expected call of GetCharmArchiveMetadata.
func (mr *MockStateMockRecorder) GetCharmArchiveMetadata(arg0, arg1 any) *MockStateGetCharmArchiveMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmArchiveMetadata", reflect.TypeOf((*MockState)(nil).GetCharmArchiveMetadata), arg0, arg1)
	return &MockStateGetCharmArchiveMetadataCall{Call: call}
}

// MockStateGetCharmArchiveMetadataCall wrap *gomock.Call
type MockStateGetCharmArchiveMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetCharmArchiveMetadataCall) Return(arg0, arg1 string, arg2 error) *MockStateGetCharmArchiveMetadataCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetCharmArchiveMetadataCall) Do(f func(context.Context, charm.ID) (string, string, error)) *MockStateGetCharmArchiveMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetCharmArchiveMetadataCall) DoAndReturn(f func(context.Context, charm.ID) (string, string, error)) *MockStateGetCharmArchiveMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmArchivePath mocks base method.
func (m *MockState) GetCharmArchivePath(arg0 context.Context, arg1 charm.ID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmArchivePath", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmArchivePath indicates an expected call of GetCharmArchivePath.
func (mr *MockStateMockRecorder) GetCharmArchivePath(arg0, arg1 any) *MockStateGetCharmArchivePathCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmArchivePath", reflect.TypeOf((*MockState)(nil).GetCharmArchivePath), arg0, arg1)
	return &MockStateGetCharmArchivePathCall{Call: call}
}

// MockStateGetCharmArchivePathCall wrap *gomock.Call
type MockStateGetCharmArchivePathCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetCharmArchivePathCall) Return(arg0 string, arg1 error) *MockStateGetCharmArchivePathCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetCharmArchivePathCall) Do(f func(context.Context, charm.ID) (string, error)) *MockStateGetCharmArchivePathCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetCharmArchivePathCall) DoAndReturn(f func(context.Context, charm.ID) (string, error)) *MockStateGetCharmArchivePathCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmByApplicationID mocks base method.
func (m *MockState) GetCharmByApplicationID(arg0 context.Context, arg1 application.ID) (charm0.Charm, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmByApplicationID", arg0, arg1)
	ret0, _ := ret[0].(charm0.Charm)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmByApplicationID indicates an expected call of GetCharmByApplicationID.
func (mr *MockStateMockRecorder) GetCharmByApplicationID(arg0, arg1 any) *MockStateGetCharmByApplicationIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmByApplicationID", reflect.TypeOf((*MockState)(nil).GetCharmByApplicationID), arg0, arg1)
	return &MockStateGetCharmByApplicationIDCall{Call: call}
}

// MockStateGetCharmByApplicationIDCall wrap *gomock.Call
type MockStateGetCharmByApplicationIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetCharmByApplicationIDCall) Return(arg0 charm0.Charm, arg1 error) *MockStateGetCharmByApplicationIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetCharmByApplicationIDCall) Do(f func(context.Context, application.ID) (charm0.Charm, error)) *MockStateGetCharmByApplicationIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetCharmByApplicationIDCall) DoAndReturn(f func(context.Context, application.ID) (charm0.Charm, error)) *MockStateGetCharmByApplicationIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmConfig mocks base method.
func (m *MockState) GetCharmConfig(arg0 context.Context, arg1 charm.ID) (charm0.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmConfig", arg0, arg1)
	ret0, _ := ret[0].(charm0.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmConfig indicates an expected call of GetCharmConfig.
func (mr *MockStateMockRecorder) GetCharmConfig(arg0, arg1 any) *MockStateGetCharmConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmConfig", reflect.TypeOf((*MockState)(nil).GetCharmConfig), arg0, arg1)
	return &MockStateGetCharmConfigCall{Call: call}
}

// MockStateGetCharmConfigCall wrap *gomock.Call
type MockStateGetCharmConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetCharmConfigCall) Return(arg0 charm0.Config, arg1 error) *MockStateGetCharmConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetCharmConfigCall) Do(f func(context.Context, charm.ID) (charm0.Config, error)) *MockStateGetCharmConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetCharmConfigCall) DoAndReturn(f func(context.Context, charm.ID) (charm0.Config, error)) *MockStateGetCharmConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmDownloadInfo mocks base method.
func (m *MockState) GetCharmDownloadInfo(arg0 context.Context, arg1 charm.ID) (*charm0.DownloadInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmDownloadInfo", arg0, arg1)
	ret0, _ := ret[0].(*charm0.DownloadInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmDownloadInfo indicates an expected call of GetCharmDownloadInfo.
func (mr *MockStateMockRecorder) GetCharmDownloadInfo(arg0, arg1 any) *MockStateGetCharmDownloadInfoCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmDownloadInfo", reflect.TypeOf((*MockState)(nil).GetCharmDownloadInfo), arg0, arg1)
	return &MockStateGetCharmDownloadInfoCall{Call: call}
}

// MockStateGetCharmDownloadInfoCall wrap *gomock.Call
type MockStateGetCharmDownloadInfoCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetCharmDownloadInfoCall) Return(arg0 *charm0.DownloadInfo, arg1 error) *MockStateGetCharmDownloadInfoCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetCharmDownloadInfoCall) Do(f func(context.Context, charm.ID) (*charm0.DownloadInfo, error)) *MockStateGetCharmDownloadInfoCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetCharmDownloadInfoCall) DoAndReturn(f func(context.Context, charm.ID) (*charm0.DownloadInfo, error)) *MockStateGetCharmDownloadInfoCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmID mocks base method.
func (m *MockState) GetCharmID(arg0 context.Context, arg1 string, arg2 int, arg3 charm0.CharmSource) (charm.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmID", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(charm.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmID indicates an expected call of GetCharmID.
func (mr *MockStateMockRecorder) GetCharmID(arg0, arg1, arg2, arg3 any) *MockStateGetCharmIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmID", reflect.TypeOf((*MockState)(nil).GetCharmID), arg0, arg1, arg2, arg3)
	return &MockStateGetCharmIDCall{Call: call}
}

// MockStateGetCharmIDCall wrap *gomock.Call
type MockStateGetCharmIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetCharmIDCall) Return(arg0 charm.ID, arg1 error) *MockStateGetCharmIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetCharmIDCall) Do(f func(context.Context, string, int, charm0.CharmSource) (charm.ID, error)) *MockStateGetCharmIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetCharmIDCall) DoAndReturn(f func(context.Context, string, int, charm0.CharmSource) (charm.ID, error)) *MockStateGetCharmIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmIDByApplicationName mocks base method.
func (m *MockState) GetCharmIDByApplicationName(arg0 context.Context, arg1 string) (charm.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmIDByApplicationName", arg0, arg1)
	ret0, _ := ret[0].(charm.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmIDByApplicationName indicates an expected call of GetCharmIDByApplicationName.
func (mr *MockStateMockRecorder) GetCharmIDByApplicationName(arg0, arg1 any) *MockStateGetCharmIDByApplicationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmIDByApplicationName", reflect.TypeOf((*MockState)(nil).GetCharmIDByApplicationName), arg0, arg1)
	return &MockStateGetCharmIDByApplicationNameCall{Call: call}
}

// MockStateGetCharmIDByApplicationNameCall wrap *gomock.Call
type MockStateGetCharmIDByApplicationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetCharmIDByApplicationNameCall) Return(arg0 charm.ID, arg1 error) *MockStateGetCharmIDByApplicationNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetCharmIDByApplicationNameCall) Do(f func(context.Context, string) (charm.ID, error)) *MockStateGetCharmIDByApplicationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetCharmIDByApplicationNameCall) DoAndReturn(f func(context.Context, string) (charm.ID, error)) *MockStateGetCharmIDByApplicationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmLXDProfile mocks base method.
func (m *MockState) GetCharmLXDProfile(arg0 context.Context, arg1 charm.ID) ([]byte, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmLXDProfile", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCharmLXDProfile indicates an expected call of GetCharmLXDProfile.
func (mr *MockStateMockRecorder) GetCharmLXDProfile(arg0, arg1 any) *MockStateGetCharmLXDProfileCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmLXDProfile", reflect.TypeOf((*MockState)(nil).GetCharmLXDProfile), arg0, arg1)
	return &MockStateGetCharmLXDProfileCall{Call: call}
}

// MockStateGetCharmLXDProfileCall wrap *gomock.Call
type MockStateGetCharmLXDProfileCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetCharmLXDProfileCall) Return(arg0 []byte, arg1 int, arg2 error) *MockStateGetCharmLXDProfileCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetCharmLXDProfileCall) Do(f func(context.Context, charm.ID) ([]byte, int, error)) *MockStateGetCharmLXDProfileCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetCharmLXDProfileCall) DoAndReturn(f func(context.Context, charm.ID) ([]byte, int, error)) *MockStateGetCharmLXDProfileCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmManifest mocks base method.
func (m *MockState) GetCharmManifest(arg0 context.Context, arg1 charm.ID) (charm0.Manifest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmManifest", arg0, arg1)
	ret0, _ := ret[0].(charm0.Manifest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmManifest indicates an expected call of GetCharmManifest.
func (mr *MockStateMockRecorder) GetCharmManifest(arg0, arg1 any) *MockStateGetCharmManifestCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmManifest", reflect.TypeOf((*MockState)(nil).GetCharmManifest), arg0, arg1)
	return &MockStateGetCharmManifestCall{Call: call}
}

// MockStateGetCharmManifestCall wrap *gomock.Call
type MockStateGetCharmManifestCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetCharmManifestCall) Return(arg0 charm0.Manifest, arg1 error) *MockStateGetCharmManifestCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetCharmManifestCall) Do(f func(context.Context, charm.ID) (charm0.Manifest, error)) *MockStateGetCharmManifestCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetCharmManifestCall) DoAndReturn(f func(context.Context, charm.ID) (charm0.Manifest, error)) *MockStateGetCharmManifestCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmMetadata mocks base method.
func (m *MockState) GetCharmMetadata(arg0 context.Context, arg1 charm.ID) (charm0.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmMetadata", arg0, arg1)
	ret0, _ := ret[0].(charm0.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmMetadata indicates an expected call of GetCharmMetadata.
func (mr *MockStateMockRecorder) GetCharmMetadata(arg0, arg1 any) *MockStateGetCharmMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmMetadata", reflect.TypeOf((*MockState)(nil).GetCharmMetadata), arg0, arg1)
	return &MockStateGetCharmMetadataCall{Call: call}
}

// MockStateGetCharmMetadataCall wrap *gomock.Call
type MockStateGetCharmMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetCharmMetadataCall) Return(arg0 charm0.Metadata, arg1 error) *MockStateGetCharmMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetCharmMetadataCall) Do(f func(context.Context, charm.ID) (charm0.Metadata, error)) *MockStateGetCharmMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetCharmMetadataCall) DoAndReturn(f func(context.Context, charm.ID) (charm0.Metadata, error)) *MockStateGetCharmMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmMetadataDescription mocks base method.
func (m *MockState) GetCharmMetadataDescription(arg0 context.Context, arg1 charm.ID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmMetadataDescription", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmMetadataDescription indicates an expected call of GetCharmMetadataDescription.
func (mr *MockStateMockRecorder) GetCharmMetadataDescription(arg0, arg1 any) *MockStateGetCharmMetadataDescriptionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmMetadataDescription", reflect.TypeOf((*MockState)(nil).GetCharmMetadataDescription), arg0, arg1)
	return &MockStateGetCharmMetadataDescriptionCall{Call: call}
}

// MockStateGetCharmMetadataDescriptionCall wrap *gomock.Call
type MockStateGetCharmMetadataDescriptionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetCharmMetadataDescriptionCall) Return(arg0 string, arg1 error) *MockStateGetCharmMetadataDescriptionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetCharmMetadataDescriptionCall) Do(f func(context.Context, charm.ID) (string, error)) *MockStateGetCharmMetadataDescriptionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetCharmMetadataDescriptionCall) DoAndReturn(f func(context.Context, charm.ID) (string, error)) *MockStateGetCharmMetadataDescriptionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmMetadataName mocks base method.
func (m *MockState) GetCharmMetadataName(arg0 context.Context, arg1 charm.ID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmMetadataName", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmMetadataName indicates an expected call of GetCharmMetadataName.
func (mr *MockStateMockRecorder) GetCharmMetadataName(arg0, arg1 any) *MockStateGetCharmMetadataNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmMetadataName", reflect.TypeOf((*MockState)(nil).GetCharmMetadataName), arg0, arg1)
	return &MockStateGetCharmMetadataNameCall{Call: call}
}

// MockStateGetCharmMetadataNameCall wrap *gomock.Call
type MockStateGetCharmMetadataNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetCharmMetadataNameCall) Return(arg0 string, arg1 error) *MockStateGetCharmMetadataNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetCharmMetadataNameCall) Do(f func(context.Context, charm.ID) (string, error)) *MockStateGetCharmMetadataNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetCharmMetadataNameCall) DoAndReturn(f func(context.Context, charm.ID) (string, error)) *MockStateGetCharmMetadataNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmModifiedVersion mocks base method.
func (m *MockState) GetCharmModifiedVersion(arg0 context.Context, arg1 application.ID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmModifiedVersion", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmModifiedVersion indicates an expected call of GetCharmModifiedVersion.
func (mr *MockStateMockRecorder) GetCharmModifiedVersion(arg0, arg1 any) *MockStateGetCharmModifiedVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmModifiedVersion", reflect.TypeOf((*MockState)(nil).GetCharmModifiedVersion), arg0, arg1)
	return &MockStateGetCharmModifiedVersionCall{Call: call}
}

// MockStateGetCharmModifiedVersionCall wrap *gomock.Call
type MockStateGetCharmModifiedVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetCharmModifiedVersionCall) Return(arg0 int, arg1 error) *MockStateGetCharmModifiedVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetCharmModifiedVersionCall) Do(f func(context.Context, application.ID) (int, error)) *MockStateGetCharmModifiedVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetCharmModifiedVersionCall) DoAndReturn(f func(context.Context, application.ID) (int, error)) *MockStateGetCharmModifiedVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetContainerImageMetadata mocks base method.
func (m *MockState) GetContainerImageMetadata(arg0 context.Context, arg1 string) (application0.ContainerImageMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainerImageMetadata", arg0, arg1)
	ret0, _ := ret[0].(application0.ContainerImageMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainerImageMetadata indicates an expected call of GetContainerImageMetadata.
func (mr *MockStateMockRecorder) GetContainerImageMetadata(arg0, arg1 any) *MockStateGetContainerImageMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainerImageMetadata", reflect.TypeOf((*MockState)(nil).GetContainerImageMetadata), arg0, arg1)
	return &MockStateGetContainerImageMetadataCall{Call: call}
}

// MockStateGetContainerImageMetadataCall wrap *gomock.Call
type MockStateGetContainerImageMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetContainerImageMetadataCall) Return(arg0 application0.ContainerImageMetadata, arg1 error) *MockStateGetContainerImageMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetContainerImageMetadataCall) Do(f func(context.Context, string) (application0.ContainerImageMetadata, error)) *MockStateGetContainerImageMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetContainerImageMetadataCall) DoAndReturn(f func(context.Context, string) (application0.ContainerImageMetadata, error)) *MockStateGetContainerImageMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelType mocks base method.
func (m *MockState) GetModelType(arg0 context.Context) (model.ModelType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelType", arg0)
	ret0, _ := ret[0].(model.ModelType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelType indicates an expected call of GetModelType.
func (mr *MockStateMockRecorder) GetModelType(arg0 any) *MockStateGetModelTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelType", reflect.TypeOf((*MockState)(nil).GetModelType), arg0)
	return &MockStateGetModelTypeCall{Call: call}
}

// MockStateGetModelTypeCall wrap *gomock.Call
type MockStateGetModelTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelTypeCall) Return(arg0 model.ModelType, arg1 error) *MockStateGetModelTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelTypeCall) Do(f func(context.Context) (model.ModelType, error)) *MockStateGetModelTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelTypeCall) DoAndReturn(f func(context.Context) (model.ModelType, error)) *MockStateGetModelTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetResource mocks base method.
func (m *MockState) GetResource(arg0 context.Context, arg1 resource.UUID) (resource0.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResource", arg0, arg1)
	ret0, _ := ret[0].(resource0.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResource indicates an expected call of GetResource.
func (mr *MockStateMockRecorder) GetResource(arg0, arg1 any) *MockStateGetResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResource", reflect.TypeOf((*MockState)(nil).GetResource), arg0, arg1)
	return &MockStateGetResourceCall{Call: call}
}

// MockStateGetResourceCall wrap *gomock.Call
type MockStateGetResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetResourceCall) Return(arg0 resource0.Resource, arg1 error) *MockStateGetResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetResourceCall) Do(f func(context.Context, resource.UUID) (resource0.Resource, error)) *MockStateGetResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetResourceCall) DoAndReturn(f func(context.Context, resource.UUID) (resource0.Resource, error)) *MockStateGetResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecretsForApplication mocks base method.
func (m *MockState) GetSecretsForApplication(arg0 domain.AtomicContext, arg1 string) ([]*secrets.URI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretsForApplication", arg0, arg1)
	ret0, _ := ret[0].([]*secrets.URI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretsForApplication indicates an expected call of GetSecretsForApplication.
func (mr *MockStateMockRecorder) GetSecretsForApplication(arg0, arg1 any) *MockStateGetSecretsForApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretsForApplication", reflect.TypeOf((*MockState)(nil).GetSecretsForApplication), arg0, arg1)
	return &MockStateGetSecretsForApplicationCall{Call: call}
}

// MockStateGetSecretsForApplicationCall wrap *gomock.Call
type MockStateGetSecretsForApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetSecretsForApplicationCall) Return(arg0 []*secrets.URI, arg1 error) *MockStateGetSecretsForApplicationCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetSecretsForApplicationCall) Do(f func(domain.AtomicContext, string) ([]*secrets.URI, error)) *MockStateGetSecretsForApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetSecretsForApplicationCall) DoAndReturn(f func(domain.AtomicContext, string) ([]*secrets.URI, error)) *MockStateGetSecretsForApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetSecretsForUnit mocks base method.
func (m *MockState) GetSecretsForUnit(arg0 domain.AtomicContext, arg1 unit.Name) ([]*secrets.URI, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretsForUnit", arg0, arg1)
	ret0, _ := ret[0].([]*secrets.URI)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretsForUnit indicates an expected call of GetSecretsForUnit.
func (mr *MockStateMockRecorder) GetSecretsForUnit(arg0, arg1 any) *MockStateGetSecretsForUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretsForUnit", reflect.TypeOf((*MockState)(nil).GetSecretsForUnit), arg0, arg1)
	return &MockStateGetSecretsForUnitCall{Call: call}
}

// MockStateGetSecretsForUnitCall wrap *gomock.Call
type MockStateGetSecretsForUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetSecretsForUnitCall) Return(arg0 []*secrets.URI, arg1 error) *MockStateGetSecretsForUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetSecretsForUnitCall) Do(f func(domain.AtomicContext, unit.Name) ([]*secrets.URI, error)) *MockStateGetSecretsForUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetSecretsForUnitCall) DoAndReturn(f func(domain.AtomicContext, unit.Name) ([]*secrets.URI, error)) *MockStateGetSecretsForUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolByName mocks base method.
func (m *MockState) GetStoragePoolByName(arg0 context.Context, arg1 string) (storage.StoragePoolDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolByName", arg0, arg1)
	ret0, _ := ret[0].(storage.StoragePoolDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolByName indicates an expected call of GetStoragePoolByName.
func (mr *MockStateMockRecorder) GetStoragePoolByName(arg0, arg1 any) *MockStateGetStoragePoolByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolByName", reflect.TypeOf((*MockState)(nil).GetStoragePoolByName), arg0, arg1)
	return &MockStateGetStoragePoolByNameCall{Call: call}
}

// MockStateGetStoragePoolByNameCall wrap *gomock.Call
type MockStateGetStoragePoolByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetStoragePoolByNameCall) Return(arg0 storage.StoragePoolDetails, arg1 error) *MockStateGetStoragePoolByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetStoragePoolByNameCall) Do(f func(context.Context, string) (storage.StoragePoolDetails, error)) *MockStateGetStoragePoolByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetStoragePoolByNameCall) DoAndReturn(f func(context.Context, string) (storage.StoragePoolDetails, error)) *MockStateGetStoragePoolByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitLife mocks base method.
func (m *MockState) GetUnitLife(arg0 domain.AtomicContext, arg1 unit.Name) (life.Life, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitLife", arg0, arg1)
	ret0, _ := ret[0].(life.Life)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitLife indicates an expected call of GetUnitLife.
func (mr *MockStateMockRecorder) GetUnitLife(arg0, arg1 any) *MockStateGetUnitLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitLife", reflect.TypeOf((*MockState)(nil).GetUnitLife), arg0, arg1)
	return &MockStateGetUnitLifeCall{Call: call}
}

// MockStateGetUnitLifeCall wrap *gomock.Call
type MockStateGetUnitLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitLifeCall) Return(arg0 life.Life, arg1 error) *MockStateGetUnitLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitLifeCall) Do(f func(domain.AtomicContext, unit.Name) (life.Life, error)) *MockStateGetUnitLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitLifeCall) DoAndReturn(f func(domain.AtomicContext, unit.Name) (life.Life, error)) *MockStateGetUnitLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitNames mocks base method.
func (m *MockState) GetUnitNames(arg0 context.Context, arg1 []unit.UUID) ([]unit.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitNames", arg0, arg1)
	ret0, _ := ret[0].([]unit.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitNames indicates an expected call of GetUnitNames.
func (mr *MockStateMockRecorder) GetUnitNames(arg0, arg1 any) *MockStateGetUnitNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitNames", reflect.TypeOf((*MockState)(nil).GetUnitNames), arg0, arg1)
	return &MockStateGetUnitNamesCall{Call: call}
}

// MockStateGetUnitNamesCall wrap *gomock.Call
type MockStateGetUnitNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitNamesCall) Return(arg0 []unit.Name, arg1 error) *MockStateGetUnitNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitNamesCall) Do(f func(context.Context, []unit.UUID) ([]unit.Name, error)) *MockStateGetUnitNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitNamesCall) DoAndReturn(f func(context.Context, []unit.UUID) ([]unit.Name, error)) *MockStateGetUnitNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUID mocks base method.
func (m *MockState) GetUnitUUID(arg0 domain.AtomicContext, arg1 unit.Name) (unit.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUID", arg0, arg1)
	ret0, _ := ret[0].(unit.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUID indicates an expected call of GetUnitUUID.
func (mr *MockStateMockRecorder) GetUnitUUID(arg0, arg1 any) *MockStateGetUnitUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUID", reflect.TypeOf((*MockState)(nil).GetUnitUUID), arg0, arg1)
	return &MockStateGetUnitUUIDCall{Call: call}
}

// MockStateGetUnitUUIDCall wrap *gomock.Call
type MockStateGetUnitUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitUUIDCall) Return(arg0 unit.UUID, arg1 error) *MockStateGetUnitUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitUUIDCall) Do(f func(domain.AtomicContext, unit.Name) (unit.UUID, error)) *MockStateGetUnitUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitUUIDCall) DoAndReturn(f func(domain.AtomicContext, unit.Name) (unit.UUID, error)) *MockStateGetUnitUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUIDs mocks base method.
func (m *MockState) GetUnitUUIDs(arg0 context.Context, arg1 []unit.Name) ([]unit.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUIDs", arg0, arg1)
	ret0, _ := ret[0].([]unit.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUIDs indicates an expected call of GetUnitUUIDs.
func (mr *MockStateMockRecorder) GetUnitUUIDs(arg0, arg1 any) *MockStateGetUnitUUIDsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUIDs", reflect.TypeOf((*MockState)(nil).GetUnitUUIDs), arg0, arg1)
	return &MockStateGetUnitUUIDsCall{Call: call}
}

// MockStateGetUnitUUIDsCall wrap *gomock.Call
type MockStateGetUnitUUIDsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitUUIDsCall) Return(arg0 []unit.UUID, arg1 error) *MockStateGetUnitUUIDsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitUUIDsCall) Do(f func(context.Context, []unit.Name) ([]unit.UUID, error)) *MockStateGetUnitUUIDsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitUUIDsCall) DoAndReturn(f func(context.Context, []unit.Name) ([]unit.UUID, error)) *MockStateGetUnitUUIDsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementApplicationsWithPendingCharms mocks base method.
func (m *MockState) InitialWatchStatementApplicationsWithPendingCharms() (string, eventsource.NamespaceQuery) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementApplicationsWithPendingCharms")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.NamespaceQuery)
	return ret0, ret1
}

// InitialWatchStatementApplicationsWithPendingCharms indicates an expected call of InitialWatchStatementApplicationsWithPendingCharms.
func (mr *MockStateMockRecorder) InitialWatchStatementApplicationsWithPendingCharms() *MockStateInitialWatchStatementApplicationsWithPendingCharmsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementApplicationsWithPendingCharms", reflect.TypeOf((*MockState)(nil).InitialWatchStatementApplicationsWithPendingCharms))
	return &MockStateInitialWatchStatementApplicationsWithPendingCharmsCall{Call: call}
}

// MockStateInitialWatchStatementApplicationsWithPendingCharmsCall wrap *gomock.Call
type MockStateInitialWatchStatementApplicationsWithPendingCharmsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementApplicationsWithPendingCharmsCall) Return(arg0 string, arg1 eventsource.NamespaceQuery) *MockStateInitialWatchStatementApplicationsWithPendingCharmsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementApplicationsWithPendingCharmsCall) Do(f func() (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementApplicationsWithPendingCharmsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementApplicationsWithPendingCharmsCall) DoAndReturn(f func() (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementApplicationsWithPendingCharmsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InitialWatchStatementUnitLife mocks base method.
func (m *MockState) InitialWatchStatementUnitLife(arg0 string) (string, eventsource.NamespaceQuery) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitialWatchStatementUnitLife", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(eventsource.NamespaceQuery)
	return ret0, ret1
}

// InitialWatchStatementUnitLife indicates an expected call of InitialWatchStatementUnitLife.
func (mr *MockStateMockRecorder) InitialWatchStatementUnitLife(arg0 any) *MockStateInitialWatchStatementUnitLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitialWatchStatementUnitLife", reflect.TypeOf((*MockState)(nil).InitialWatchStatementUnitLife), arg0)
	return &MockStateInitialWatchStatementUnitLifeCall{Call: call}
}

// MockStateInitialWatchStatementUnitLifeCall wrap *gomock.Call
type MockStateInitialWatchStatementUnitLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInitialWatchStatementUnitLifeCall) Return(arg0 string, arg1 eventsource.NamespaceQuery) *MockStateInitialWatchStatementUnitLifeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInitialWatchStatementUnitLifeCall) Do(f func(string) (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementUnitLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInitialWatchStatementUnitLifeCall) DoAndReturn(f func(string) (string, eventsource.NamespaceQuery)) *MockStateInitialWatchStatementUnitLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// InsertUnit mocks base method.
func (m *MockState) InsertUnit(arg0 domain.AtomicContext, arg1 application.ID, arg2 application0.InsertUnitArg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertUnit indicates an expected call of InsertUnit.
func (mr *MockStateMockRecorder) InsertUnit(arg0, arg1, arg2 any) *MockStateInsertUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertUnit", reflect.TypeOf((*MockState)(nil).InsertUnit), arg0, arg1, arg2)
	return &MockStateInsertUnitCall{Call: call}
}

// MockStateInsertUnitCall wrap *gomock.Call
type MockStateInsertUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateInsertUnitCall) Return(arg0 error) *MockStateInsertUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateInsertUnitCall) Do(f func(domain.AtomicContext, application.ID, application0.InsertUnitArg) error) *MockStateInsertUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateInsertUnitCall) DoAndReturn(f func(domain.AtomicContext, application.ID, application0.InsertUnitArg) error) *MockStateInsertUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsCharmAvailable mocks base method.
func (m *MockState) IsCharmAvailable(arg0 context.Context, arg1 charm.ID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCharmAvailable", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCharmAvailable indicates an expected call of IsCharmAvailable.
func (mr *MockStateMockRecorder) IsCharmAvailable(arg0, arg1 any) *MockStateIsCharmAvailableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCharmAvailable", reflect.TypeOf((*MockState)(nil).IsCharmAvailable), arg0, arg1)
	return &MockStateIsCharmAvailableCall{Call: call}
}

// MockStateIsCharmAvailableCall wrap *gomock.Call
type MockStateIsCharmAvailableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateIsCharmAvailableCall) Return(arg0 bool, arg1 error) *MockStateIsCharmAvailableCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateIsCharmAvailableCall) Do(f func(context.Context, charm.ID) (bool, error)) *MockStateIsCharmAvailableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateIsCharmAvailableCall) DoAndReturn(f func(context.Context, charm.ID) (bool, error)) *MockStateIsCharmAvailableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsControllerCharm mocks base method.
func (m *MockState) IsControllerCharm(arg0 context.Context, arg1 charm.ID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsControllerCharm", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsControllerCharm indicates an expected call of IsControllerCharm.
func (mr *MockStateMockRecorder) IsControllerCharm(arg0, arg1 any) *MockStateIsControllerCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsControllerCharm", reflect.TypeOf((*MockState)(nil).IsControllerCharm), arg0, arg1)
	return &MockStateIsControllerCharmCall{Call: call}
}

// MockStateIsControllerCharmCall wrap *gomock.Call
type MockStateIsControllerCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateIsControllerCharmCall) Return(arg0 bool, arg1 error) *MockStateIsControllerCharmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateIsControllerCharmCall) Do(f func(context.Context, charm.ID) (bool, error)) *MockStateIsControllerCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateIsControllerCharmCall) DoAndReturn(f func(context.Context, charm.ID) (bool, error)) *MockStateIsControllerCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// IsSubordinateCharm mocks base method.
func (m *MockState) IsSubordinateCharm(arg0 context.Context, arg1 charm.ID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsSubordinateCharm", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsSubordinateCharm indicates an expected call of IsSubordinateCharm.
func (mr *MockStateMockRecorder) IsSubordinateCharm(arg0, arg1 any) *MockStateIsSubordinateCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsSubordinateCharm", reflect.TypeOf((*MockState)(nil).IsSubordinateCharm), arg0, arg1)
	return &MockStateIsSubordinateCharmCall{Call: call}
}

// MockStateIsSubordinateCharmCall wrap *gomock.Call
type MockStateIsSubordinateCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateIsSubordinateCharmCall) Return(arg0 bool, arg1 error) *MockStateIsSubordinateCharmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateIsSubordinateCharmCall) Do(f func(context.Context, charm.ID) (bool, error)) *MockStateIsSubordinateCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateIsSubordinateCharmCall) DoAndReturn(f func(context.Context, charm.ID) (bool, error)) *MockStateIsSubordinateCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListCharmLocators mocks base method.
func (m *MockState) ListCharmLocators(arg0 context.Context) ([]charm0.CharmLocator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCharmLocators", arg0)
	ret0, _ := ret[0].([]charm0.CharmLocator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCharmLocators indicates an expected call of ListCharmLocators.
func (mr *MockStateMockRecorder) ListCharmLocators(arg0 any) *MockStateListCharmLocatorsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCharmLocators", reflect.TypeOf((*MockState)(nil).ListCharmLocators), arg0)
	return &MockStateListCharmLocatorsCall{Call: call}
}

// MockStateListCharmLocatorsCall wrap *gomock.Call
type MockStateListCharmLocatorsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListCharmLocatorsCall) Return(arg0 []charm0.CharmLocator, arg1 error) *MockStateListCharmLocatorsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListCharmLocatorsCall) Do(f func(context.Context) ([]charm0.CharmLocator, error)) *MockStateListCharmLocatorsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListCharmLocatorsCall) DoAndReturn(f func(context.Context) ([]charm0.CharmLocator, error)) *MockStateListCharmLocatorsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListCharmLocatorsByNames mocks base method.
func (m *MockState) ListCharmLocatorsByNames(arg0 context.Context, arg1 []string) ([]charm0.CharmLocator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCharmLocatorsByNames", arg0, arg1)
	ret0, _ := ret[0].([]charm0.CharmLocator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCharmLocatorsByNames indicates an expected call of ListCharmLocatorsByNames.
func (mr *MockStateMockRecorder) ListCharmLocatorsByNames(arg0, arg1 any) *MockStateListCharmLocatorsByNamesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCharmLocatorsByNames", reflect.TypeOf((*MockState)(nil).ListCharmLocatorsByNames), arg0, arg1)
	return &MockStateListCharmLocatorsByNamesCall{Call: call}
}

// MockStateListCharmLocatorsByNamesCall wrap *gomock.Call
type MockStateListCharmLocatorsByNamesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListCharmLocatorsByNamesCall) Return(arg0 []charm0.CharmLocator, arg1 error) *MockStateListCharmLocatorsByNamesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListCharmLocatorsByNamesCall) Do(f func(context.Context, []string) ([]charm0.CharmLocator, error)) *MockStateListCharmLocatorsByNamesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListCharmLocatorsByNamesCall) DoAndReturn(f func(context.Context, []string) ([]charm0.CharmLocator, error)) *MockStateListCharmLocatorsByNamesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListResources mocks base method.
func (m *MockState) ListResources(arg0 context.Context, arg1 application.ID) (resource0.ApplicationResources, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListResources", arg0, arg1)
	ret0, _ := ret[0].(resource0.ApplicationResources)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListResources indicates an expected call of ListResources.
func (mr *MockStateMockRecorder) ListResources(arg0, arg1 any) *MockStateListResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListResources", reflect.TypeOf((*MockState)(nil).ListResources), arg0, arg1)
	return &MockStateListResourcesCall{Call: call}
}

// MockStateListResourcesCall wrap *gomock.Call
type MockStateListResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateListResourcesCall) Return(arg0 resource0.ApplicationResources, arg1 error) *MockStateListResourcesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateListResourcesCall) Do(f func(context.Context, application.ID) (resource0.ApplicationResources, error)) *MockStateListResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateListResourcesCall) DoAndReturn(f func(context.Context, application.ID) (resource0.ApplicationResources, error)) *MockStateListResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenApplicationResource mocks base method.
func (m *MockState) OpenApplicationResource(arg0 context.Context, arg1 resource.UUID) (resource0.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenApplicationResource", arg0, arg1)
	ret0, _ := ret[0].(resource0.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenApplicationResource indicates an expected call of OpenApplicationResource.
func (mr *MockStateMockRecorder) OpenApplicationResource(arg0, arg1 any) *MockStateOpenApplicationResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenApplicationResource", reflect.TypeOf((*MockState)(nil).OpenApplicationResource), arg0, arg1)
	return &MockStateOpenApplicationResourceCall{Call: call}
}

// MockStateOpenApplicationResourceCall wrap *gomock.Call
type MockStateOpenApplicationResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateOpenApplicationResourceCall) Return(arg0 resource0.Resource, arg1 error) *MockStateOpenApplicationResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateOpenApplicationResourceCall) Do(f func(context.Context, resource.UUID) (resource0.Resource, error)) *MockStateOpenApplicationResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateOpenApplicationResourceCall) DoAndReturn(f func(context.Context, resource.UUID) (resource0.Resource, error)) *MockStateOpenApplicationResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// OpenUnitResource mocks base method.
func (m *MockState) OpenUnitResource(arg0 context.Context, arg1 resource.UUID, arg2 unit.UUID) (resource0.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenUnitResource", arg0, arg1, arg2)
	ret0, _ := ret[0].(resource0.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenUnitResource indicates an expected call of OpenUnitResource.
func (mr *MockStateMockRecorder) OpenUnitResource(arg0, arg1, arg2 any) *MockStateOpenUnitResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenUnitResource", reflect.TypeOf((*MockState)(nil).OpenUnitResource), arg0, arg1, arg2)
	return &MockStateOpenUnitResourceCall{Call: call}
}

// MockStateOpenUnitResourceCall wrap *gomock.Call
type MockStateOpenUnitResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateOpenUnitResourceCall) Return(arg0 resource0.Resource, arg1 error) *MockStateOpenUnitResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateOpenUnitResourceCall) Do(f func(context.Context, resource.UUID, unit.UUID) (resource0.Resource, error)) *MockStateOpenUnitResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateOpenUnitResourceCall) DoAndReturn(f func(context.Context, resource.UUID, unit.UUID) (resource0.Resource, error)) *MockStateOpenUnitResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// PutContainerImageMetadata mocks base method.
func (m *MockState) PutContainerImageMetadata(arg0 context.Context, arg1, arg2, arg3, arg4 string) (resource0.ResourceStorageUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutContainerImageMetadata", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(resource0.ResourceStorageUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutContainerImageMetadata indicates an expected call of PutContainerImageMetadata.
func (mr *MockStateMockRecorder) PutContainerImageMetadata(arg0, arg1, arg2, arg3, arg4 any) *MockStatePutContainerImageMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutContainerImageMetadata", reflect.TypeOf((*MockState)(nil).PutContainerImageMetadata), arg0, arg1, arg2, arg3, arg4)
	return &MockStatePutContainerImageMetadataCall{Call: call}
}

// MockStatePutContainerImageMetadataCall wrap *gomock.Call
type MockStatePutContainerImageMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStatePutContainerImageMetadataCall) Return(arg0 resource0.ResourceStorageUUID, arg1 error) *MockStatePutContainerImageMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStatePutContainerImageMetadataCall) Do(f func(context.Context, string, string, string, string) (resource0.ResourceStorageUUID, error)) *MockStatePutContainerImageMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStatePutContainerImageMetadataCall) DoAndReturn(f func(context.Context, string, string, string, string) (resource0.ResourceStorageUUID, error)) *MockStatePutContainerImageMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveContainerImageMetadata mocks base method.
func (m *MockState) RemoveContainerImageMetadata(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveContainerImageMetadata", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveContainerImageMetadata indicates an expected call of RemoveContainerImageMetadata.
func (mr *MockStateMockRecorder) RemoveContainerImageMetadata(arg0, arg1 any) *MockStateRemoveContainerImageMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveContainerImageMetadata", reflect.TypeOf((*MockState)(nil).RemoveContainerImageMetadata), arg0, arg1)
	return &MockStateRemoveContainerImageMetadataCall{Call: call}
}

// MockStateRemoveContainerImageMetadataCall wrap *gomock.Call
type MockStateRemoveContainerImageMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateRemoveContainerImageMetadataCall) Return(arg0 error) *MockStateRemoveContainerImageMetadataCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateRemoveContainerImageMetadataCall) Do(f func(context.Context, string) error) *MockStateRemoveContainerImageMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateRemoveContainerImageMetadataCall) DoAndReturn(f func(context.Context, string) error) *MockStateRemoveContainerImageMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RunAtomic mocks base method.
func (m *MockState) RunAtomic(arg0 context.Context, arg1 func(domain.AtomicContext) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RunAtomic", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RunAtomic indicates an expected call of RunAtomic.
func (mr *MockStateMockRecorder) RunAtomic(arg0, arg1 any) *MockStateRunAtomicCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RunAtomic", reflect.TypeOf((*MockState)(nil).RunAtomic), arg0, arg1)
	return &MockStateRunAtomicCall{Call: call}
}

// MockStateRunAtomicCall wrap *gomock.Call
type MockStateRunAtomicCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateRunAtomicCall) Return(arg0 error) *MockStateRunAtomicCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateRunAtomicCall) Do(f func(context.Context, func(domain.AtomicContext) error) error) *MockStateRunAtomicCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateRunAtomicCall) DoAndReturn(f func(context.Context, func(domain.AtomicContext) error) error) *MockStateRunAtomicCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetApplicationLife mocks base method.
func (m *MockState) SetApplicationLife(arg0 domain.AtomicContext, arg1 application.ID, arg2 life.Life) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetApplicationLife", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetApplicationLife indicates an expected call of SetApplicationLife.
func (mr *MockStateMockRecorder) SetApplicationLife(arg0, arg1, arg2 any) *MockStateSetApplicationLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplicationLife", reflect.TypeOf((*MockState)(nil).SetApplicationLife), arg0, arg1, arg2)
	return &MockStateSetApplicationLifeCall{Call: call}
}

// MockStateSetApplicationLifeCall wrap *gomock.Call
type MockStateSetApplicationLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetApplicationLifeCall) Return(arg0 error) *MockStateSetApplicationLifeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetApplicationLifeCall) Do(f func(domain.AtomicContext, application.ID, life.Life) error) *MockStateSetApplicationLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetApplicationLifeCall) DoAndReturn(f func(domain.AtomicContext, application.ID, life.Life) error) *MockStateSetApplicationLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetApplicationScalingState mocks base method.
func (m *MockState) SetApplicationScalingState(arg0 domain.AtomicContext, arg1 application.ID, arg2 *int, arg3 int, arg4 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetApplicationScalingState", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetApplicationScalingState indicates an expected call of SetApplicationScalingState.
func (mr *MockStateMockRecorder) SetApplicationScalingState(arg0, arg1, arg2, arg3, arg4 any) *MockStateSetApplicationScalingStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetApplicationScalingState", reflect.TypeOf((*MockState)(nil).SetApplicationScalingState), arg0, arg1, arg2, arg3, arg4)
	return &MockStateSetApplicationScalingStateCall{Call: call}
}

// MockStateSetApplicationScalingStateCall wrap *gomock.Call
type MockStateSetApplicationScalingStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetApplicationScalingStateCall) Return(arg0 error) *MockStateSetApplicationScalingStateCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetApplicationScalingStateCall) Do(f func(domain.AtomicContext, application.ID, *int, int, bool) error) *MockStateSetApplicationScalingStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetApplicationScalingStateCall) DoAndReturn(f func(domain.AtomicContext, application.ID, *int, int, bool) error) *MockStateSetApplicationScalingStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCharm mocks base method.
func (m *MockState) SetCharm(arg0 context.Context, arg1 charm0.Charm, arg2 *charm0.DownloadInfo) (charm.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCharm", arg0, arg1, arg2)
	ret0, _ := ret[0].(charm.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetCharm indicates an expected call of SetCharm.
func (mr *MockStateMockRecorder) SetCharm(arg0, arg1, arg2 any) *MockStateSetCharmCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCharm", reflect.TypeOf((*MockState)(nil).SetCharm), arg0, arg1, arg2)
	return &MockStateSetCharmCall{Call: call}
}

// MockStateSetCharmCall wrap *gomock.Call
type MockStateSetCharmCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetCharmCall) Return(arg0 charm.ID, arg1 error) *MockStateSetCharmCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetCharmCall) Do(f func(context.Context, charm0.Charm, *charm0.DownloadInfo) (charm.ID, error)) *MockStateSetCharmCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetCharmCall) DoAndReturn(f func(context.Context, charm0.Charm, *charm0.DownloadInfo) (charm.ID, error)) *MockStateSetCharmCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCharmAvailable mocks base method.
func (m *MockState) SetCharmAvailable(arg0 context.Context, arg1 charm.ID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCharmAvailable", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCharmAvailable indicates an expected call of SetCharmAvailable.
func (mr *MockStateMockRecorder) SetCharmAvailable(arg0, arg1 any) *MockStateSetCharmAvailableCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCharmAvailable", reflect.TypeOf((*MockState)(nil).SetCharmAvailable), arg0, arg1)
	return &MockStateSetCharmAvailableCall{Call: call}
}

// MockStateSetCharmAvailableCall wrap *gomock.Call
type MockStateSetCharmAvailableCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetCharmAvailableCall) Return(arg0 error) *MockStateSetCharmAvailableCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetCharmAvailableCall) Do(f func(context.Context, charm.ID) error) *MockStateSetCharmAvailableCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetCharmAvailableCall) DoAndReturn(f func(context.Context, charm.ID) error) *MockStateSetCharmAvailableCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetCloudContainerStatus mocks base method.
func (m *MockState) SetCloudContainerStatus(arg0 domain.AtomicContext, arg1 unit.UUID, arg2 application0.CloudContainerStatusStatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCloudContainerStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCloudContainerStatus indicates an expected call of SetCloudContainerStatus.
func (mr *MockStateMockRecorder) SetCloudContainerStatus(arg0, arg1, arg2 any) *MockStateSetCloudContainerStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCloudContainerStatus", reflect.TypeOf((*MockState)(nil).SetCloudContainerStatus), arg0, arg1, arg2)
	return &MockStateSetCloudContainerStatusCall{Call: call}
}

// MockStateSetCloudContainerStatusCall wrap *gomock.Call
type MockStateSetCloudContainerStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetCloudContainerStatusCall) Return(arg0 error) *MockStateSetCloudContainerStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetCloudContainerStatusCall) Do(f func(domain.AtomicContext, unit.UUID, application0.CloudContainerStatusStatusInfo) error) *MockStateSetCloudContainerStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetCloudContainerStatusCall) DoAndReturn(f func(domain.AtomicContext, unit.UUID, application0.CloudContainerStatusStatusInfo) error) *MockStateSetCloudContainerStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetDesiredApplicationScale mocks base method.
func (m *MockState) SetDesiredApplicationScale(arg0 domain.AtomicContext, arg1 application.ID, arg2 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDesiredApplicationScale", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDesiredApplicationScale indicates an expected call of SetDesiredApplicationScale.
func (mr *MockStateMockRecorder) SetDesiredApplicationScale(arg0, arg1, arg2 any) *MockStateSetDesiredApplicationScaleCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDesiredApplicationScale", reflect.TypeOf((*MockState)(nil).SetDesiredApplicationScale), arg0, arg1, arg2)
	return &MockStateSetDesiredApplicationScaleCall{Call: call}
}

// MockStateSetDesiredApplicationScaleCall wrap *gomock.Call
type MockStateSetDesiredApplicationScaleCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetDesiredApplicationScaleCall) Return(arg0 error) *MockStateSetDesiredApplicationScaleCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetDesiredApplicationScaleCall) Do(f func(domain.AtomicContext, application.ID, int) error) *MockStateSetDesiredApplicationScaleCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetDesiredApplicationScaleCall) DoAndReturn(f func(domain.AtomicContext, application.ID, int) error) *MockStateSetDesiredApplicationScaleCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetRepositoryResources mocks base method.
func (m *MockState) SetRepositoryResources(arg0 context.Context, arg1 resource0.SetRepositoryResourcesArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetRepositoryResources", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetRepositoryResources indicates an expected call of SetRepositoryResources.
func (mr *MockStateMockRecorder) SetRepositoryResources(arg0, arg1 any) *MockStateSetRepositoryResourcesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRepositoryResources", reflect.TypeOf((*MockState)(nil).SetRepositoryResources), arg0, arg1)
	return &MockStateSetRepositoryResourcesCall{Call: call}
}

// MockStateSetRepositoryResourcesCall wrap *gomock.Call
type MockStateSetRepositoryResourcesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetRepositoryResourcesCall) Return(arg0 error) *MockStateSetRepositoryResourcesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetRepositoryResourcesCall) Do(f func(context.Context, resource0.SetRepositoryResourcesArgs) error) *MockStateSetRepositoryResourcesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetRepositoryResourcesCall) DoAndReturn(f func(context.Context, resource0.SetRepositoryResourcesArgs) error) *MockStateSetRepositoryResourcesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetResource mocks base method.
func (m *MockState) SetResource(arg0 context.Context, arg1 resource0.SetResourceArgs) (resource0.Resource, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetResource", arg0, arg1)
	ret0, _ := ret[0].(resource0.Resource)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetResource indicates an expected call of SetResource.
func (mr *MockStateMockRecorder) SetResource(arg0, arg1 any) *MockStateSetResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetResource", reflect.TypeOf((*MockState)(nil).SetResource), arg0, arg1)
	return &MockStateSetResourceCall{Call: call}
}

// MockStateSetResourceCall wrap *gomock.Call
type MockStateSetResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetResourceCall) Return(arg0 resource0.Resource, arg1 error) *MockStateSetResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetResourceCall) Do(f func(context.Context, resource0.SetResourceArgs) (resource0.Resource, error)) *MockStateSetResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetResourceCall) DoAndReturn(f func(context.Context, resource0.SetResourceArgs) (resource0.Resource, error)) *MockStateSetResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitAgentStatus mocks base method.
func (m *MockState) SetUnitAgentStatus(arg0 domain.AtomicContext, arg1 unit.UUID, arg2 application0.UnitAgentStatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitAgentStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitAgentStatus indicates an expected call of SetUnitAgentStatus.
func (mr *MockStateMockRecorder) SetUnitAgentStatus(arg0, arg1, arg2 any) *MockStateSetUnitAgentStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitAgentStatus", reflect.TypeOf((*MockState)(nil).SetUnitAgentStatus), arg0, arg1, arg2)
	return &MockStateSetUnitAgentStatusCall{Call: call}
}

// MockStateSetUnitAgentStatusCall wrap *gomock.Call
type MockStateSetUnitAgentStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetUnitAgentStatusCall) Return(arg0 error) *MockStateSetUnitAgentStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetUnitAgentStatusCall) Do(f func(domain.AtomicContext, unit.UUID, application0.UnitAgentStatusInfo) error) *MockStateSetUnitAgentStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetUnitAgentStatusCall) DoAndReturn(f func(domain.AtomicContext, unit.UUID, application0.UnitAgentStatusInfo) error) *MockStateSetUnitAgentStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitLife mocks base method.
func (m *MockState) SetUnitLife(arg0 domain.AtomicContext, arg1 unit.Name, arg2 life.Life) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitLife", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitLife indicates an expected call of SetUnitLife.
func (mr *MockStateMockRecorder) SetUnitLife(arg0, arg1, arg2 any) *MockStateSetUnitLifeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitLife", reflect.TypeOf((*MockState)(nil).SetUnitLife), arg0, arg1, arg2)
	return &MockStateSetUnitLifeCall{Call: call}
}

// MockStateSetUnitLifeCall wrap *gomock.Call
type MockStateSetUnitLifeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetUnitLifeCall) Return(arg0 error) *MockStateSetUnitLifeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetUnitLifeCall) Do(f func(domain.AtomicContext, unit.Name, life.Life) error) *MockStateSetUnitLifeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetUnitLifeCall) DoAndReturn(f func(domain.AtomicContext, unit.Name, life.Life) error) *MockStateSetUnitLifeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitPassword mocks base method.
func (m *MockState) SetUnitPassword(arg0 domain.AtomicContext, arg1 unit.UUID, arg2 application0.PasswordInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitPassword", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitPassword indicates an expected call of SetUnitPassword.
func (mr *MockStateMockRecorder) SetUnitPassword(arg0, arg1, arg2 any) *MockStateSetUnitPasswordCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitPassword", reflect.TypeOf((*MockState)(nil).SetUnitPassword), arg0, arg1, arg2)
	return &MockStateSetUnitPasswordCall{Call: call}
}

// MockStateSetUnitPasswordCall wrap *gomock.Call
type MockStateSetUnitPasswordCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetUnitPasswordCall) Return(arg0 error) *MockStateSetUnitPasswordCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetUnitPasswordCall) Do(f func(domain.AtomicContext, unit.UUID, application0.PasswordInfo) error) *MockStateSetUnitPasswordCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetUnitPasswordCall) DoAndReturn(f func(domain.AtomicContext, unit.UUID, application0.PasswordInfo) error) *MockStateSetUnitPasswordCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitResource mocks base method.
func (m *MockState) SetUnitResource(arg0 context.Context, arg1 resource0.SetUnitResourceArgs) (resource0.SetUnitResourceResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitResource", arg0, arg1)
	ret0, _ := ret[0].(resource0.SetUnitResourceResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetUnitResource indicates an expected call of SetUnitResource.
func (mr *MockStateMockRecorder) SetUnitResource(arg0, arg1 any) *MockStateSetUnitResourceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitResource", reflect.TypeOf((*MockState)(nil).SetUnitResource), arg0, arg1)
	return &MockStateSetUnitResourceCall{Call: call}
}

// MockStateSetUnitResourceCall wrap *gomock.Call
type MockStateSetUnitResourceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetUnitResourceCall) Return(arg0 resource0.SetUnitResourceResult, arg1 error) *MockStateSetUnitResourceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetUnitResourceCall) Do(f func(context.Context, resource0.SetUnitResourceArgs) (resource0.SetUnitResourceResult, error)) *MockStateSetUnitResourceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetUnitResourceCall) DoAndReturn(f func(context.Context, resource0.SetUnitResourceArgs) (resource0.SetUnitResourceResult, error)) *MockStateSetUnitResourceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitWorkloadStatus mocks base method.
func (m *MockState) SetUnitWorkloadStatus(arg0 domain.AtomicContext, arg1 unit.UUID, arg2 application0.UnitWorkloadStatusInfo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitWorkloadStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitWorkloadStatus indicates an expected call of SetUnitWorkloadStatus.
func (mr *MockStateMockRecorder) SetUnitWorkloadStatus(arg0, arg1, arg2 any) *MockStateSetUnitWorkloadStatusCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitWorkloadStatus", reflect.TypeOf((*MockState)(nil).SetUnitWorkloadStatus), arg0, arg1, arg2)
	return &MockStateSetUnitWorkloadStatusCall{Call: call}
}

// MockStateSetUnitWorkloadStatusCall wrap *gomock.Call
type MockStateSetUnitWorkloadStatusCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetUnitWorkloadStatusCall) Return(arg0 error) *MockStateSetUnitWorkloadStatusCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetUnitWorkloadStatusCall) Do(f func(domain.AtomicContext, unit.UUID, application0.UnitWorkloadStatusInfo) error) *MockStateSetUnitWorkloadStatusCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetUnitWorkloadStatusCall) DoAndReturn(f func(domain.AtomicContext, unit.UUID, application0.UnitWorkloadStatusInfo) error) *MockStateSetUnitWorkloadStatusCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// StorageDefaults mocks base method.
func (m *MockState) StorageDefaults(arg0 context.Context) (storage.StorageDefaults, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StorageDefaults", arg0)
	ret0, _ := ret[0].(storage.StorageDefaults)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StorageDefaults indicates an expected call of StorageDefaults.
func (mr *MockStateMockRecorder) StorageDefaults(arg0 any) *MockStateStorageDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StorageDefaults", reflect.TypeOf((*MockState)(nil).StorageDefaults), arg0)
	return &MockStateStorageDefaultsCall{Call: call}
}

// MockStateStorageDefaultsCall wrap *gomock.Call
type MockStateStorageDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateStorageDefaultsCall) Return(arg0 storage.StorageDefaults, arg1 error) *MockStateStorageDefaultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateStorageDefaultsCall) Do(f func(context.Context) (storage.StorageDefaults, error)) *MockStateStorageDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateStorageDefaultsCall) DoAndReturn(f func(context.Context) (storage.StorageDefaults, error)) *MockStateStorageDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SupportsContainers mocks base method.
func (m *MockState) SupportsContainers(arg0 context.Context, arg1 charm.ID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportsContainers", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportsContainers indicates an expected call of SupportsContainers.
func (mr *MockStateMockRecorder) SupportsContainers(arg0, arg1 any) *MockStateSupportsContainersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportsContainers", reflect.TypeOf((*MockState)(nil).SupportsContainers), arg0, arg1)
	return &MockStateSupportsContainersCall{Call: call}
}

// MockStateSupportsContainersCall wrap *gomock.Call
type MockStateSupportsContainersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSupportsContainersCall) Return(arg0 bool, arg1 error) *MockStateSupportsContainersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSupportsContainersCall) Do(f func(context.Context, charm.ID) (bool, error)) *MockStateSupportsContainersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSupportsContainersCall) DoAndReturn(f func(context.Context, charm.ID) (bool, error)) *MockStateSupportsContainersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateUnitContainer mocks base method.
func (m *MockState) UpdateUnitContainer(arg0 domain.AtomicContext, arg1 unit.Name, arg2 *application0.CloudContainer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUnitContainer", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUnitContainer indicates an expected call of UpdateUnitContainer.
func (mr *MockStateMockRecorder) UpdateUnitContainer(arg0, arg1, arg2 any) *MockStateUpdateUnitContainerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUnitContainer", reflect.TypeOf((*MockState)(nil).UpdateUnitContainer), arg0, arg1, arg2)
	return &MockStateUpdateUnitContainerCall{Call: call}
}

// MockStateUpdateUnitContainerCall wrap *gomock.Call
type MockStateUpdateUnitContainerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpdateUnitContainerCall) Return(arg0 error) *MockStateUpdateUnitContainerCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpdateUnitContainerCall) Do(f func(domain.AtomicContext, unit.Name, *application0.CloudContainer) error) *MockStateUpdateUnitContainerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpdateUnitContainerCall) DoAndReturn(f func(domain.AtomicContext, unit.Name, *application0.CloudContainer) error) *MockStateUpdateUnitContainerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpsertCloudService mocks base method.
func (m *MockState) UpsertCloudService(arg0 context.Context, arg1, arg2 string, arg3 network.SpaceAddresses) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertCloudService", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpsertCloudService indicates an expected call of UpsertCloudService.
func (mr *MockStateMockRecorder) UpsertCloudService(arg0, arg1, arg2, arg3 any) *MockStateUpsertCloudServiceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertCloudService", reflect.TypeOf((*MockState)(nil).UpsertCloudService), arg0, arg1, arg2, arg3)
	return &MockStateUpsertCloudServiceCall{Call: call}
}

// MockStateUpsertCloudServiceCall wrap *gomock.Call
type MockStateUpsertCloudServiceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpsertCloudServiceCall) Return(arg0 error) *MockStateUpsertCloudServiceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpsertCloudServiceCall) Do(f func(context.Context, string, string, network.SpaceAddresses) error) *MockStateUpsertCloudServiceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpsertCloudServiceCall) DoAndReturn(f func(context.Context, string, string, network.SpaceAddresses) error) *MockStateUpsertCloudServiceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockDeleteSecretState is a mock of DeleteSecretState interface.
type MockDeleteSecretState struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteSecretStateMockRecorder
}

// MockDeleteSecretStateMockRecorder is the mock recorder for MockDeleteSecretState.
type MockDeleteSecretStateMockRecorder struct {
	mock *MockDeleteSecretState
}

// NewMockDeleteSecretState creates a new mock instance.
func NewMockDeleteSecretState(ctrl *gomock.Controller) *MockDeleteSecretState {
	mock := &MockDeleteSecretState{ctrl: ctrl}
	mock.recorder = &MockDeleteSecretStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteSecretState) EXPECT() *MockDeleteSecretStateMockRecorder {
	return m.recorder
}

// DeleteSecret mocks base method.
func (m *MockDeleteSecretState) DeleteSecret(arg0 domain.AtomicContext, arg1 *secrets.URI, arg2 []int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSecret", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSecret indicates an expected call of DeleteSecret.
func (mr *MockDeleteSecretStateMockRecorder) DeleteSecret(arg0, arg1, arg2 any) *MockDeleteSecretStateDeleteSecretCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSecret", reflect.TypeOf((*MockDeleteSecretState)(nil).DeleteSecret), arg0, arg1, arg2)
	return &MockDeleteSecretStateDeleteSecretCall{Call: call}
}

// MockDeleteSecretStateDeleteSecretCall wrap *gomock.Call
type MockDeleteSecretStateDeleteSecretCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockDeleteSecretStateDeleteSecretCall) Return(arg0 error) *MockDeleteSecretStateDeleteSecretCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockDeleteSecretStateDeleteSecretCall) Do(f func(domain.AtomicContext, *secrets.URI, []int) error) *MockDeleteSecretStateDeleteSecretCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockDeleteSecretStateDeleteSecretCall) DoAndReturn(f func(domain.AtomicContext, *secrets.URI, []int) error) *MockDeleteSecretStateDeleteSecretCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockResourceStoreGetter is a mock of ResourceStoreGetter interface.
type MockResourceStoreGetter struct {
	ctrl     *gomock.Controller
	recorder *MockResourceStoreGetterMockRecorder
}

// MockResourceStoreGetterMockRecorder is the mock recorder for MockResourceStoreGetter.
type MockResourceStoreGetterMockRecorder struct {
	mock *MockResourceStoreGetter
}

// NewMockResourceStoreGetter creates a new mock instance.
func NewMockResourceStoreGetter(ctrl *gomock.Controller) *MockResourceStoreGetter {
	mock := &MockResourceStoreGetter{ctrl: ctrl}
	mock.recorder = &MockResourceStoreGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockResourceStoreGetter) EXPECT() *MockResourceStoreGetterMockRecorder {
	return m.recorder
}

// AddStore mocks base method.
func (m *MockResourceStoreGetter) AddStore(arg0 resource1.Type, arg1 resource0.ResourceStore) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddStore", arg0, arg1)
}

// AddStore indicates an expected call of AddStore.
func (mr *MockResourceStoreGetterMockRecorder) AddStore(arg0, arg1 any) *MockResourceStoreGetterAddStoreCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddStore", reflect.TypeOf((*MockResourceStoreGetter)(nil).AddStore), arg0, arg1)
	return &MockResourceStoreGetterAddStoreCall{Call: call}
}

// MockResourceStoreGetterAddStoreCall wrap *gomock.Call
type MockResourceStoreGetterAddStoreCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceStoreGetterAddStoreCall) Return() *MockResourceStoreGetterAddStoreCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceStoreGetterAddStoreCall) Do(f func(resource1.Type, resource0.ResourceStore)) *MockResourceStoreGetterAddStoreCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceStoreGetterAddStoreCall) DoAndReturn(f func(resource1.Type, resource0.ResourceStore)) *MockResourceStoreGetterAddStoreCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetResourceStore mocks base method.
func (m *MockResourceStoreGetter) GetResourceStore(arg0 context.Context, arg1 resource1.Type) (resource0.ResourceStore, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetResourceStore", arg0, arg1)
	ret0, _ := ret[0].(resource0.ResourceStore)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetResourceStore indicates an expected call of GetResourceStore.
func (mr *MockResourceStoreGetterMockRecorder) GetResourceStore(arg0, arg1 any) *MockResourceStoreGetterGetResourceStoreCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetResourceStore", reflect.TypeOf((*MockResourceStoreGetter)(nil).GetResourceStore), arg0, arg1)
	return &MockResourceStoreGetterGetResourceStoreCall{Call: call}
}

// MockResourceStoreGetterGetResourceStoreCall wrap *gomock.Call
type MockResourceStoreGetterGetResourceStoreCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockResourceStoreGetterGetResourceStoreCall) Return(arg0 resource0.ResourceStore, arg1 error) *MockResourceStoreGetterGetResourceStoreCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockResourceStoreGetterGetResourceStoreCall) Do(f func(context.Context, resource1.Type) (resource0.ResourceStore, error)) *MockResourceStoreGetterGetResourceStoreCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockResourceStoreGetterGetResourceStoreCall) DoAndReturn(f func(context.Context, resource1.Type) (resource0.ResourceStore, error)) *MockResourceStoreGetterGetResourceStoreCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockWatcherFactory is a mock of WatcherFactory interface.
type MockWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherFactoryMockRecorder
}

// MockWatcherFactoryMockRecorder is the mock recorder for MockWatcherFactory.
type MockWatcherFactoryMockRecorder struct {
	mock *MockWatcherFactory
}

// NewMockWatcherFactory creates a new mock instance.
func NewMockWatcherFactory(ctrl *gomock.Controller) *MockWatcherFactory {
	mock := &MockWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcherFactory) EXPECT() *MockWatcherFactoryMockRecorder {
	return m.recorder
}

// NewNamespaceMapperWatcher mocks base method.
func (m *MockWatcherFactory) NewNamespaceMapperWatcher(arg0 string, arg1 changestream.ChangeType, arg2 eventsource.NamespaceQuery, arg3 eventsource.Mapper) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewNamespaceMapperWatcher", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewNamespaceMapperWatcher indicates an expected call of NewNamespaceMapperWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewNamespaceMapperWatcher(arg0, arg1, arg2, arg3 any) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewNamespaceMapperWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewNamespaceMapperWatcher), arg0, arg1, arg2, arg3)
	return &MockWatcherFactoryNewNamespaceMapperWatcherCall{Call: call}
}

// MockWatcherFactoryNewNamespaceMapperWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewNamespaceMapperWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) Do(f func(string, changestream.ChangeType, eventsource.NamespaceQuery, eventsource.Mapper) (watcher.Watcher[[]string], error)) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewNamespaceMapperWatcherCall) DoAndReturn(f func(string, changestream.ChangeType, eventsource.NamespaceQuery, eventsource.Mapper) (watcher.Watcher[[]string], error)) *MockWatcherFactoryNewNamespaceMapperWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewUUIDsWatcher mocks base method.
func (m *MockWatcherFactory) NewUUIDsWatcher(arg0 string, arg1 changestream.ChangeType) (watcher.Watcher[[]string], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUUIDsWatcher", arg0, arg1)
	ret0, _ := ret[0].(watcher.Watcher[[]string])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewUUIDsWatcher indicates an expected call of NewUUIDsWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewUUIDsWatcher(arg0, arg1 any) *MockWatcherFactoryNewUUIDsWatcherCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUUIDsWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewUUIDsWatcher), arg0, arg1)
	return &MockWatcherFactoryNewUUIDsWatcherCall{Call: call}
}

// MockWatcherFactoryNewUUIDsWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewUUIDsWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewUUIDsWatcherCall) Return(arg0 watcher.Watcher[[]string], arg1 error) *MockWatcherFactoryNewUUIDsWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewUUIDsWatcherCall) Do(f func(string, changestream.ChangeType) (watcher.Watcher[[]string], error)) *MockWatcherFactoryNewUUIDsWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewUUIDsWatcherCall) DoAndReturn(f func(string, changestream.ChangeType) (watcher.Watcher[[]string], error)) *MockWatcherFactoryNewUUIDsWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NewValueMapperWatcher mocks base method.
func (m *MockWatcherFactory) NewValueMapperWatcher(arg0, arg1 string, arg2 changestream.ChangeType, arg3 eventsource.Mapper) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewValueMapperWatcher", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewValueMapperWatcher indicates an expected call of NewValueMapperWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewValueMapperWatcher(arg0, arg1, arg2, arg3 any) *MockWatcherFactoryNewValueMapperWatcherCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewValueMapperWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewValueMapperWatcher), arg0, arg1, arg2, arg3)
	return &MockWatcherFactoryNewValueMapperWatcherCall{Call: call}
}

// MockWatcherFactoryNewValueMapperWatcherCall wrap *gomock.Call
type MockWatcherFactoryNewValueMapperWatcherCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockWatcherFactoryNewValueMapperWatcherCall) Return(arg0 watcher.Watcher[struct{}], arg1 error) *MockWatcherFactoryNewValueMapperWatcherCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockWatcherFactoryNewValueMapperWatcherCall) Do(f func(string, string, changestream.ChangeType, eventsource.Mapper) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewValueMapperWatcherCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockWatcherFactoryNewValueMapperWatcherCall) DoAndReturn(f func(string, string, changestream.ChangeType, eventsource.Mapper) (watcher.Watcher[struct{}], error)) *MockWatcherFactoryNewValueMapperWatcherCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAgentVersionGetter is a mock of AgentVersionGetter interface.
type MockAgentVersionGetter struct {
	ctrl     *gomock.Controller
	recorder *MockAgentVersionGetterMockRecorder
}

// MockAgentVersionGetterMockRecorder is the mock recorder for MockAgentVersionGetter.
type MockAgentVersionGetterMockRecorder struct {
	mock *MockAgentVersionGetter
}

// NewMockAgentVersionGetter creates a new mock instance.
func NewMockAgentVersionGetter(ctrl *gomock.Controller) *MockAgentVersionGetter {
	mock := &MockAgentVersionGetter{ctrl: ctrl}
	mock.recorder = &MockAgentVersionGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentVersionGetter) EXPECT() *MockAgentVersionGetterMockRecorder {
	return m.recorder
}

// GetModelTargetAgentVersion mocks base method.
func (m *MockAgentVersionGetter) GetModelTargetAgentVersion(arg0 context.Context, arg1 model.UUID) (version.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelTargetAgentVersion", arg0, arg1)
	ret0, _ := ret[0].(version.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelTargetAgentVersion indicates an expected call of GetModelTargetAgentVersion.
func (mr *MockAgentVersionGetterMockRecorder) GetModelTargetAgentVersion(arg0, arg1 any) *MockAgentVersionGetterGetModelTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelTargetAgentVersion", reflect.TypeOf((*MockAgentVersionGetter)(nil).GetModelTargetAgentVersion), arg0, arg1)
	return &MockAgentVersionGetterGetModelTargetAgentVersionCall{Call: call}
}

// MockAgentVersionGetterGetModelTargetAgentVersionCall wrap *gomock.Call
type MockAgentVersionGetterGetModelTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentVersionGetterGetModelTargetAgentVersionCall) Return(arg0 version.Number, arg1 error) *MockAgentVersionGetterGetModelTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentVersionGetterGetModelTargetAgentVersionCall) Do(f func(context.Context, model.UUID) (version.Number, error)) *MockAgentVersionGetterGetModelTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentVersionGetterGetModelTargetAgentVersionCall) DoAndReturn(f func(context.Context, model.UUID) (version.Number, error)) *MockAgentVersionGetterGetModelTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockProvider is a mock of Provider interface.
type MockProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProviderMockRecorder
}

// MockProviderMockRecorder is the mock recorder for MockProvider.
type MockProviderMockRecorder struct {
	mock *MockProvider
}

// NewMockProvider creates a new mock instance.
func NewMockProvider(ctrl *gomock.Controller) *MockProvider {
	mock := &MockProvider{ctrl: ctrl}
	mock.recorder = &MockProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvider) EXPECT() *MockProviderMockRecorder {
	return m.recorder
}

// SupportedFeatures mocks base method.
func (m *MockProvider) SupportedFeatures() (assumes.FeatureSet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SupportedFeatures")
	ret0, _ := ret[0].(assumes.FeatureSet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SupportedFeatures indicates an expected call of SupportedFeatures.
func (mr *MockProviderMockRecorder) SupportedFeatures() *MockProviderSupportedFeaturesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SupportedFeatures", reflect.TypeOf((*MockProvider)(nil).SupportedFeatures))
	return &MockProviderSupportedFeaturesCall{Call: call}
}

// MockProviderSupportedFeaturesCall wrap *gomock.Call
type MockProviderSupportedFeaturesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderSupportedFeaturesCall) Return(arg0 assumes.FeatureSet, arg1 error) *MockProviderSupportedFeaturesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderSupportedFeaturesCall) Do(f func() (assumes.FeatureSet, error)) *MockProviderSupportedFeaturesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderSupportedFeaturesCall) DoAndReturn(f func() (assumes.FeatureSet, error)) *MockProviderSupportedFeaturesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockCharmStore is a mock of CharmStore interface.
type MockCharmStore struct {
	ctrl     *gomock.Controller
	recorder *MockCharmStoreMockRecorder
}

// MockCharmStoreMockRecorder is the mock recorder for MockCharmStore.
type MockCharmStoreMockRecorder struct {
	mock *MockCharmStore
}

// NewMockCharmStore creates a new mock instance.
func NewMockCharmStore(ctrl *gomock.Controller) *MockCharmStore {
	mock := &MockCharmStore{ctrl: ctrl}
	mock.recorder = &MockCharmStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCharmStore) EXPECT() *MockCharmStoreMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCharmStore) Get(arg0 context.Context, arg1 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCharmStoreMockRecorder) Get(arg0, arg1 any) *MockCharmStoreGetCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCharmStore)(nil).Get), arg0, arg1)
	return &MockCharmStoreGetCall{Call: call}
}

// MockCharmStoreGetCall wrap *gomock.Call
type MockCharmStoreGetCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCharmStoreGetCall) Return(arg0 io.ReadCloser, arg1 error) *MockCharmStoreGetCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCharmStoreGetCall) Do(f func(context.Context, string) (io.ReadCloser, error)) *MockCharmStoreGetCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCharmStoreGetCall) DoAndReturn(f func(context.Context, string) (io.ReadCloser, error)) *MockCharmStoreGetCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
