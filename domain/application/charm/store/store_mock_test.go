// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/application/charm/store (interfaces: ObjectStore)
//
// Generated by this command:
//
//	mockgen -typed -package store -destination store_mock_test.go github.com/juju/juju/domain/application/charm/store ObjectStore
//

// Package store is a generated GoMock package.
package store

import (
	context "context"
	io "io"
	reflect "reflect"

	objectstore "github.com/juju/juju/core/objectstore"
	gomock "go.uber.org/mock/gomock"
)

// MockObjectStore is a mock of ObjectStore interface.
type MockObjectStore struct {
	ctrl     *gomock.Controller
	recorder *MockObjectStoreMockRecorder
}

// MockObjectStoreMockRecorder is the mock recorder for MockObjectStore.
type MockObjectStoreMockRecorder struct {
	mock *MockObjectStore
}

// NewMockObjectStore creates a new mock instance.
func NewMockObjectStore(ctrl *gomock.Controller) *MockObjectStore {
	mock := &MockObjectStore{ctrl: ctrl}
	mock.recorder = &MockObjectStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockObjectStore) EXPECT() *MockObjectStoreMockRecorder {
	return m.recorder
}

// PutAndCheckHash mocks base method.
func (m *MockObjectStore) PutAndCheckHash(arg0 context.Context, arg1 string, arg2 io.Reader, arg3 int64, arg4 string) (objectstore.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutAndCheckHash", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(objectstore.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutAndCheckHash indicates an expected call of PutAndCheckHash.
func (mr *MockObjectStoreMockRecorder) PutAndCheckHash(arg0, arg1, arg2, arg3, arg4 any) *MockObjectStorePutAndCheckHashCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutAndCheckHash", reflect.TypeOf((*MockObjectStore)(nil).PutAndCheckHash), arg0, arg1, arg2, arg3, arg4)
	return &MockObjectStorePutAndCheckHashCall{Call: call}
}

// MockObjectStorePutAndCheckHashCall wrap *gomock.Call
type MockObjectStorePutAndCheckHashCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockObjectStorePutAndCheckHashCall) Return(arg0 objectstore.UUID, arg1 error) *MockObjectStorePutAndCheckHashCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockObjectStorePutAndCheckHashCall) Do(f func(context.Context, string, io.Reader, int64, string) (objectstore.UUID, error)) *MockObjectStorePutAndCheckHashCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockObjectStorePutAndCheckHashCall) DoAndReturn(f func(context.Context, string, io.Reader, int64, string) (objectstore.UUID, error)) *MockObjectStorePutAndCheckHashCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
