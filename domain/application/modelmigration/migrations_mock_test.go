// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/application/modelmigration (interfaces: ImportService,ExportService,ExportLeadershipService)
//
// Generated by this command:
//
//	mockgen -typed -package modelmigration -destination migrations_mock_test.go github.com/juju/juju/domain/application/modelmigration ImportService,ExportService,ExportLeadershipService
//

// Package modelmigration is a generated GoMock package.
package modelmigration

import (
	context "context"
	reflect "reflect"

	charm "github.com/juju/juju/core/charm"
	config "github.com/juju/juju/core/config"
	constraints "github.com/juju/juju/core/constraints"
	model "github.com/juju/juju/core/model"
	unit "github.com/juju/juju/core/unit"
	application "github.com/juju/juju/domain/application"
	charm0 "github.com/juju/juju/domain/application/charm"
	service "github.com/juju/juju/domain/application/service"
	charm1 "github.com/juju/juju/internal/charm"
	gomock "go.uber.org/mock/gomock"
)

// MockImportService is a mock of ImportService interface.
type MockImportService struct {
	ctrl     *gomock.Controller
	recorder *MockImportServiceMockRecorder
}

// MockImportServiceMockRecorder is the mock recorder for MockImportService.
type MockImportServiceMockRecorder struct {
	mock *MockImportService
}

// NewMockImportService creates a new mock instance.
func NewMockImportService(ctrl *gomock.Controller) *MockImportService {
	mock := &MockImportService{ctrl: ctrl}
	mock.recorder = &MockImportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImportService) EXPECT() *MockImportServiceMockRecorder {
	return m.recorder
}

// ImportApplication mocks base method.
func (m *MockImportService) ImportApplication(arg0 context.Context, arg1 string, arg2 service.ImportApplicationArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportApplication indicates an expected call of ImportApplication.
func (mr *MockImportServiceMockRecorder) ImportApplication(arg0, arg1, arg2 any) *MockImportServiceImportApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportApplication", reflect.TypeOf((*MockImportService)(nil).ImportApplication), arg0, arg1, arg2)
	return &MockImportServiceImportApplicationCall{Call: call}
}

// MockImportServiceImportApplicationCall wrap *gomock.Call
type MockImportServiceImportApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImportServiceImportApplicationCall) Return(arg0 error) *MockImportServiceImportApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImportServiceImportApplicationCall) Do(f func(context.Context, string, service.ImportApplicationArgs) error) *MockImportServiceImportApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImportServiceImportApplicationCall) DoAndReturn(f func(context.Context, string, service.ImportApplicationArgs) error) *MockImportServiceImportApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveImportedApplication mocks base method.
func (m *MockImportService) RemoveImportedApplication(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveImportedApplication", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveImportedApplication indicates an expected call of RemoveImportedApplication.
func (mr *MockImportServiceMockRecorder) RemoveImportedApplication(arg0, arg1 any) *MockImportServiceRemoveImportedApplicationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveImportedApplication", reflect.TypeOf((*MockImportService)(nil).RemoveImportedApplication), arg0, arg1)
	return &MockImportServiceRemoveImportedApplicationCall{Call: call}
}

// MockImportServiceRemoveImportedApplicationCall wrap *gomock.Call
type MockImportServiceRemoveImportedApplicationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImportServiceRemoveImportedApplicationCall) Return(arg0 error) *MockImportServiceRemoveImportedApplicationCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImportServiceRemoveImportedApplicationCall) Do(f func(context.Context, string) error) *MockImportServiceRemoveImportedApplicationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImportServiceRemoveImportedApplicationCall) DoAndReturn(f func(context.Context, string) error) *MockImportServiceRemoveImportedApplicationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockExportService is a mock of ExportService interface.
type MockExportService struct {
	ctrl     *gomock.Controller
	recorder *MockExportServiceMockRecorder
}

// MockExportServiceMockRecorder is the mock recorder for MockExportService.
type MockExportServiceMockRecorder struct {
	mock *MockExportService
}

// NewMockExportService creates a new mock instance.
func NewMockExportService(ctrl *gomock.Controller) *MockExportService {
	mock := &MockExportService{ctrl: ctrl}
	mock.recorder = &MockExportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExportService) EXPECT() *MockExportServiceMockRecorder {
	return m.recorder
}

// GetApplicationCharmOrigin mocks base method.
func (m *MockExportService) GetApplicationCharmOrigin(arg0 context.Context, arg1 string) (application.CharmOrigin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationCharmOrigin", arg0, arg1)
	ret0, _ := ret[0].(application.CharmOrigin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationCharmOrigin indicates an expected call of GetApplicationCharmOrigin.
func (mr *MockExportServiceMockRecorder) GetApplicationCharmOrigin(arg0, arg1 any) *MockExportServiceGetApplicationCharmOriginCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationCharmOrigin", reflect.TypeOf((*MockExportService)(nil).GetApplicationCharmOrigin), arg0, arg1)
	return &MockExportServiceGetApplicationCharmOriginCall{Call: call}
}

// MockExportServiceGetApplicationCharmOriginCall wrap *gomock.Call
type MockExportServiceGetApplicationCharmOriginCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExportServiceGetApplicationCharmOriginCall) Return(arg0 application.CharmOrigin, arg1 error) *MockExportServiceGetApplicationCharmOriginCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExportServiceGetApplicationCharmOriginCall) Do(f func(context.Context, string) (application.CharmOrigin, error)) *MockExportServiceGetApplicationCharmOriginCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExportServiceGetApplicationCharmOriginCall) DoAndReturn(f func(context.Context, string) (application.CharmOrigin, error)) *MockExportServiceGetApplicationCharmOriginCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationConfigAndSettings mocks base method.
func (m *MockExportService) GetApplicationConfigAndSettings(arg0 context.Context, arg1 string) (config.ConfigAttributes, application.ApplicationSettings, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationConfigAndSettings", arg0, arg1)
	ret0, _ := ret[0].(config.ConfigAttributes)
	ret1, _ := ret[1].(application.ApplicationSettings)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetApplicationConfigAndSettings indicates an expected call of GetApplicationConfigAndSettings.
func (mr *MockExportServiceMockRecorder) GetApplicationConfigAndSettings(arg0, arg1 any) *MockExportServiceGetApplicationConfigAndSettingsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationConfigAndSettings", reflect.TypeOf((*MockExportService)(nil).GetApplicationConfigAndSettings), arg0, arg1)
	return &MockExportServiceGetApplicationConfigAndSettingsCall{Call: call}
}

// MockExportServiceGetApplicationConfigAndSettingsCall wrap *gomock.Call
type MockExportServiceGetApplicationConfigAndSettingsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExportServiceGetApplicationConfigAndSettingsCall) Return(arg0 config.ConfigAttributes, arg1 application.ApplicationSettings, arg2 error) *MockExportServiceGetApplicationConfigAndSettingsCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExportServiceGetApplicationConfigAndSettingsCall) Do(f func(context.Context, string) (config.ConfigAttributes, application.ApplicationSettings, error)) *MockExportServiceGetApplicationConfigAndSettingsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExportServiceGetApplicationConfigAndSettingsCall) DoAndReturn(f func(context.Context, string) (config.ConfigAttributes, application.ApplicationSettings, error)) *MockExportServiceGetApplicationConfigAndSettingsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationConstraints mocks base method.
func (m *MockExportService) GetApplicationConstraints(arg0 context.Context, arg1 string) (constraints.Value, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationConstraints", arg0, arg1)
	ret0, _ := ret[0].(constraints.Value)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationConstraints indicates an expected call of GetApplicationConstraints.
func (mr *MockExportServiceMockRecorder) GetApplicationConstraints(arg0, arg1 any) *MockExportServiceGetApplicationConstraintsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationConstraints", reflect.TypeOf((*MockExportService)(nil).GetApplicationConstraints), arg0, arg1)
	return &MockExportServiceGetApplicationConstraintsCall{Call: call}
}

// MockExportServiceGetApplicationConstraintsCall wrap *gomock.Call
type MockExportServiceGetApplicationConstraintsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExportServiceGetApplicationConstraintsCall) Return(arg0 constraints.Value, arg1 error) *MockExportServiceGetApplicationConstraintsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExportServiceGetApplicationConstraintsCall) Do(f func(context.Context, string) (constraints.Value, error)) *MockExportServiceGetApplicationConstraintsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExportServiceGetApplicationConstraintsCall) DoAndReturn(f func(context.Context, string) (constraints.Value, error)) *MockExportServiceGetApplicationConstraintsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationScaleState mocks base method.
func (m *MockExportService) GetApplicationScaleState(arg0 context.Context, arg1 string) (application.ScaleState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationScaleState", arg0, arg1)
	ret0, _ := ret[0].(application.ScaleState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationScaleState indicates an expected call of GetApplicationScaleState.
func (mr *MockExportServiceMockRecorder) GetApplicationScaleState(arg0, arg1 any) *MockExportServiceGetApplicationScaleStateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationScaleState", reflect.TypeOf((*MockExportService)(nil).GetApplicationScaleState), arg0, arg1)
	return &MockExportServiceGetApplicationScaleStateCall{Call: call}
}

// MockExportServiceGetApplicationScaleStateCall wrap *gomock.Call
type MockExportServiceGetApplicationScaleStateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExportServiceGetApplicationScaleStateCall) Return(arg0 application.ScaleState, arg1 error) *MockExportServiceGetApplicationScaleStateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExportServiceGetApplicationScaleStateCall) Do(f func(context.Context, string) (application.ScaleState, error)) *MockExportServiceGetApplicationScaleStateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExportServiceGetApplicationScaleStateCall) DoAndReturn(f func(context.Context, string) (application.ScaleState, error)) *MockExportServiceGetApplicationScaleStateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplicationUnits mocks base method.
func (m *MockExportService) GetApplicationUnits(arg0 context.Context, arg1 string) ([]application.ExportUnit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationUnits", arg0, arg1)
	ret0, _ := ret[0].([]application.ExportUnit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationUnits indicates an expected call of GetApplicationUnits.
func (mr *MockExportServiceMockRecorder) GetApplicationUnits(arg0, arg1 any) *MockExportServiceGetApplicationUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationUnits", reflect.TypeOf((*MockExportService)(nil).GetApplicationUnits), arg0, arg1)
	return &MockExportServiceGetApplicationUnitsCall{Call: call}
}

// MockExportServiceGetApplicationUnitsCall wrap *gomock.Call
type MockExportServiceGetApplicationUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExportServiceGetApplicationUnitsCall) Return(arg0 []application.ExportUnit, arg1 error) *MockExportServiceGetApplicationUnitsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExportServiceGetApplicationUnitsCall) Do(f func(context.Context, string) ([]application.ExportUnit, error)) *MockExportServiceGetApplicationUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExportServiceGetApplicationUnitsCall) DoAndReturn(f func(context.Context, string) ([]application.ExportUnit, error)) *MockExportServiceGetApplicationUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetApplications mocks base method.
func (m *MockExportService) GetApplications(arg0 context.Context) ([]application.ExportApplication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplications", arg0)
	ret0, _ := ret[0].([]application.ExportApplication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplications indicates an expected call of GetApplications.
func (mr *MockExportServiceMockRecorder) GetApplications(arg0 any) *MockExportServiceGetApplicationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplications", reflect.TypeOf((*MockExportService)(nil).GetApplications), arg0)
	return &MockExportServiceGetApplicationsCall{Call: call}
}

// MockExportServiceGetApplicationsCall wrap *gomock.Call
type MockExportServiceGetApplicationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExportServiceGetApplicationsCall) Return(arg0 []application.ExportApplication, arg1 error) *MockExportServiceGetApplicationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExportServiceGetApplicationsCall) Do(f func(context.Context) ([]application.ExportApplication, error)) *MockExportServiceGetApplicationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExportServiceGetApplicationsCall) DoAndReturn(f func(context.Context) ([]application.ExportApplication, error)) *MockExportServiceGetApplicationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmByApplicationName mocks base method.
func (m *MockExportService) GetCharmByApplicationName(arg0 context.Context, arg1 string) (charm1.Charm, charm0.CharmLocator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmByApplicationName", arg0, arg1)
	ret0, _ := ret[0].(charm1.Charm)
	ret1, _ := ret[1].(charm0.CharmLocator)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetCharmByApplicationName indicates an expected call of GetCharmByApplicationName.
func (mr *MockExportServiceMockRecorder) GetCharmByApplicationName(arg0, arg1 any) *MockExportServiceGetCharmByApplicationNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmByApplicationName", reflect.TypeOf((*MockExportService)(nil).GetCharmByApplicationName), arg0, arg1)
	return &MockExportServiceGetCharmByApplicationNameCall{Call: call}
}

// MockExportServiceGetCharmByApplicationNameCall wrap *gomock.Call
type MockExportServiceGetCharmByApplicationNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExportServiceGetCharmByApplicationNameCall) Return(arg0 charm1.Charm, arg1 charm0.CharmLocator, arg2 error) *MockExportServiceGetCharmByApplicationNameCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExportServiceGetCharmByApplicationNameCall) Do(f func(context.Context, string) (charm1.Charm, charm0.CharmLocator, error)) *MockExportServiceGetCharmByApplicationNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExportServiceGetCharmByApplicationNameCall) DoAndReturn(f func(context.Context, string) (charm1.Charm, charm0.CharmLocator, error)) *MockExportServiceGetCharmByApplicationNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetCharmID mocks base method.
func (m *MockExportService) GetCharmID(arg0 context.Context, arg1 charm0.GetCharmArgs) (charm.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCharmID", arg0, arg1)
	ret0, _ := ret[0].(charm.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCharmID indicates an expected call of GetCharmID.
func (mr *MockExportServiceMockRecorder) GetCharmID(arg0, arg1 any) *MockExportServiceGetCharmIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCharmID", reflect.TypeOf((*MockExportService)(nil).GetCharmID), arg0, arg1)
	return &MockExportServiceGetCharmIDCall{Call: call}
}

// MockExportServiceGetCharmIDCall wrap *gomock.Call
type MockExportServiceGetCharmIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExportServiceGetCharmIDCall) Return(arg0 charm.ID, arg1 error) *MockExportServiceGetCharmIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExportServiceGetCharmIDCall) Do(f func(context.Context, charm0.GetCharmArgs) (charm.ID, error)) *MockExportServiceGetCharmIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExportServiceGetCharmIDCall) DoAndReturn(f func(context.Context, charm0.GetCharmArgs) (charm.ID, error)) *MockExportServiceGetCharmIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUIDByName mocks base method.
func (m *MockExportService) GetUnitUUIDByName(arg0 context.Context, arg1 unit.Name) (unit.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUIDByName", arg0, arg1)
	ret0, _ := ret[0].(unit.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUIDByName indicates an expected call of GetUnitUUIDByName.
func (mr *MockExportServiceMockRecorder) GetUnitUUIDByName(arg0, arg1 any) *MockExportServiceGetUnitUUIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUIDByName", reflect.TypeOf((*MockExportService)(nil).GetUnitUUIDByName), arg0, arg1)
	return &MockExportServiceGetUnitUUIDByNameCall{Call: call}
}

// MockExportServiceGetUnitUUIDByNameCall wrap *gomock.Call
type MockExportServiceGetUnitUUIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExportServiceGetUnitUUIDByNameCall) Return(arg0 unit.UUID, arg1 error) *MockExportServiceGetUnitUUIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExportServiceGetUnitUUIDByNameCall) Do(f func(context.Context, unit.Name) (unit.UUID, error)) *MockExportServiceGetUnitUUIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExportServiceGetUnitUUIDByNameCall) DoAndReturn(f func(context.Context, unit.Name) (unit.UUID, error)) *MockExportServiceGetUnitUUIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockExportLeadershipService is a mock of ExportLeadershipService interface.
type MockExportLeadershipService struct {
	ctrl     *gomock.Controller
	recorder *MockExportLeadershipServiceMockRecorder
}

// MockExportLeadershipServiceMockRecorder is the mock recorder for MockExportLeadershipService.
type MockExportLeadershipServiceMockRecorder struct {
	mock *MockExportLeadershipService
}

// NewMockExportLeadershipService creates a new mock instance.
func NewMockExportLeadershipService(ctrl *gomock.Controller) *MockExportLeadershipService {
	mock := &MockExportLeadershipService{ctrl: ctrl}
	mock.recorder = &MockExportLeadershipServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExportLeadershipService) EXPECT() *MockExportLeadershipServiceMockRecorder {
	return m.recorder
}

// GetApplicationLeadershipForModel mocks base method.
func (m *MockExportLeadershipService) GetApplicationLeadershipForModel(arg0 context.Context, arg1 model.UUID) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetApplicationLeadershipForModel", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetApplicationLeadershipForModel indicates an expected call of GetApplicationLeadershipForModel.
func (mr *MockExportLeadershipServiceMockRecorder) GetApplicationLeadershipForModel(arg0, arg1 any) *MockExportLeadershipServiceGetApplicationLeadershipForModelCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetApplicationLeadershipForModel", reflect.TypeOf((*MockExportLeadershipService)(nil).GetApplicationLeadershipForModel), arg0, arg1)
	return &MockExportLeadershipServiceGetApplicationLeadershipForModelCall{Call: call}
}

// MockExportLeadershipServiceGetApplicationLeadershipForModelCall wrap *gomock.Call
type MockExportLeadershipServiceGetApplicationLeadershipForModelCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExportLeadershipServiceGetApplicationLeadershipForModelCall) Return(arg0 map[string]string, arg1 error) *MockExportLeadershipServiceGetApplicationLeadershipForModelCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExportLeadershipServiceGetApplicationLeadershipForModelCall) Do(f func(context.Context, model.UUID) (map[string]string, error)) *MockExportLeadershipServiceGetApplicationLeadershipForModelCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExportLeadershipServiceGetApplicationLeadershipForModelCall) DoAndReturn(f func(context.Context, model.UUID) (map[string]string, error)) *MockExportLeadershipServiceGetApplicationLeadershipForModelCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
