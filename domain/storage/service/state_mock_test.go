// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/storage/service (interfaces: StoragePoolState)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination state_mock_test.go github.com/juju/juju/domain/storage/service StoragePoolState
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	storage "github.com/juju/juju/domain/storage"
	gomock "go.uber.org/mock/gomock"
)

// MockStoragePoolState is a mock of StoragePoolState interface.
type MockStoragePoolState struct {
	ctrl     *gomock.Controller
	recorder *MockStoragePoolStateMockRecorder
}

// MockStoragePoolStateMockRecorder is the mock recorder for MockStoragePoolState.
type MockStoragePoolStateMockRecorder struct {
	mock *MockStoragePoolState
}

// NewMockStoragePoolState creates a new mock instance.
func NewMockStoragePoolState(ctrl *gomock.Controller) *MockStoragePoolState {
	mock := &MockStoragePoolState{ctrl: ctrl}
	mock.recorder = &MockStoragePoolStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStoragePoolState) EXPECT() *MockStoragePoolStateMockRecorder {
	return m.recorder
}

// CreateStoragePool mocks base method.
func (m *MockStoragePoolState) CreateStoragePool(arg0 context.Context, arg1 storage.StoragePoolDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStoragePool", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateStoragePool indicates an expected call of CreateStoragePool.
func (mr *MockStoragePoolStateMockRecorder) CreateStoragePool(arg0, arg1 any) *MockStoragePoolStateCreateStoragePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStoragePool", reflect.TypeOf((*MockStoragePoolState)(nil).CreateStoragePool), arg0, arg1)
	return &MockStoragePoolStateCreateStoragePoolCall{Call: call}
}

// MockStoragePoolStateCreateStoragePoolCall wrap *gomock.Call
type MockStoragePoolStateCreateStoragePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoragePoolStateCreateStoragePoolCall) Return(arg0 error) *MockStoragePoolStateCreateStoragePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoragePoolStateCreateStoragePoolCall) Do(f func(context.Context, storage.StoragePoolDetails) error) *MockStoragePoolStateCreateStoragePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoragePoolStateCreateStoragePoolCall) DoAndReturn(f func(context.Context, storage.StoragePoolDetails) error) *MockStoragePoolStateCreateStoragePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteStoragePool mocks base method.
func (m *MockStoragePoolState) DeleteStoragePool(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStoragePool", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStoragePool indicates an expected call of DeleteStoragePool.
func (mr *MockStoragePoolStateMockRecorder) DeleteStoragePool(arg0, arg1 any) *MockStoragePoolStateDeleteStoragePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStoragePool", reflect.TypeOf((*MockStoragePoolState)(nil).DeleteStoragePool), arg0, arg1)
	return &MockStoragePoolStateDeleteStoragePoolCall{Call: call}
}

// MockStoragePoolStateDeleteStoragePoolCall wrap *gomock.Call
type MockStoragePoolStateDeleteStoragePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoragePoolStateDeleteStoragePoolCall) Return(arg0 error) *MockStoragePoolStateDeleteStoragePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoragePoolStateDeleteStoragePoolCall) Do(f func(context.Context, string) error) *MockStoragePoolStateDeleteStoragePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoragePoolStateDeleteStoragePoolCall) DoAndReturn(f func(context.Context, string) error) *MockStoragePoolStateDeleteStoragePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetStoragePoolByName mocks base method.
func (m *MockStoragePoolState) GetStoragePoolByName(arg0 context.Context, arg1 string) (storage.StoragePoolDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoragePoolByName", arg0, arg1)
	ret0, _ := ret[0].(storage.StoragePoolDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStoragePoolByName indicates an expected call of GetStoragePoolByName.
func (mr *MockStoragePoolStateMockRecorder) GetStoragePoolByName(arg0, arg1 any) *MockStoragePoolStateGetStoragePoolByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoragePoolByName", reflect.TypeOf((*MockStoragePoolState)(nil).GetStoragePoolByName), arg0, arg1)
	return &MockStoragePoolStateGetStoragePoolByNameCall{Call: call}
}

// MockStoragePoolStateGetStoragePoolByNameCall wrap *gomock.Call
type MockStoragePoolStateGetStoragePoolByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoragePoolStateGetStoragePoolByNameCall) Return(arg0 storage.StoragePoolDetails, arg1 error) *MockStoragePoolStateGetStoragePoolByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoragePoolStateGetStoragePoolByNameCall) Do(f func(context.Context, string) (storage.StoragePoolDetails, error)) *MockStoragePoolStateGetStoragePoolByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoragePoolStateGetStoragePoolByNameCall) DoAndReturn(f func(context.Context, string) (storage.StoragePoolDetails, error)) *MockStoragePoolStateGetStoragePoolByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ListStoragePools mocks base method.
func (m *MockStoragePoolState) ListStoragePools(arg0 context.Context, arg1 storage.Names, arg2 storage.Providers) ([]storage.StoragePoolDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListStoragePools", arg0, arg1, arg2)
	ret0, _ := ret[0].([]storage.StoragePoolDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListStoragePools indicates an expected call of ListStoragePools.
func (mr *MockStoragePoolStateMockRecorder) ListStoragePools(arg0, arg1, arg2 any) *MockStoragePoolStateListStoragePoolsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListStoragePools", reflect.TypeOf((*MockStoragePoolState)(nil).ListStoragePools), arg0, arg1, arg2)
	return &MockStoragePoolStateListStoragePoolsCall{Call: call}
}

// MockStoragePoolStateListStoragePoolsCall wrap *gomock.Call
type MockStoragePoolStateListStoragePoolsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoragePoolStateListStoragePoolsCall) Return(arg0 []storage.StoragePoolDetails, arg1 error) *MockStoragePoolStateListStoragePoolsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoragePoolStateListStoragePoolsCall) Do(f func(context.Context, storage.Names, storage.Providers) ([]storage.StoragePoolDetails, error)) *MockStoragePoolStateListStoragePoolsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoragePoolStateListStoragePoolsCall) DoAndReturn(f func(context.Context, storage.Names, storage.Providers) ([]storage.StoragePoolDetails, error)) *MockStoragePoolStateListStoragePoolsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ReplaceStoragePool mocks base method.
func (m *MockStoragePoolState) ReplaceStoragePool(arg0 context.Context, arg1 storage.StoragePoolDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceStoragePool", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceStoragePool indicates an expected call of ReplaceStoragePool.
func (mr *MockStoragePoolStateMockRecorder) ReplaceStoragePool(arg0, arg1 any) *MockStoragePoolStateReplaceStoragePoolCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceStoragePool", reflect.TypeOf((*MockStoragePoolState)(nil).ReplaceStoragePool), arg0, arg1)
	return &MockStoragePoolStateReplaceStoragePoolCall{Call: call}
}

// MockStoragePoolStateReplaceStoragePoolCall wrap *gomock.Call
type MockStoragePoolStateReplaceStoragePoolCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStoragePoolStateReplaceStoragePoolCall) Return(arg0 error) *MockStoragePoolStateReplaceStoragePoolCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStoragePoolStateReplaceStoragePoolCall) Do(f func(context.Context, storage.StoragePoolDetails) error) *MockStoragePoolStateReplaceStoragePoolCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStoragePoolStateReplaceStoragePoolCall) DoAndReturn(f func(context.Context, storage.StoragePoolDetails) error) *MockStoragePoolStateReplaceStoragePoolCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
