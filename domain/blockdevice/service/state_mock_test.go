// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/blockdevice/service (interfaces: State,WatcherFactory)
//
// Generated by this command:
//
//	mockgen -package service -destination state_mock_test.go github.com/juju/juju/domain/blockdevice/service State,WatcherFactory
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	changestream "github.com/juju/juju/core/changestream"
	watcher "github.com/juju/juju/core/watcher"
	eventsource "github.com/juju/juju/core/watcher/eventsource"
	blockdevice "github.com/juju/juju/domain/blockdevice"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// BlockDevices mocks base method.
func (m *MockState) BlockDevices(arg0 context.Context, arg1 string) ([]blockdevice.BlockDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockDevices", arg0, arg1)
	ret0, _ := ret[0].([]blockdevice.BlockDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockDevices indicates an expected call of BlockDevices.
func (mr *MockStateMockRecorder) BlockDevices(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockDevices", reflect.TypeOf((*MockState)(nil).BlockDevices), arg0, arg1)
}

// MachineBlockDevices mocks base method.
func (m *MockState) MachineBlockDevices(arg0 context.Context) ([]blockdevice.MachineBlockDevice, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MachineBlockDevices", arg0)
	ret0, _ := ret[0].([]blockdevice.MachineBlockDevice)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MachineBlockDevices indicates an expected call of MachineBlockDevices.
func (mr *MockStateMockRecorder) MachineBlockDevices(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MachineBlockDevices", reflect.TypeOf((*MockState)(nil).MachineBlockDevices), arg0)
}

// SetMachineBlockDevices mocks base method.
func (m *MockState) SetMachineBlockDevices(arg0 context.Context, arg1 string, arg2 ...blockdevice.BlockDevice) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetMachineBlockDevices", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMachineBlockDevices indicates an expected call of SetMachineBlockDevices.
func (mr *MockStateMockRecorder) SetMachineBlockDevices(arg0, arg1 any, arg2 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMachineBlockDevices", reflect.TypeOf((*MockState)(nil).SetMachineBlockDevices), varargs...)
}

// WatchBlockDevices mocks base method.
func (m *MockState) WatchBlockDevices(arg0 context.Context, arg1 func(string, string, changestream.ChangeType, eventsource.Predicate) (watcher.Watcher[struct{}], error), arg2 string) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchBlockDevices", arg0, arg1, arg2)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchBlockDevices indicates an expected call of WatchBlockDevices.
func (mr *MockStateMockRecorder) WatchBlockDevices(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchBlockDevices", reflect.TypeOf((*MockState)(nil).WatchBlockDevices), arg0, arg1, arg2)
}

// MockWatcherFactory is a mock of WatcherFactory interface.
type MockWatcherFactory struct {
	ctrl     *gomock.Controller
	recorder *MockWatcherFactoryMockRecorder
}

// MockWatcherFactoryMockRecorder is the mock recorder for MockWatcherFactory.
type MockWatcherFactoryMockRecorder struct {
	mock *MockWatcherFactory
}

// NewMockWatcherFactory creates a new mock instance.
func NewMockWatcherFactory(ctrl *gomock.Controller) *MockWatcherFactory {
	mock := &MockWatcherFactory{ctrl: ctrl}
	mock.recorder = &MockWatcherFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWatcherFactory) EXPECT() *MockWatcherFactoryMockRecorder {
	return m.recorder
}

// NewValuePredicateWatcher mocks base method.
func (m *MockWatcherFactory) NewValuePredicateWatcher(arg0, arg1 string, arg2 changestream.ChangeType, arg3 eventsource.Predicate) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewValuePredicateWatcher", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewValuePredicateWatcher indicates an expected call of NewValuePredicateWatcher.
func (mr *MockWatcherFactoryMockRecorder) NewValuePredicateWatcher(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewValuePredicateWatcher", reflect.TypeOf((*MockWatcherFactory)(nil).NewValuePredicateWatcher), arg0, arg1, arg2, arg3)
}
