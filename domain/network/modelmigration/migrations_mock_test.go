// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/network/modelmigration (interfaces: Coordinator,ImportSpaceService,ImportSubnetService,ExportSpaceService,ExportSubnetService)
//
// Generated by this command:
//
//	mockgen -package modelmigration -destination migrations_mock_test.go github.com/juju/juju/domain/network/modelmigration Coordinator,ImportSpaceService,ImportSubnetService,ExportSpaceService,ExportSubnetService
//

// Package modelmigration is a generated GoMock package.
package modelmigration

import (
	context "context"
	reflect "reflect"

	modelmigration "github.com/juju/juju/core/modelmigration"
	network "github.com/juju/juju/core/network"
	gomock "go.uber.org/mock/gomock"
)

// MockCoordinator is a mock of Coordinator interface.
type MockCoordinator struct {
	ctrl     *gomock.Controller
	recorder *MockCoordinatorMockRecorder
}

// MockCoordinatorMockRecorder is the mock recorder for MockCoordinator.
type MockCoordinatorMockRecorder struct {
	mock *MockCoordinator
}

// NewMockCoordinator creates a new mock instance.
func NewMockCoordinator(ctrl *gomock.Controller) *MockCoordinator {
	mock := &MockCoordinator{ctrl: ctrl}
	mock.recorder = &MockCoordinatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoordinator) EXPECT() *MockCoordinatorMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCoordinator) Add(arg0 modelmigration.Operation) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0)
}

// Add indicates an expected call of Add.
func (mr *MockCoordinatorMockRecorder) Add(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCoordinator)(nil).Add), arg0)
}

// MockImportSpaceService is a mock of ImportSpaceService interface.
type MockImportSpaceService struct {
	ctrl     *gomock.Controller
	recorder *MockImportSpaceServiceMockRecorder
}

// MockImportSpaceServiceMockRecorder is the mock recorder for MockImportSpaceService.
type MockImportSpaceServiceMockRecorder struct {
	mock *MockImportSpaceService
}

// NewMockImportSpaceService creates a new mock instance.
func NewMockImportSpaceService(ctrl *gomock.Controller) *MockImportSpaceService {
	mock := &MockImportSpaceService{ctrl: ctrl}
	mock.recorder = &MockImportSpaceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImportSpaceService) EXPECT() *MockImportSpaceServiceMockRecorder {
	return m.recorder
}

// AddSpace mocks base method.
func (m *MockImportSpaceService) AddSpace(arg0 context.Context, arg1 string, arg2 network.Id, arg3 []string) (network.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpace", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(network.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSpace indicates an expected call of AddSpace.
func (mr *MockImportSpaceServiceMockRecorder) AddSpace(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpace", reflect.TypeOf((*MockImportSpaceService)(nil).AddSpace), arg0, arg1, arg2, arg3)
}

// Space mocks base method.
func (m *MockImportSpaceService) Space(arg0 context.Context, arg1 string) (*network.SpaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Space", arg0, arg1)
	ret0, _ := ret[0].(*network.SpaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Space indicates an expected call of Space.
func (mr *MockImportSpaceServiceMockRecorder) Space(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Space", reflect.TypeOf((*MockImportSpaceService)(nil).Space), arg0, arg1)
}

// MockImportSubnetService is a mock of ImportSubnetService interface.
type MockImportSubnetService struct {
	ctrl     *gomock.Controller
	recorder *MockImportSubnetServiceMockRecorder
}

// MockImportSubnetServiceMockRecorder is the mock recorder for MockImportSubnetService.
type MockImportSubnetServiceMockRecorder struct {
	mock *MockImportSubnetService
}

// NewMockImportSubnetService creates a new mock instance.
func NewMockImportSubnetService(ctrl *gomock.Controller) *MockImportSubnetService {
	mock := &MockImportSubnetService{ctrl: ctrl}
	mock.recorder = &MockImportSubnetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImportSubnetService) EXPECT() *MockImportSubnetServiceMockRecorder {
	return m.recorder
}

// AddSubnet mocks base method.
func (m *MockImportSubnetService) AddSubnet(arg0 context.Context, arg1 network.SubnetInfo) (network.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubnet", arg0, arg1)
	ret0, _ := ret[0].(network.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSubnet indicates an expected call of AddSubnet.
func (mr *MockImportSubnetServiceMockRecorder) AddSubnet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubnet", reflect.TypeOf((*MockImportSubnetService)(nil).AddSubnet), arg0, arg1)
}

// MockExportSpaceService is a mock of ExportSpaceService interface.
type MockExportSpaceService struct {
	ctrl     *gomock.Controller
	recorder *MockExportSpaceServiceMockRecorder
}

// MockExportSpaceServiceMockRecorder is the mock recorder for MockExportSpaceService.
type MockExportSpaceServiceMockRecorder struct {
	mock *MockExportSpaceService
}

// NewMockExportSpaceService creates a new mock instance.
func NewMockExportSpaceService(ctrl *gomock.Controller) *MockExportSpaceService {
	mock := &MockExportSpaceService{ctrl: ctrl}
	mock.recorder = &MockExportSpaceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExportSpaceService) EXPECT() *MockExportSpaceServiceMockRecorder {
	return m.recorder
}

// AddSpace mocks base method.
func (m *MockExportSpaceService) AddSpace(arg0 context.Context, arg1 string, arg2 network.Id, arg3 []string) (network.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSpace", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(network.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSpace indicates an expected call of AddSpace.
func (mr *MockExportSpaceServiceMockRecorder) AddSpace(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSpace", reflect.TypeOf((*MockExportSpaceService)(nil).AddSpace), arg0, arg1, arg2, arg3)
}

// Space mocks base method.
func (m *MockExportSpaceService) Space(arg0 context.Context, arg1 string) (*network.SpaceInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Space", arg0, arg1)
	ret0, _ := ret[0].(*network.SpaceInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Space indicates an expected call of Space.
func (mr *MockExportSpaceServiceMockRecorder) Space(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Space", reflect.TypeOf((*MockExportSpaceService)(nil).Space), arg0, arg1)
}

// MockExportSubnetService is a mock of ExportSubnetService interface.
type MockExportSubnetService struct {
	ctrl     *gomock.Controller
	recorder *MockExportSubnetServiceMockRecorder
}

// MockExportSubnetServiceMockRecorder is the mock recorder for MockExportSubnetService.
type MockExportSubnetServiceMockRecorder struct {
	mock *MockExportSubnetService
}

// NewMockExportSubnetService creates a new mock instance.
func NewMockExportSubnetService(ctrl *gomock.Controller) *MockExportSubnetService {
	mock := &MockExportSubnetService{ctrl: ctrl}
	mock.recorder = &MockExportSubnetServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExportSubnetService) EXPECT() *MockExportSubnetServiceMockRecorder {
	return m.recorder
}

// AddSubnet mocks base method.
func (m *MockExportSubnetService) AddSubnet(arg0 context.Context, arg1 network.SubnetInfo) (network.Id, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSubnet", arg0, arg1)
	ret0, _ := ret[0].(network.Id)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSubnet indicates an expected call of AddSubnet.
func (mr *MockExportSubnetServiceMockRecorder) AddSubnet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSubnet", reflect.TypeOf((*MockExportSubnetService)(nil).AddSubnet), arg0, arg1)
}
