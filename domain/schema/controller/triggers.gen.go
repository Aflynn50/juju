// Code generated by triggergen. DO NOT EDIT.

package controller

import (
	"fmt"

	"github.com/juju/juju/core/database/schema"
)


func ChangeLogTriggersForCloud(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- Cloud for insert trigger
CREATE TRIGGER trg_log_cloud_insert
AFTER INSERT ON cloud FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- Cloud for update trigger
CREATE TRIGGER trg_log_cloud_update
AFTER UPDATE ON cloud FOR EACH ROW
WHEN 
	NEW.name != OLD.name OR
	NEW.cloud_type_id != OLD.cloud_type_id OR
	NEW.endpoint != OLD.endpoint OR
	(NEW.identity_endpoint != OLD.identity_endpoint OR (NEW.identity_endpoint IS NOT NULL AND OLD.identity_endpoint IS NULL) OR (NEW.identity_endpoint IS NULL AND OLD.identity_endpoint IS NOT NULL)) OR
	(NEW.storage_endpoint != OLD.storage_endpoint OR (NEW.storage_endpoint IS NOT NULL AND OLD.storage_endpoint IS NULL) OR (NEW.storage_endpoint IS NULL AND OLD.storage_endpoint IS NOT NULL)) OR
	NEW.skip_tls_verify != OLD.skip_tls_verify 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;

-- Cloud for delete trigger
CREATE TRIGGER trg_log_cloud_delete
AFTER DELETE ON cloud FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

func ChangeLogTriggersForCloudCredential(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- CloudCredential for insert trigger
CREATE TRIGGER trg_log_cloud_credential_insert
AFTER INSERT ON cloud_credential FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- CloudCredential for update trigger
CREATE TRIGGER trg_log_cloud_credential_update
AFTER UPDATE ON cloud_credential FOR EACH ROW
WHEN 
	NEW.cloud_uuid != OLD.cloud_uuid OR
	NEW.auth_type_id != OLD.auth_type_id OR
	NEW.owner_uuid != OLD.owner_uuid OR
	NEW.name != OLD.name OR
	(NEW.revoked != OLD.revoked OR (NEW.revoked IS NOT NULL AND OLD.revoked IS NULL) OR (NEW.revoked IS NULL AND OLD.revoked IS NOT NULL)) OR
	(NEW.invalid != OLD.invalid OR (NEW.invalid IS NOT NULL AND OLD.invalid IS NULL) OR (NEW.invalid IS NULL AND OLD.invalid IS NOT NULL)) OR
	(NEW.invalid_reason != OLD.invalid_reason OR (NEW.invalid_reason IS NOT NULL AND OLD.invalid_reason IS NULL) OR (NEW.invalid_reason IS NULL AND OLD.invalid_reason IS NOT NULL)) 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;

-- CloudCredential for delete trigger
CREATE TRIGGER trg_log_cloud_credential_delete
AFTER DELETE ON cloud_credential FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

func ChangeLogTriggersForControllerConfig(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- ControllerConfig for insert trigger
CREATE TRIGGER trg_log_controller_config_insert
AFTER INSERT ON controller_config FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- ControllerConfig for update trigger
CREATE TRIGGER trg_log_controller_config_update
AFTER UPDATE ON controller_config FOR EACH ROW
WHEN 
	(NEW.value != OLD.value OR (NEW.value IS NOT NULL AND OLD.value IS NULL) OR (NEW.value IS NULL AND OLD.value IS NOT NULL)) 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;

-- ControllerConfig for delete trigger
CREATE TRIGGER trg_log_controller_config_delete
AFTER DELETE ON controller_config FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

func ChangeLogTriggersForControllerNode(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- ControllerNode for insert trigger
CREATE TRIGGER trg_log_controller_node_insert
AFTER INSERT ON controller_node FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- ControllerNode for update trigger
CREATE TRIGGER trg_log_controller_node_update
AFTER UPDATE ON controller_node FOR EACH ROW
WHEN 
	(NEW.dqlite_node_id != OLD.dqlite_node_id OR (NEW.dqlite_node_id IS NOT NULL AND OLD.dqlite_node_id IS NULL) OR (NEW.dqlite_node_id IS NULL AND OLD.dqlite_node_id IS NOT NULL)) OR
	(NEW.bind_address != OLD.bind_address OR (NEW.bind_address IS NOT NULL AND OLD.bind_address IS NULL) OR (NEW.bind_address IS NULL AND OLD.bind_address IS NOT NULL)) 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;

-- ControllerNode for delete trigger
CREATE TRIGGER trg_log_controller_node_delete
AFTER DELETE ON controller_node FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

func ChangeLogTriggersForExternalController(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- ExternalController for insert trigger
CREATE TRIGGER trg_log_external_controller_insert
AFTER INSERT ON external_controller FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- ExternalController for update trigger
CREATE TRIGGER trg_log_external_controller_update
AFTER UPDATE ON external_controller FOR EACH ROW
WHEN 
	(NEW.alias != OLD.alias OR (NEW.alias IS NOT NULL AND OLD.alias IS NULL) OR (NEW.alias IS NULL AND OLD.alias IS NOT NULL)) OR
	NEW.ca_cert != OLD.ca_cert 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;

-- ExternalController for delete trigger
CREATE TRIGGER trg_log_external_controller_delete
AFTER DELETE ON external_controller FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

func ChangeLogTriggersForModel(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- Model for insert trigger
CREATE TRIGGER trg_log_model_insert
AFTER INSERT ON model FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- Model for update trigger
CREATE TRIGGER trg_log_model_update
AFTER UPDATE ON model FOR EACH ROW
WHEN 
	NEW.activated != OLD.activated OR
	NEW.cloud_uuid != OLD.cloud_uuid OR
	(NEW.cloud_region_uuid != OLD.cloud_region_uuid OR (NEW.cloud_region_uuid IS NOT NULL AND OLD.cloud_region_uuid IS NULL) OR (NEW.cloud_region_uuid IS NULL AND OLD.cloud_region_uuid IS NOT NULL)) OR
	(NEW.cloud_credential_uuid != OLD.cloud_credential_uuid OR (NEW.cloud_credential_uuid IS NOT NULL AND OLD.cloud_credential_uuid IS NULL) OR (NEW.cloud_credential_uuid IS NULL AND OLD.cloud_credential_uuid IS NOT NULL)) OR
	NEW.model_type_id != OLD.model_type_id OR
	NEW.life_id != OLD.life_id OR
	NEW.name != OLD.name OR
	NEW.owner_uuid != OLD.owner_uuid 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;

-- Model for delete trigger
CREATE TRIGGER trg_log_model_delete
AFTER DELETE ON model FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

func ChangeLogTriggersForModelMigrationMinionSync(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- ModelMigrationMinionSync for insert trigger
CREATE TRIGGER trg_log_model_migration_minion_sync_insert
AFTER INSERT ON model_migration_minion_sync FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- ModelMigrationMinionSync for update trigger
CREATE TRIGGER trg_log_model_migration_minion_sync_update
AFTER UPDATE ON model_migration_minion_sync FOR EACH ROW
WHEN 
	NEW.migration_uuid != OLD.migration_uuid OR
	(NEW.phase != OLD.phase OR (NEW.phase IS NOT NULL AND OLD.phase IS NULL) OR (NEW.phase IS NULL AND OLD.phase IS NOT NULL)) OR
	(NEW.entity_key != OLD.entity_key OR (NEW.entity_key IS NOT NULL AND OLD.entity_key IS NULL) OR (NEW.entity_key IS NULL AND OLD.entity_key IS NOT NULL)) OR
	(NEW.time != OLD.time OR (NEW.time IS NOT NULL AND OLD.time IS NULL) OR (NEW.time IS NULL AND OLD.time IS NOT NULL)) OR
	(NEW.success != OLD.success OR (NEW.success IS NOT NULL AND OLD.success IS NULL) OR (NEW.success IS NULL AND OLD.success IS NOT NULL)) 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;

-- ModelMigrationMinionSync for delete trigger
CREATE TRIGGER trg_log_model_migration_minion_sync_delete
AFTER DELETE ON model_migration_minion_sync FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

func ChangeLogTriggersForModelMigrationStatus(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- ModelMigrationStatus for insert trigger
CREATE TRIGGER trg_log_model_migration_status_insert
AFTER INSERT ON model_migration_status FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- ModelMigrationStatus for update trigger
CREATE TRIGGER trg_log_model_migration_status_update
AFTER UPDATE ON model_migration_status FOR EACH ROW
WHEN 
	(NEW.start_time != OLD.start_time OR (NEW.start_time IS NOT NULL AND OLD.start_time IS NULL) OR (NEW.start_time IS NULL AND OLD.start_time IS NOT NULL)) OR
	(NEW.success_time != OLD.success_time OR (NEW.success_time IS NOT NULL AND OLD.success_time IS NULL) OR (NEW.success_time IS NULL AND OLD.success_time IS NOT NULL)) OR
	(NEW.end_time != OLD.end_time OR (NEW.end_time IS NOT NULL AND OLD.end_time IS NULL) OR (NEW.end_time IS NULL AND OLD.end_time IS NOT NULL)) OR
	(NEW.phase != OLD.phase OR (NEW.phase IS NOT NULL AND OLD.phase IS NULL) OR (NEW.phase IS NULL AND OLD.phase IS NOT NULL)) OR
	(NEW.phase_changed_time != OLD.phase_changed_time OR (NEW.phase_changed_time IS NOT NULL AND OLD.phase_changed_time IS NULL) OR (NEW.phase_changed_time IS NULL AND OLD.phase_changed_time IS NOT NULL)) OR
	(NEW.status != OLD.status OR (NEW.status IS NOT NULL AND OLD.status IS NULL) OR (NEW.status IS NULL AND OLD.status IS NOT NULL)) 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;

-- ModelMigrationStatus for delete trigger
CREATE TRIGGER trg_log_model_migration_status_delete
AFTER DELETE ON model_migration_status FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

func ChangeLogTriggersForObjectStoreMetadataPath(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- ObjectStoreMetadataPath for insert trigger
CREATE TRIGGER trg_log_object_store_metadata_path_insert
AFTER INSERT ON object_store_metadata_path FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- ObjectStoreMetadataPath for update trigger
CREATE TRIGGER trg_log_object_store_metadata_path_update
AFTER UPDATE ON object_store_metadata_path FOR EACH ROW
WHEN 
	NEW.metadata_uuid != OLD.metadata_uuid 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;

-- ObjectStoreMetadataPath for delete trigger
CREATE TRIGGER trg_log_object_store_metadata_path_delete
AFTER DELETE ON object_store_metadata_path FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

func ChangeLogTriggersForSecretBackendRotation(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- SecretBackendRotation for insert trigger
CREATE TRIGGER trg_log_secret_backend_rotation_insert
AFTER INSERT ON secret_backend_rotation FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- SecretBackendRotation for update trigger
CREATE TRIGGER trg_log_secret_backend_rotation_update
AFTER UPDATE ON secret_backend_rotation FOR EACH ROW
WHEN 
	NEW.next_rotation_time != OLD.next_rotation_time 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;

-- SecretBackendRotation for delete trigger
CREATE TRIGGER trg_log_secret_backend_rotation_delete
AFTER DELETE ON secret_backend_rotation FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

func ChangeLogTriggersForUpgradeInfo(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- UpgradeInfo for insert trigger
CREATE TRIGGER trg_log_upgrade_info_insert
AFTER INSERT ON upgrade_info FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- UpgradeInfo for update trigger
CREATE TRIGGER trg_log_upgrade_info_update
AFTER UPDATE ON upgrade_info FOR EACH ROW
WHEN 
	NEW.previous_version != OLD.previous_version OR
	NEW.target_version != OLD.target_version OR
	NEW.state_type_id != OLD.state_type_id 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;

-- UpgradeInfo for delete trigger
CREATE TRIGGER trg_log_upgrade_info_delete
AFTER DELETE ON upgrade_info FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

func ChangeLogTriggersForUpgradeInfoControllerNode(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- UpgradeInfoControllerNode for insert trigger
CREATE TRIGGER trg_log_upgrade_info_controller_node_insert
AFTER INSERT ON upgrade_info_controller_node FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- UpgradeInfoControllerNode for update trigger
CREATE TRIGGER trg_log_upgrade_info_controller_node_update
AFTER UPDATE ON upgrade_info_controller_node FOR EACH ROW
WHEN 
	NEW.controller_node_id != OLD.controller_node_id OR
	NEW.upgrade_info_uuid != OLD.upgrade_info_uuid OR
	(NEW.node_upgrade_completed_at != OLD.node_upgrade_completed_at OR (NEW.node_upgrade_completed_at IS NOT NULL AND OLD.node_upgrade_completed_at IS NULL) OR (NEW.node_upgrade_completed_at IS NULL AND OLD.node_upgrade_completed_at IS NOT NULL)) 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;

-- UpgradeInfoControllerNode for delete trigger
CREATE TRIGGER trg_log_upgrade_info_controller_node_delete
AFTER DELETE ON upgrade_info_controller_node FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

