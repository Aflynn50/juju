// Code generated by triggergen. DO NOT EDIT.

package triggers

import (
	"fmt"

	"github.com/juju/juju/core/database/schema"
)


// ChangeLogTriggersForRelation generates the triggers for the
// relation table.
func ChangeLogTriggersForRelation(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for Relation
INSERT INTO change_log_namespace VALUES (%[2]d, 'relation', 'Relation changes based on %[1]s');

-- insert trigger for Relation
CREATE TRIGGER trg_log_relation_insert
AFTER INSERT ON relation FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- update trigger for Relation
CREATE TRIGGER trg_log_relation_update
AFTER UPDATE ON relation FOR EACH ROW
WHEN 
	NEW.uuid != OLD.uuid OR
	NEW.life_id != OLD.life_id OR
	NEW.relation_id != OLD.relation_id 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;
-- delete trigger for Relation
CREATE TRIGGER trg_log_relation_delete
AFTER DELETE ON relation FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

// ChangeLogTriggersForRelationApplicationSetting generates the triggers for the
// relation_application_setting table.
func ChangeLogTriggersForRelationApplicationSetting(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for RelationApplicationSetting
INSERT INTO change_log_namespace VALUES (%[2]d, 'relation_application_setting', 'RelationApplicationSetting changes based on %[1]s');

-- insert trigger for RelationApplicationSetting
CREATE TRIGGER trg_log_relation_application_setting_insert
AFTER INSERT ON relation_application_setting FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- update trigger for RelationApplicationSetting
CREATE TRIGGER trg_log_relation_application_setting_update
AFTER UPDATE ON relation_application_setting FOR EACH ROW
WHEN 
	NEW.relation_endpoint_uuid != OLD.relation_endpoint_uuid OR
	NEW.key != OLD.key OR
	(NEW.value != OLD.value OR (NEW.value IS NOT NULL AND OLD.value IS NULL) OR (NEW.value IS NULL AND OLD.value IS NOT NULL)) 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;
-- delete trigger for RelationApplicationSetting
CREATE TRIGGER trg_log_relation_application_setting_delete
AFTER DELETE ON relation_application_setting FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

// ChangeLogTriggersForRelationStatus generates the triggers for the
// relation_status table.
func ChangeLogTriggersForRelationStatus(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for RelationStatus
INSERT INTO change_log_namespace VALUES (%[2]d, 'relation_status', 'RelationStatus changes based on %[1]s');

-- insert trigger for RelationStatus
CREATE TRIGGER trg_log_relation_status_insert
AFTER INSERT ON relation_status FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- update trigger for RelationStatus
CREATE TRIGGER trg_log_relation_status_update
AFTER UPDATE ON relation_status FOR EACH ROW
WHEN 
	NEW.relation_uuid != OLD.relation_uuid OR
	NEW.relation_status_type_id != OLD.relation_status_type_id OR
	(NEW.suspended_reason != OLD.suspended_reason OR (NEW.suspended_reason IS NOT NULL AND OLD.suspended_reason IS NULL) OR (NEW.suspended_reason IS NULL AND OLD.suspended_reason IS NOT NULL)) OR
	NEW.updated_at != OLD.updated_at 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;
-- delete trigger for RelationStatus
CREATE TRIGGER trg_log_relation_status_delete
AFTER DELETE ON relation_status FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

