// Code generated by triggergen. DO NOT EDIT.

package triggers

import (
	"fmt"

	"github.com/juju/juju/core/database/schema"
)

// ChangeLogTriggersForRelationApplicationSetting generates the triggers for the
// relation_application_setting table.
func ChangeLogTriggersForRelationApplicationSetting(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- insert namespace for RelationApplicationSetting
INSERT INTO change_log_namespace VALUES (%[2]d, 'relation_application_setting', 'RelationApplicationSetting changes based on %[1]s');

-- insert trigger for RelationApplicationSetting
CREATE TRIGGER trg_log_relation_application_setting_insert
AFTER INSERT ON relation_application_setting FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- update trigger for RelationApplicationSetting
CREATE TRIGGER trg_log_relation_application_setting_update
AFTER UPDATE ON relation_application_setting FOR EACH ROW
WHEN 
	NEW.relation_endpoint_uuid != OLD.relation_endpoint_uuid OR
	NEW.key != OLD.key OR
	(NEW.value != OLD.value OR (NEW.value IS NOT NULL AND OLD.value IS NULL) OR (NEW.value IS NULL AND OLD.value IS NOT NULL)) 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;
-- delete trigger for RelationApplicationSetting
CREATE TRIGGER trg_log_relation_application_setting_delete
AFTER DELETE ON relation_application_setting FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}
