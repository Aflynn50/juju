// Code generated by triggergen. DO NOT EDIT.

package model

import (
	"fmt"

	"github.com/juju/juju/core/database/schema"
)


func ChangeLogTriggersForSecretMetadata(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- SecretMetadata for insert trigger
CREATE TRIGGER trg_log_secret_metadata_insert
AFTER INSERT ON secret_metadata FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- SecretMetadata for update trigger
CREATE TRIGGER trg_log_secret_metadata_update
AFTER UPDATE ON secret_metadata FOR EACH ROW
WHEN 
	NEW.version != OLD.version OR
	(NEW.description != OLD.description OR (NEW.description IS NOT NULL AND OLD.description IS NULL) OR (NEW.description IS NULL AND OLD.description IS NOT NULL)) OR
	NEW.rotate_policy_id != OLD.rotate_policy_id OR
	NEW.auto_prune != OLD.auto_prune OR
	NEW.create_time != OLD.create_time OR
	NEW.update_time != OLD.update_time 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;

-- SecretMetadata for delete trigger
CREATE TRIGGER trg_log_secret_metadata_delete
AFTER DELETE ON secret_metadata FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

func ChangeLogTriggersForSecretReference(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- SecretReference for insert trigger
CREATE TRIGGER trg_log_secret_reference_insert
AFTER INSERT ON secret_reference FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- SecretReference for update trigger
CREATE TRIGGER trg_log_secret_reference_update
AFTER UPDATE ON secret_reference FOR EACH ROW
WHEN 
	NEW.latest_revision != OLD.latest_revision 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;

-- SecretReference for delete trigger
CREATE TRIGGER trg_log_secret_reference_delete
AFTER DELETE ON secret_reference FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

func ChangeLogTriggersForSecretRevision(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- SecretRevision for insert trigger
CREATE TRIGGER trg_log_secret_revision_insert
AFTER INSERT ON secret_revision FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- SecretRevision for update trigger
CREATE TRIGGER trg_log_secret_revision_update
AFTER UPDATE ON secret_revision FOR EACH ROW
WHEN 
	NEW.secret_id != OLD.secret_id OR
	NEW.revision != OLD.revision OR
	NEW.create_time != OLD.create_time 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;

-- SecretRevision for delete trigger
CREATE TRIGGER trg_log_secret_revision_delete
AFTER DELETE ON secret_revision FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

func ChangeLogTriggersForSecretRevisionExpire(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- SecretRevisionExpire for insert trigger
CREATE TRIGGER trg_log_secret_revision_expire_insert
AFTER INSERT ON secret_revision_expire FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- SecretRevisionExpire for update trigger
CREATE TRIGGER trg_log_secret_revision_expire_update
AFTER UPDATE ON secret_revision_expire FOR EACH ROW
WHEN 
	NEW.expire_time != OLD.expire_time 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;

-- SecretRevisionExpire for delete trigger
CREATE TRIGGER trg_log_secret_revision_expire_delete
AFTER DELETE ON secret_revision_expire FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

func ChangeLogTriggersForSecretRevisionObsolete(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- SecretRevisionObsolete for insert trigger
CREATE TRIGGER trg_log_secret_revision_obsolete_insert
AFTER INSERT ON secret_revision_obsolete FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- SecretRevisionObsolete for update trigger
CREATE TRIGGER trg_log_secret_revision_obsolete_update
AFTER UPDATE ON secret_revision_obsolete FOR EACH ROW
WHEN 
	NEW.obsolete != OLD.obsolete OR
	NEW.pending_delete != OLD.pending_delete 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;

-- SecretRevisionObsolete for delete trigger
CREATE TRIGGER trg_log_secret_revision_obsolete_delete
AFTER DELETE ON secret_revision_obsolete FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

func ChangeLogTriggersForSecretRotation(columnName string, namespaceID int) func() schema.Patch {
	return func() schema.Patch {
		return schema.MakePatch(fmt.Sprintf(`
-- SecretRotation for insert trigger
CREATE TRIGGER trg_log_secret_rotation_insert
AFTER INSERT ON secret_rotation FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (1, %[2]d, NEW.%[1]s, DATETIME('now'));
END;

-- SecretRotation for update trigger
CREATE TRIGGER trg_log_secret_rotation_update
AFTER UPDATE ON secret_rotation FOR EACH ROW
WHEN 
	NEW.next_rotation_time != OLD.next_rotation_time 
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (2, %[2]d, OLD.%[1]s, DATETIME('now'));
END;

-- SecretRotation for delete trigger
CREATE TRIGGER trg_log_secret_rotation_delete
AFTER DELETE ON secret_rotation FOR EACH ROW
BEGIN
    INSERT INTO change_log (edit_type_id, namespace_id, changed, created_at)
    VALUES (4, %[2]d, OLD.%[1]s, DATETIME('now'));
END;`, columnName, namespaceID))
	}
}

