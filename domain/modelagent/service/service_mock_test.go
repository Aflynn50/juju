// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/modelagent/service (interfaces: State)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination service_mock_test.go github.com/juju/juju/domain/modelagent/service State
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	agentbinary "github.com/juju/juju/core/agentbinary"
	machine "github.com/juju/juju/core/machine"
	semversion "github.com/juju/juju/core/semversion"
	unit "github.com/juju/juju/core/unit"
	modelagent "github.com/juju/juju/domain/modelagent"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// GetMachineRunningAgentBinaryVersion mocks base method.
func (m *MockState) GetMachineRunningAgentBinaryVersion(arg0 context.Context, arg1 string) (agentbinary.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineRunningAgentBinaryVersion", arg0, arg1)
	ret0, _ := ret[0].(agentbinary.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineRunningAgentBinaryVersion indicates an expected call of GetMachineRunningAgentBinaryVersion.
func (mr *MockStateMockRecorder) GetMachineRunningAgentBinaryVersion(arg0, arg1 any) *MockStateGetMachineRunningAgentBinaryVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineRunningAgentBinaryVersion", reflect.TypeOf((*MockState)(nil).GetMachineRunningAgentBinaryVersion), arg0, arg1)
	return &MockStateGetMachineRunningAgentBinaryVersionCall{Call: call}
}

// MockStateGetMachineRunningAgentBinaryVersionCall wrap *gomock.Call
type MockStateGetMachineRunningAgentBinaryVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMachineRunningAgentBinaryVersionCall) Return(arg0 agentbinary.Version, arg1 error) *MockStateGetMachineRunningAgentBinaryVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMachineRunningAgentBinaryVersionCall) Do(f func(context.Context, string) (agentbinary.Version, error)) *MockStateGetMachineRunningAgentBinaryVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMachineRunningAgentBinaryVersionCall) DoAndReturn(f func(context.Context, string) (agentbinary.Version, error)) *MockStateGetMachineRunningAgentBinaryVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineTargetAgentVersion mocks base method.
func (m *MockState) GetMachineTargetAgentVersion(arg0 context.Context, arg1 string) (agentbinary.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineTargetAgentVersion", arg0, arg1)
	ret0, _ := ret[0].(agentbinary.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineTargetAgentVersion indicates an expected call of GetMachineTargetAgentVersion.
func (mr *MockStateMockRecorder) GetMachineTargetAgentVersion(arg0, arg1 any) *MockStateGetMachineTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineTargetAgentVersion", reflect.TypeOf((*MockState)(nil).GetMachineTargetAgentVersion), arg0, arg1)
	return &MockStateGetMachineTargetAgentVersionCall{Call: call}
}

// MockStateGetMachineTargetAgentVersionCall wrap *gomock.Call
type MockStateGetMachineTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMachineTargetAgentVersionCall) Return(arg0 agentbinary.Version, arg1 error) *MockStateGetMachineTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMachineTargetAgentVersionCall) Do(f func(context.Context, string) (agentbinary.Version, error)) *MockStateGetMachineTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMachineTargetAgentVersionCall) DoAndReturn(f func(context.Context, string) (agentbinary.Version, error)) *MockStateGetMachineTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachineUUIDByName mocks base method.
func (m *MockState) GetMachineUUIDByName(arg0 context.Context, arg1 machine.Name) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachineUUIDByName", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachineUUIDByName indicates an expected call of GetMachineUUIDByName.
func (mr *MockStateMockRecorder) GetMachineUUIDByName(arg0, arg1 any) *MockStateGetMachineUUIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachineUUIDByName", reflect.TypeOf((*MockState)(nil).GetMachineUUIDByName), arg0, arg1)
	return &MockStateGetMachineUUIDByNameCall{Call: call}
}

// MockStateGetMachineUUIDByNameCall wrap *gomock.Call
type MockStateGetMachineUUIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMachineUUIDByNameCall) Return(arg0 string, arg1 error) *MockStateGetMachineUUIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMachineUUIDByNameCall) Do(f func(context.Context, machine.Name) (string, error)) *MockStateGetMachineUUIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMachineUUIDByNameCall) DoAndReturn(f func(context.Context, machine.Name) (string, error)) *MockStateGetMachineUUIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachinesAgentBinaryMetadata mocks base method.
func (m *MockState) GetMachinesAgentBinaryMetadata(arg0 context.Context) (map[machine.Name]agentbinary.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachinesAgentBinaryMetadata", arg0)
	ret0, _ := ret[0].(map[machine.Name]agentbinary.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachinesAgentBinaryMetadata indicates an expected call of GetMachinesAgentBinaryMetadata.
func (mr *MockStateMockRecorder) GetMachinesAgentBinaryMetadata(arg0 any) *MockStateGetMachinesAgentBinaryMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachinesAgentBinaryMetadata", reflect.TypeOf((*MockState)(nil).GetMachinesAgentBinaryMetadata), arg0)
	return &MockStateGetMachinesAgentBinaryMetadataCall{Call: call}
}

// MockStateGetMachinesAgentBinaryMetadataCall wrap *gomock.Call
type MockStateGetMachinesAgentBinaryMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMachinesAgentBinaryMetadataCall) Return(arg0 map[machine.Name]agentbinary.Metadata, arg1 error) *MockStateGetMachinesAgentBinaryMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMachinesAgentBinaryMetadataCall) Do(f func(context.Context) (map[machine.Name]agentbinary.Metadata, error)) *MockStateGetMachinesAgentBinaryMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMachinesAgentBinaryMetadataCall) DoAndReturn(f func(context.Context) (map[machine.Name]agentbinary.Metadata, error)) *MockStateGetMachinesAgentBinaryMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetMachinesNotAtTargetAgentVersion mocks base method.
func (m *MockState) GetMachinesNotAtTargetAgentVersion(arg0 context.Context) ([]machine.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMachinesNotAtTargetAgentVersion", arg0)
	ret0, _ := ret[0].([]machine.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMachinesNotAtTargetAgentVersion indicates an expected call of GetMachinesNotAtTargetAgentVersion.
func (mr *MockStateMockRecorder) GetMachinesNotAtTargetAgentVersion(arg0 any) *MockStateGetMachinesNotAtTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMachinesNotAtTargetAgentVersion", reflect.TypeOf((*MockState)(nil).GetMachinesNotAtTargetAgentVersion), arg0)
	return &MockStateGetMachinesNotAtTargetAgentVersionCall{Call: call}
}

// MockStateGetMachinesNotAtTargetAgentVersionCall wrap *gomock.Call
type MockStateGetMachinesNotAtTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetMachinesNotAtTargetAgentVersionCall) Return(arg0 []machine.Name, arg1 error) *MockStateGetMachinesNotAtTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetMachinesNotAtTargetAgentVersionCall) Do(f func(context.Context) ([]machine.Name, error)) *MockStateGetMachinesNotAtTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetMachinesNotAtTargetAgentVersionCall) DoAndReturn(f func(context.Context) ([]machine.Name, error)) *MockStateGetMachinesNotAtTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelTargetAgentVersion mocks base method.
func (m *MockState) GetModelTargetAgentVersion(arg0 context.Context) (semversion.Number, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelTargetAgentVersion", arg0)
	ret0, _ := ret[0].(semversion.Number)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetModelTargetAgentVersion indicates an expected call of GetModelTargetAgentVersion.
func (mr *MockStateMockRecorder) GetModelTargetAgentVersion(arg0 any) *MockStateGetModelTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelTargetAgentVersion", reflect.TypeOf((*MockState)(nil).GetModelTargetAgentVersion), arg0)
	return &MockStateGetModelTargetAgentVersionCall{Call: call}
}

// MockStateGetModelTargetAgentVersionCall wrap *gomock.Call
type MockStateGetModelTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelTargetAgentVersionCall) Return(arg0 semversion.Number, arg1 error) *MockStateGetModelTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelTargetAgentVersionCall) Do(f func(context.Context) (semversion.Number, error)) *MockStateGetModelTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelTargetAgentVersionCall) DoAndReturn(f func(context.Context) (semversion.Number, error)) *MockStateGetModelTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitRunningAgentBinaryVersion mocks base method.
func (m *MockState) GetUnitRunningAgentBinaryVersion(arg0 context.Context, arg1 unit.UUID) (agentbinary.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitRunningAgentBinaryVersion", arg0, arg1)
	ret0, _ := ret[0].(agentbinary.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitRunningAgentBinaryVersion indicates an expected call of GetUnitRunningAgentBinaryVersion.
func (mr *MockStateMockRecorder) GetUnitRunningAgentBinaryVersion(arg0, arg1 any) *MockStateGetUnitRunningAgentBinaryVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitRunningAgentBinaryVersion", reflect.TypeOf((*MockState)(nil).GetUnitRunningAgentBinaryVersion), arg0, arg1)
	return &MockStateGetUnitRunningAgentBinaryVersionCall{Call: call}
}

// MockStateGetUnitRunningAgentBinaryVersionCall wrap *gomock.Call
type MockStateGetUnitRunningAgentBinaryVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitRunningAgentBinaryVersionCall) Return(arg0 agentbinary.Version, arg1 error) *MockStateGetUnitRunningAgentBinaryVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitRunningAgentBinaryVersionCall) Do(f func(context.Context, unit.UUID) (agentbinary.Version, error)) *MockStateGetUnitRunningAgentBinaryVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitRunningAgentBinaryVersionCall) DoAndReturn(f func(context.Context, unit.UUID) (agentbinary.Version, error)) *MockStateGetUnitRunningAgentBinaryVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitTargetAgentVersion mocks base method.
func (m *MockState) GetUnitTargetAgentVersion(arg0 context.Context, arg1 unit.UUID) (agentbinary.Version, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitTargetAgentVersion", arg0, arg1)
	ret0, _ := ret[0].(agentbinary.Version)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitTargetAgentVersion indicates an expected call of GetUnitTargetAgentVersion.
func (mr *MockStateMockRecorder) GetUnitTargetAgentVersion(arg0, arg1 any) *MockStateGetUnitTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitTargetAgentVersion", reflect.TypeOf((*MockState)(nil).GetUnitTargetAgentVersion), arg0, arg1)
	return &MockStateGetUnitTargetAgentVersionCall{Call: call}
}

// MockStateGetUnitTargetAgentVersionCall wrap *gomock.Call
type MockStateGetUnitTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitTargetAgentVersionCall) Return(arg0 agentbinary.Version, arg1 error) *MockStateGetUnitTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitTargetAgentVersionCall) Do(f func(context.Context, unit.UUID) (agentbinary.Version, error)) *MockStateGetUnitTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitTargetAgentVersionCall) DoAndReturn(f func(context.Context, unit.UUID) (agentbinary.Version, error)) *MockStateGetUnitTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUIDByName mocks base method.
func (m *MockState) GetUnitUUIDByName(arg0 context.Context, arg1 unit.Name) (unit.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUIDByName", arg0, arg1)
	ret0, _ := ret[0].(unit.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUIDByName indicates an expected call of GetUnitUUIDByName.
func (mr *MockStateMockRecorder) GetUnitUUIDByName(arg0, arg1 any) *MockStateGetUnitUUIDByNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUIDByName", reflect.TypeOf((*MockState)(nil).GetUnitUUIDByName), arg0, arg1)
	return &MockStateGetUnitUUIDByNameCall{Call: call}
}

// MockStateGetUnitUUIDByNameCall wrap *gomock.Call
type MockStateGetUnitUUIDByNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitUUIDByNameCall) Return(arg0 unit.UUID, arg1 error) *MockStateGetUnitUUIDByNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitUUIDByNameCall) Do(f func(context.Context, unit.Name) (unit.UUID, error)) *MockStateGetUnitUUIDByNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitUUIDByNameCall) DoAndReturn(f func(context.Context, unit.Name) (unit.UUID, error)) *MockStateGetUnitUUIDByNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitsAgentBinaryMetadata mocks base method.
func (m *MockState) GetUnitsAgentBinaryMetadata(arg0 context.Context) (map[unit.Name]agentbinary.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitsAgentBinaryMetadata", arg0)
	ret0, _ := ret[0].(map[unit.Name]agentbinary.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitsAgentBinaryMetadata indicates an expected call of GetUnitsAgentBinaryMetadata.
func (mr *MockStateMockRecorder) GetUnitsAgentBinaryMetadata(arg0 any) *MockStateGetUnitsAgentBinaryMetadataCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitsAgentBinaryMetadata", reflect.TypeOf((*MockState)(nil).GetUnitsAgentBinaryMetadata), arg0)
	return &MockStateGetUnitsAgentBinaryMetadataCall{Call: call}
}

// MockStateGetUnitsAgentBinaryMetadataCall wrap *gomock.Call
type MockStateGetUnitsAgentBinaryMetadataCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitsAgentBinaryMetadataCall) Return(arg0 map[unit.Name]agentbinary.Metadata, arg1 error) *MockStateGetUnitsAgentBinaryMetadataCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitsAgentBinaryMetadataCall) Do(f func(context.Context) (map[unit.Name]agentbinary.Metadata, error)) *MockStateGetUnitsAgentBinaryMetadataCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitsAgentBinaryMetadataCall) DoAndReturn(f func(context.Context) (map[unit.Name]agentbinary.Metadata, error)) *MockStateGetUnitsAgentBinaryMetadataCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitsNotAtTargetAgentVersion mocks base method.
func (m *MockState) GetUnitsNotAtTargetAgentVersion(arg0 context.Context) ([]unit.Name, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitsNotAtTargetAgentVersion", arg0)
	ret0, _ := ret[0].([]unit.Name)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitsNotAtTargetAgentVersion indicates an expected call of GetUnitsNotAtTargetAgentVersion.
func (mr *MockStateMockRecorder) GetUnitsNotAtTargetAgentVersion(arg0 any) *MockStateGetUnitsNotAtTargetAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitsNotAtTargetAgentVersion", reflect.TypeOf((*MockState)(nil).GetUnitsNotAtTargetAgentVersion), arg0)
	return &MockStateGetUnitsNotAtTargetAgentVersionCall{Call: call}
}

// MockStateGetUnitsNotAtTargetAgentVersionCall wrap *gomock.Call
type MockStateGetUnitsNotAtTargetAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitsNotAtTargetAgentVersionCall) Return(arg0 []unit.Name, arg1 error) *MockStateGetUnitsNotAtTargetAgentVersionCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitsNotAtTargetAgentVersionCall) Do(f func(context.Context) ([]unit.Name, error)) *MockStateGetUnitsNotAtTargetAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitsNotAtTargetAgentVersionCall) DoAndReturn(f func(context.Context) ([]unit.Name, error)) *MockStateGetUnitsNotAtTargetAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForWatchAgentVersion mocks base method.
func (m *MockState) NamespaceForWatchAgentVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForWatchAgentVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceForWatchAgentVersion indicates an expected call of NamespaceForWatchAgentVersion.
func (mr *MockStateMockRecorder) NamespaceForWatchAgentVersion() *MockStateNamespaceForWatchAgentVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForWatchAgentVersion", reflect.TypeOf((*MockState)(nil).NamespaceForWatchAgentVersion))
	return &MockStateNamespaceForWatchAgentVersionCall{Call: call}
}

// MockStateNamespaceForWatchAgentVersionCall wrap *gomock.Call
type MockStateNamespaceForWatchAgentVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNamespaceForWatchAgentVersionCall) Return(arg0 string) *MockStateNamespaceForWatchAgentVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNamespaceForWatchAgentVersionCall) Do(f func() string) *MockStateNamespaceForWatchAgentVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNamespaceForWatchAgentVersionCall) DoAndReturn(f func() string) *MockStateNamespaceForWatchAgentVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetMachineRunningAgentBinaryVersion mocks base method.
func (m *MockState) SetMachineRunningAgentBinaryVersion(arg0 context.Context, arg1 string, arg2 agentbinary.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetMachineRunningAgentBinaryVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetMachineRunningAgentBinaryVersion indicates an expected call of SetMachineRunningAgentBinaryVersion.
func (mr *MockStateMockRecorder) SetMachineRunningAgentBinaryVersion(arg0, arg1, arg2 any) *MockStateSetMachineRunningAgentBinaryVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetMachineRunningAgentBinaryVersion", reflect.TypeOf((*MockState)(nil).SetMachineRunningAgentBinaryVersion), arg0, arg1, arg2)
	return &MockStateSetMachineRunningAgentBinaryVersionCall{Call: call}
}

// MockStateSetMachineRunningAgentBinaryVersionCall wrap *gomock.Call
type MockStateSetMachineRunningAgentBinaryVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetMachineRunningAgentBinaryVersionCall) Return(arg0 error) *MockStateSetMachineRunningAgentBinaryVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetMachineRunningAgentBinaryVersionCall) Do(f func(context.Context, string, agentbinary.Version) error) *MockStateSetMachineRunningAgentBinaryVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetMachineRunningAgentBinaryVersionCall) DoAndReturn(f func(context.Context, string, agentbinary.Version) error) *MockStateSetMachineRunningAgentBinaryVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetModelAgentStream mocks base method.
func (m *MockState) SetModelAgentStream(arg0 context.Context, arg1 modelagent.AgentStream) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModelAgentStream", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModelAgentStream indicates an expected call of SetModelAgentStream.
func (mr *MockStateMockRecorder) SetModelAgentStream(arg0, arg1 any) *MockStateSetModelAgentStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModelAgentStream", reflect.TypeOf((*MockState)(nil).SetModelAgentStream), arg0, arg1)
	return &MockStateSetModelAgentStreamCall{Call: call}
}

// MockStateSetModelAgentStreamCall wrap *gomock.Call
type MockStateSetModelAgentStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetModelAgentStreamCall) Return(arg0 error) *MockStateSetModelAgentStreamCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetModelAgentStreamCall) Do(f func(context.Context, modelagent.AgentStream) error) *MockStateSetModelAgentStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetModelAgentStreamCall) DoAndReturn(f func(context.Context, modelagent.AgentStream) error) *MockStateSetModelAgentStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetUnitRunningAgentBinaryVersion mocks base method.
func (m *MockState) SetUnitRunningAgentBinaryVersion(arg0 context.Context, arg1 unit.UUID, arg2 agentbinary.Version) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUnitRunningAgentBinaryVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUnitRunningAgentBinaryVersion indicates an expected call of SetUnitRunningAgentBinaryVersion.
func (mr *MockStateMockRecorder) SetUnitRunningAgentBinaryVersion(arg0, arg1, arg2 any) *MockStateSetUnitRunningAgentBinaryVersionCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUnitRunningAgentBinaryVersion", reflect.TypeOf((*MockState)(nil).SetUnitRunningAgentBinaryVersion), arg0, arg1, arg2)
	return &MockStateSetUnitRunningAgentBinaryVersionCall{Call: call}
}

// MockStateSetUnitRunningAgentBinaryVersionCall wrap *gomock.Call
type MockStateSetUnitRunningAgentBinaryVersionCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetUnitRunningAgentBinaryVersionCall) Return(arg0 error) *MockStateSetUnitRunningAgentBinaryVersionCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetUnitRunningAgentBinaryVersionCall) Do(f func(context.Context, unit.UUID, agentbinary.Version) error) *MockStateSetUnitRunningAgentBinaryVersionCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetUnitRunningAgentBinaryVersionCall) DoAndReturn(f func(context.Context, unit.UUID, agentbinary.Version) error) *MockStateSetUnitRunningAgentBinaryVersionCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
