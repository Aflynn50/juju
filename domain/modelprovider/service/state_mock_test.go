// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/modelprovider/service (interfaces: State,ProviderWithSecretToken)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination state_mock_test.go github.com/juju/juju/domain/modelprovider/service State,ProviderWithSecretToken
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	cloud "github.com/juju/juju/cloud"
	model "github.com/juju/juju/core/model"
	modelprovider "github.com/juju/juju/domain/modelprovider"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// GetModelCloudAndCredential mocks base method.
func (m *MockState) GetModelCloudAndCredential(arg0 context.Context, arg1 model.UUID) (*cloud.Cloud, string, *modelprovider.CloudCredentialInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelCloudAndCredential", arg0, arg1)
	ret0, _ := ret[0].(*cloud.Cloud)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(*modelprovider.CloudCredentialInfo)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetModelCloudAndCredential indicates an expected call of GetModelCloudAndCredential.
func (mr *MockStateMockRecorder) GetModelCloudAndCredential(arg0, arg1 any) *MockStateGetModelCloudAndCredentialCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelCloudAndCredential", reflect.TypeOf((*MockState)(nil).GetModelCloudAndCredential), arg0, arg1)
	return &MockStateGetModelCloudAndCredentialCall{Call: call}
}

// MockStateGetModelCloudAndCredentialCall wrap *gomock.Call
type MockStateGetModelCloudAndCredentialCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelCloudAndCredentialCall) Return(arg0 *cloud.Cloud, arg1 string, arg2 *modelprovider.CloudCredentialInfo, arg3 error) *MockStateGetModelCloudAndCredentialCall {
	c.Call = c.Call.Return(arg0, arg1, arg2, arg3)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelCloudAndCredentialCall) Do(f func(context.Context, model.UUID) (*cloud.Cloud, string, *modelprovider.CloudCredentialInfo, error)) *MockStateGetModelCloudAndCredentialCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelCloudAndCredentialCall) DoAndReturn(f func(context.Context, model.UUID) (*cloud.Cloud, string, *modelprovider.CloudCredentialInfo, error)) *MockStateGetModelCloudAndCredentialCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockProviderWithSecretToken is a mock of ProviderWithSecretToken interface.
type MockProviderWithSecretToken struct {
	ctrl     *gomock.Controller
	recorder *MockProviderWithSecretTokenMockRecorder
}

// MockProviderWithSecretTokenMockRecorder is the mock recorder for MockProviderWithSecretToken.
type MockProviderWithSecretTokenMockRecorder struct {
	mock *MockProviderWithSecretToken
}

// NewMockProviderWithSecretToken creates a new mock instance.
func NewMockProviderWithSecretToken(ctrl *gomock.Controller) *MockProviderWithSecretToken {
	mock := &MockProviderWithSecretToken{ctrl: ctrl}
	mock.recorder = &MockProviderWithSecretTokenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProviderWithSecretToken) EXPECT() *MockProviderWithSecretTokenMockRecorder {
	return m.recorder
}

// GetSecretToken mocks base method.
func (m *MockProviderWithSecretToken) GetSecretToken(arg0 context.Context, arg1 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretToken", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretToken indicates an expected call of GetSecretToken.
func (mr *MockProviderWithSecretTokenMockRecorder) GetSecretToken(arg0, arg1 any) *MockProviderWithSecretTokenGetSecretTokenCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretToken", reflect.TypeOf((*MockProviderWithSecretToken)(nil).GetSecretToken), arg0, arg1)
	return &MockProviderWithSecretTokenGetSecretTokenCall{Call: call}
}

// MockProviderWithSecretTokenGetSecretTokenCall wrap *gomock.Call
type MockProviderWithSecretTokenGetSecretTokenCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockProviderWithSecretTokenGetSecretTokenCall) Return(arg0 string, arg1 error) *MockProviderWithSecretTokenGetSecretTokenCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockProviderWithSecretTokenGetSecretTokenCall) Do(f func(context.Context, string) (string, error)) *MockProviderWithSecretTokenGetSecretTokenCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockProviderWithSecretTokenGetSecretTokenCall) DoAndReturn(f func(context.Context, string) (string, error)) *MockProviderWithSecretTokenGetSecretTokenCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
