// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/keys/service (interfaces: State)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination state_mock_test.go github.com/juju/juju/domain/keys/service State
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	user "github.com/juju/juju/core/user"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// AddAuthorisedKeysForUser mocks base method.
func (m *MockState) AddAuthorisedKeysForUser(arg0 context.Context, arg1 user.UUID, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddAuthorisedKeysForUser", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddAuthorisedKeysForUser indicates an expected call of AddAuthorisedKeysForUser.
func (mr *MockStateMockRecorder) AddAuthorisedKeysForUser(arg0, arg1 any, arg2 ...any) *MockStateAddAuthorisedKeysForUserCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddAuthorisedKeysForUser", reflect.TypeOf((*MockState)(nil).AddAuthorisedKeysForUser), varargs...)
	return &MockStateAddAuthorisedKeysForUserCall{Call: call}
}

// MockStateAddAuthorisedKeysForUserCall wrap *gomock.Call
type MockStateAddAuthorisedKeysForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAddAuthorisedKeysForUserCall) Return(arg0 error) *MockStateAddAuthorisedKeysForUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAddAuthorisedKeysForUserCall) Do(f func(context.Context, user.UUID, ...string) error) *MockStateAddAuthorisedKeysForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAddAuthorisedKeysForUserCall) DoAndReturn(f func(context.Context, user.UUID, ...string) error) *MockStateAddAuthorisedKeysForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// DeleteAuthorisedKeysForUser mocks base method.
func (m *MockState) DeleteAuthorisedKeysForUser(arg0 context.Context, arg1 user.UUID, arg2 ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAuthorisedKeysForUser", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAuthorisedKeysForUser indicates an expected call of DeleteAuthorisedKeysForUser.
func (mr *MockStateMockRecorder) DeleteAuthorisedKeysForUser(arg0, arg1 any, arg2 ...any) *MockStateDeleteAuthorisedKeysForUserCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0, arg1}, arg2...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAuthorisedKeysForUser", reflect.TypeOf((*MockState)(nil).DeleteAuthorisedKeysForUser), varargs...)
	return &MockStateDeleteAuthorisedKeysForUserCall{Call: call}
}

// MockStateDeleteAuthorisedKeysForUserCall wrap *gomock.Call
type MockStateDeleteAuthorisedKeysForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateDeleteAuthorisedKeysForUserCall) Return(arg0 error) *MockStateDeleteAuthorisedKeysForUserCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateDeleteAuthorisedKeysForUserCall) Do(f func(context.Context, user.UUID, ...string) error) *MockStateDeleteAuthorisedKeysForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateDeleteAuthorisedKeysForUserCall) DoAndReturn(f func(context.Context, user.UUID, ...string) error) *MockStateDeleteAuthorisedKeysForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAuthorisedKeysForUser mocks base method.
func (m *MockState) GetAuthorisedKeysForUser(arg0 context.Context, arg1 user.UUID) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAuthorisedKeysForUser", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAuthorisedKeysForUser indicates an expected call of GetAuthorisedKeysForUser.
func (mr *MockStateMockRecorder) GetAuthorisedKeysForUser(arg0, arg1 any) *MockStateGetAuthorisedKeysForUserCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAuthorisedKeysForUser", reflect.TypeOf((*MockState)(nil).GetAuthorisedKeysForUser), arg0, arg1)
	return &MockStateGetAuthorisedKeysForUserCall{Call: call}
}

// MockStateGetAuthorisedKeysForUserCall wrap *gomock.Call
type MockStateGetAuthorisedKeysForUserCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAuthorisedKeysForUserCall) Return(arg0 []string, arg1 error) *MockStateGetAuthorisedKeysForUserCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAuthorisedKeysForUserCall) Do(f func(context.Context, user.UUID) ([]string, error)) *MockStateGetAuthorisedKeysForUserCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAuthorisedKeysForUserCall) DoAndReturn(f func(context.Context, user.UUID) ([]string, error)) *MockStateGetAuthorisedKeysForUserCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
