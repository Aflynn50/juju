// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/modeldefaults/service (interfaces: State)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination service_mock_test.go github.com/juju/juju/domain/modeldefaults/service State
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	model "github.com/juju/juju/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// ConfigDefaults mocks base method.
func (m *MockState) ConfigDefaults(arg0 context.Context) map[string]any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigDefaults", arg0)
	ret0, _ := ret[0].(map[string]any)
	return ret0
}

// ConfigDefaults indicates an expected call of ConfigDefaults.
func (mr *MockStateMockRecorder) ConfigDefaults(arg0 any) *MockStateConfigDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigDefaults", reflect.TypeOf((*MockState)(nil).ConfigDefaults), arg0)
	return &MockStateConfigDefaultsCall{Call: call}
}

// MockStateConfigDefaultsCall wrap *gomock.Call
type MockStateConfigDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateConfigDefaultsCall) Return(arg0 map[string]any) *MockStateConfigDefaultsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateConfigDefaultsCall) Do(f func(context.Context) map[string]any) *MockStateConfigDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateConfigDefaultsCall) DoAndReturn(f func(context.Context) map[string]any) *MockStateConfigDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelCloudDefaults mocks base method.
func (m *MockState) ModelCloudDefaults(arg0 context.Context, arg1 model.UUID) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelCloudDefaults", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelCloudDefaults indicates an expected call of ModelCloudDefaults.
func (mr *MockStateMockRecorder) ModelCloudDefaults(arg0, arg1 any) *MockStateModelCloudDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelCloudDefaults", reflect.TypeOf((*MockState)(nil).ModelCloudDefaults), arg0, arg1)
	return &MockStateModelCloudDefaultsCall{Call: call}
}

// MockStateModelCloudDefaultsCall wrap *gomock.Call
type MockStateModelCloudDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateModelCloudDefaultsCall) Return(arg0 map[string]string, arg1 error) *MockStateModelCloudDefaultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateModelCloudDefaultsCall) Do(f func(context.Context, model.UUID) (map[string]string, error)) *MockStateModelCloudDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateModelCloudDefaultsCall) DoAndReturn(f func(context.Context, model.UUID) (map[string]string, error)) *MockStateModelCloudDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelCloudRegionDefaults mocks base method.
func (m *MockState) ModelCloudRegionDefaults(arg0 context.Context, arg1 model.UUID) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelCloudRegionDefaults", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelCloudRegionDefaults indicates an expected call of ModelCloudRegionDefaults.
func (mr *MockStateMockRecorder) ModelCloudRegionDefaults(arg0, arg1 any) *MockStateModelCloudRegionDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelCloudRegionDefaults", reflect.TypeOf((*MockState)(nil).ModelCloudRegionDefaults), arg0, arg1)
	return &MockStateModelCloudRegionDefaultsCall{Call: call}
}

// MockStateModelCloudRegionDefaultsCall wrap *gomock.Call
type MockStateModelCloudRegionDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateModelCloudRegionDefaultsCall) Return(arg0 map[string]string, arg1 error) *MockStateModelCloudRegionDefaultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateModelCloudRegionDefaultsCall) Do(f func(context.Context, model.UUID) (map[string]string, error)) *MockStateModelCloudRegionDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateModelCloudRegionDefaultsCall) DoAndReturn(f func(context.Context, model.UUID) (map[string]string, error)) *MockStateModelCloudRegionDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelCloudType mocks base method.
func (m *MockState) ModelCloudType(arg0 context.Context, arg1 model.UUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelCloudType", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelCloudType indicates an expected call of ModelCloudType.
func (mr *MockStateMockRecorder) ModelCloudType(arg0, arg1 any) *MockStateModelCloudTypeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelCloudType", reflect.TypeOf((*MockState)(nil).ModelCloudType), arg0, arg1)
	return &MockStateModelCloudTypeCall{Call: call}
}

// MockStateModelCloudTypeCall wrap *gomock.Call
type MockStateModelCloudTypeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateModelCloudTypeCall) Return(arg0 string, arg1 error) *MockStateModelCloudTypeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateModelCloudTypeCall) Do(f func(context.Context, model.UUID) (string, error)) *MockStateModelCloudTypeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateModelCloudTypeCall) DoAndReturn(f func(context.Context, model.UUID) (string, error)) *MockStateModelCloudTypeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelMetadataDefaults mocks base method.
func (m *MockState) ModelMetadataDefaults(arg0 context.Context, arg1 model.UUID) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelMetadataDefaults", arg0, arg1)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelMetadataDefaults indicates an expected call of ModelMetadataDefaults.
func (mr *MockStateMockRecorder) ModelMetadataDefaults(arg0, arg1 any) *MockStateModelMetadataDefaultsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelMetadataDefaults", reflect.TypeOf((*MockState)(nil).ModelMetadataDefaults), arg0, arg1)
	return &MockStateModelMetadataDefaultsCall{Call: call}
}

// MockStateModelMetadataDefaultsCall wrap *gomock.Call
type MockStateModelMetadataDefaultsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateModelMetadataDefaultsCall) Return(arg0 map[string]string, arg1 error) *MockStateModelMetadataDefaultsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateModelMetadataDefaultsCall) Do(f func(context.Context, model.UUID) (map[string]string, error)) *MockStateModelMetadataDefaultsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateModelMetadataDefaultsCall) DoAndReturn(f func(context.Context, model.UUID) (map[string]string, error)) *MockStateModelMetadataDefaultsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
