// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/modelconfig/service (interfaces: State)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination service_mock_test.go github.com/juju/juju/domain/modelconfig/service State
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// AllKeysQuery mocks base method.
func (m *MockState) AllKeysQuery() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllKeysQuery")
	ret0, _ := ret[0].(string)
	return ret0
}

// AllKeysQuery indicates an expected call of AllKeysQuery.
func (mr *MockStateMockRecorder) AllKeysQuery() *MockStateAllKeysQueryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllKeysQuery", reflect.TypeOf((*MockState)(nil).AllKeysQuery))
	return &MockStateAllKeysQueryCall{Call: call}
}

// MockStateAllKeysQueryCall wrap *gomock.Call
type MockStateAllKeysQueryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAllKeysQueryCall) Return(arg0 string) *MockStateAllKeysQueryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAllKeysQueryCall) Do(f func() string) *MockStateAllKeysQueryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAllKeysQueryCall) DoAndReturn(f func() string) *MockStateAllKeysQueryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetModelAgentVersionAndStream mocks base method.
func (m *MockState) GetModelAgentVersionAndStream(arg0 context.Context) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelAgentVersionAndStream", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetModelAgentVersionAndStream indicates an expected call of GetModelAgentVersionAndStream.
func (mr *MockStateMockRecorder) GetModelAgentVersionAndStream(arg0 any) *MockStateGetModelAgentVersionAndStreamCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelAgentVersionAndStream", reflect.TypeOf((*MockState)(nil).GetModelAgentVersionAndStream), arg0)
	return &MockStateGetModelAgentVersionAndStreamCall{Call: call}
}

// MockStateGetModelAgentVersionAndStreamCall wrap *gomock.Call
type MockStateGetModelAgentVersionAndStreamCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetModelAgentVersionAndStreamCall) Return(arg0, arg1 string, arg2 error) *MockStateGetModelAgentVersionAndStreamCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetModelAgentVersionAndStreamCall) Do(f func(context.Context) (string, string, error)) *MockStateGetModelAgentVersionAndStreamCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetModelAgentVersionAndStreamCall) DoAndReturn(f func(context.Context) (string, string, error)) *MockStateGetModelAgentVersionAndStreamCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelConfig mocks base method.
func (m *MockState) ModelConfig(arg0 context.Context) (map[string]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfig", arg0)
	ret0, _ := ret[0].(map[string]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfig indicates an expected call of ModelConfig.
func (mr *MockStateMockRecorder) ModelConfig(arg0 any) *MockStateModelConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfig", reflect.TypeOf((*MockState)(nil).ModelConfig), arg0)
	return &MockStateModelConfigCall{Call: call}
}

// MockStateModelConfigCall wrap *gomock.Call
type MockStateModelConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateModelConfigCall) Return(arg0 map[string]string, arg1 error) *MockStateModelConfigCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateModelConfigCall) Do(f func(context.Context) (map[string]string, error)) *MockStateModelConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateModelConfigCall) DoAndReturn(f func(context.Context) (map[string]string, error)) *MockStateModelConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ModelConfigHasAttributes mocks base method.
func (m *MockState) ModelConfigHasAttributes(arg0 context.Context, arg1 []string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModelConfigHasAttributes", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModelConfigHasAttributes indicates an expected call of ModelConfigHasAttributes.
func (mr *MockStateMockRecorder) ModelConfigHasAttributes(arg0, arg1 any) *MockStateModelConfigHasAttributesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModelConfigHasAttributes", reflect.TypeOf((*MockState)(nil).ModelConfigHasAttributes), arg0, arg1)
	return &MockStateModelConfigHasAttributesCall{Call: call}
}

// MockStateModelConfigHasAttributesCall wrap *gomock.Call
type MockStateModelConfigHasAttributesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateModelConfigHasAttributesCall) Return(arg0 []string, arg1 error) *MockStateModelConfigHasAttributesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateModelConfigHasAttributesCall) Do(f func(context.Context, []string) ([]string, error)) *MockStateModelConfigHasAttributesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateModelConfigHasAttributesCall) DoAndReturn(f func(context.Context, []string) ([]string, error)) *MockStateModelConfigHasAttributesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// NamespaceForWatchModelConfig mocks base method.
func (m *MockState) NamespaceForWatchModelConfig() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NamespaceForWatchModelConfig")
	ret0, _ := ret[0].(string)
	return ret0
}

// NamespaceForWatchModelConfig indicates an expected call of NamespaceForWatchModelConfig.
func (mr *MockStateMockRecorder) NamespaceForWatchModelConfig() *MockStateNamespaceForWatchModelConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamespaceForWatchModelConfig", reflect.TypeOf((*MockState)(nil).NamespaceForWatchModelConfig))
	return &MockStateNamespaceForWatchModelConfigCall{Call: call}
}

// MockStateNamespaceForWatchModelConfigCall wrap *gomock.Call
type MockStateNamespaceForWatchModelConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateNamespaceForWatchModelConfigCall) Return(arg0 string) *MockStateNamespaceForWatchModelConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateNamespaceForWatchModelConfigCall) Do(f func() string) *MockStateNamespaceForWatchModelConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateNamespaceForWatchModelConfigCall) DoAndReturn(f func() string) *MockStateNamespaceForWatchModelConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SetModelConfig mocks base method.
func (m *MockState) SetModelConfig(arg0 context.Context, arg1 map[string]string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetModelConfig", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetModelConfig indicates an expected call of SetModelConfig.
func (mr *MockStateMockRecorder) SetModelConfig(arg0, arg1 any) *MockStateSetModelConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetModelConfig", reflect.TypeOf((*MockState)(nil).SetModelConfig), arg0, arg1)
	return &MockStateSetModelConfigCall{Call: call}
}

// MockStateSetModelConfigCall wrap *gomock.Call
type MockStateSetModelConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSetModelConfigCall) Return(arg0 error) *MockStateSetModelConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSetModelConfigCall) Do(f func(context.Context, map[string]string) error) *MockStateSetModelConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSetModelConfigCall) DoAndReturn(f func(context.Context, map[string]string) error) *MockStateSetModelConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SpaceExists mocks base method.
func (m *MockState) SpaceExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SpaceExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SpaceExists indicates an expected call of SpaceExists.
func (mr *MockStateMockRecorder) SpaceExists(arg0, arg1 any) *MockStateSpaceExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SpaceExists", reflect.TypeOf((*MockState)(nil).SpaceExists), arg0, arg1)
	return &MockStateSpaceExistsCall{Call: call}
}

// MockStateSpaceExistsCall wrap *gomock.Call
type MockStateSpaceExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateSpaceExistsCall) Return(arg0 bool, arg1 error) *MockStateSpaceExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateSpaceExistsCall) Do(f func(context.Context, string) (bool, error)) *MockStateSpaceExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateSpaceExistsCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockStateSpaceExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateModelConfig mocks base method.
func (m *MockState) UpdateModelConfig(arg0 context.Context, arg1 map[string]string, arg2 []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateModelConfig", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateModelConfig indicates an expected call of UpdateModelConfig.
func (mr *MockStateMockRecorder) UpdateModelConfig(arg0, arg1, arg2 any) *MockStateUpdateModelConfigCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateModelConfig", reflect.TypeOf((*MockState)(nil).UpdateModelConfig), arg0, arg1, arg2)
	return &MockStateUpdateModelConfigCall{Call: call}
}

// MockStateUpdateModelConfigCall wrap *gomock.Call
type MockStateUpdateModelConfigCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUpdateModelConfigCall) Return(arg0 error) *MockStateUpdateModelConfigCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUpdateModelConfigCall) Do(f func(context.Context, map[string]string, []string) error) *MockStateUpdateModelConfigCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUpdateModelConfigCall) DoAndReturn(f func(context.Context, map[string]string, []string) error) *MockStateUpdateModelConfigCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
