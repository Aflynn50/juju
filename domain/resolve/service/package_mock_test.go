// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/resolve/service (interfaces: State)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go github.com/juju/juju/domain/resolve/service State
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	unit "github.com/juju/juju/core/unit"
	resolve "github.com/juju/juju/domain/resolve"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// ClearResolved mocks base method.
func (m *MockState) ClearResolved(arg0 context.Context, arg1 unit.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearResolved", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearResolved indicates an expected call of ClearResolved.
func (mr *MockStateMockRecorder) ClearResolved(arg0, arg1 any) *MockStateClearResolvedCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearResolved", reflect.TypeOf((*MockState)(nil).ClearResolved), arg0, arg1)
	return &MockStateClearResolvedCall{Call: call}
}

// MockStateClearResolvedCall wrap *gomock.Call
type MockStateClearResolvedCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateClearResolvedCall) Return(arg0 error) *MockStateClearResolvedCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateClearResolvedCall) Do(f func(context.Context, unit.UUID) error) *MockStateClearResolvedCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateClearResolvedCall) DoAndReturn(f func(context.Context, unit.UUID) error) *MockStateClearResolvedCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetUnitUUID mocks base method.
func (m *MockState) GetUnitUUID(arg0 context.Context, arg1 unit.Name) (unit.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnitUUID", arg0, arg1)
	ret0, _ := ret[0].(unit.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUnitUUID indicates an expected call of GetUnitUUID.
func (mr *MockStateMockRecorder) GetUnitUUID(arg0, arg1 any) *MockStateGetUnitUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnitUUID", reflect.TypeOf((*MockState)(nil).GetUnitUUID), arg0, arg1)
	return &MockStateGetUnitUUIDCall{Call: call}
}

// MockStateGetUnitUUIDCall wrap *gomock.Call
type MockStateGetUnitUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetUnitUUIDCall) Return(arg0 unit.UUID, arg1 error) *MockStateGetUnitUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetUnitUUIDCall) Do(f func(context.Context, unit.Name) (unit.UUID, error)) *MockStateGetUnitUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetUnitUUIDCall) DoAndReturn(f func(context.Context, unit.Name) (unit.UUID, error)) *MockStateGetUnitUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResolveAllUnits mocks base method.
func (m *MockState) ResolveAllUnits(arg0 context.Context, arg1 resolve.ResolveMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveAllUnits", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveAllUnits indicates an expected call of ResolveAllUnits.
func (mr *MockStateMockRecorder) ResolveAllUnits(arg0, arg1 any) *MockStateResolveAllUnitsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveAllUnits", reflect.TypeOf((*MockState)(nil).ResolveAllUnits), arg0, arg1)
	return &MockStateResolveAllUnitsCall{Call: call}
}

// MockStateResolveAllUnitsCall wrap *gomock.Call
type MockStateResolveAllUnitsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateResolveAllUnitsCall) Return(arg0 error) *MockStateResolveAllUnitsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateResolveAllUnitsCall) Do(f func(context.Context, resolve.ResolveMode) error) *MockStateResolveAllUnitsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateResolveAllUnitsCall) DoAndReturn(f func(context.Context, resolve.ResolveMode) error) *MockStateResolveAllUnitsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ResolveUnit mocks base method.
func (m *MockState) ResolveUnit(arg0 context.Context, arg1 unit.UUID, arg2 resolve.ResolveMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResolveUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ResolveUnit indicates an expected call of ResolveUnit.
func (mr *MockStateMockRecorder) ResolveUnit(arg0, arg1, arg2 any) *MockStateResolveUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResolveUnit", reflect.TypeOf((*MockState)(nil).ResolveUnit), arg0, arg1, arg2)
	return &MockStateResolveUnitCall{Call: call}
}

// MockStateResolveUnitCall wrap *gomock.Call
type MockStateResolveUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateResolveUnitCall) Return(arg0 error) *MockStateResolveUnitCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateResolveUnitCall) Do(f func(context.Context, unit.UUID, resolve.ResolveMode) error) *MockStateResolveUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateResolveUnitCall) DoAndReturn(f func(context.Context, unit.UUID, resolve.ResolveMode) error) *MockStateResolveUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UnitResolveMode mocks base method.
func (m *MockState) UnitResolveMode(arg0 context.Context, arg1 unit.UUID) (resolve.ResolveMode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnitResolveMode", arg0, arg1)
	ret0, _ := ret[0].(resolve.ResolveMode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnitResolveMode indicates an expected call of UnitResolveMode.
func (mr *MockStateMockRecorder) UnitResolveMode(arg0, arg1 any) *MockStateUnitResolveModeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnitResolveMode", reflect.TypeOf((*MockState)(nil).UnitResolveMode), arg0, arg1)
	return &MockStateUnitResolveModeCall{Call: call}
}

// MockStateUnitResolveModeCall wrap *gomock.Call
type MockStateUnitResolveModeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateUnitResolveModeCall) Return(arg0 resolve.ResolveMode, arg1 error) *MockStateUnitResolveModeCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateUnitResolveModeCall) Do(f func(context.Context, unit.UUID) (resolve.ResolveMode, error)) *MockStateUnitResolveModeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateUnitResolveModeCall) DoAndReturn(f func(context.Context, unit.UUID) (resolve.ResolveMode, error)) *MockStateUnitResolveModeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
