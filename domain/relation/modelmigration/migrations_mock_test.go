// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/relation/modelmigration (interfaces: Coordinator,ImportService,ExportService)
//
// Generated by this command:
//
//	mockgen -typed -package modelmigration -destination migrations_mock_test.go github.com/juju/juju/domain/relation/modelmigration Coordinator,ImportService,ExportService
//

// Package modelmigration is a generated GoMock package.
package modelmigration

import (
	context "context"
	reflect "reflect"

	modelmigration "github.com/juju/juju/core/modelmigration"
	relation "github.com/juju/juju/domain/relation"
	gomock "go.uber.org/mock/gomock"
)

// MockCoordinator is a mock of Coordinator interface.
type MockCoordinator struct {
	ctrl     *gomock.Controller
	recorder *MockCoordinatorMockRecorder
}

// MockCoordinatorMockRecorder is the mock recorder for MockCoordinator.
type MockCoordinatorMockRecorder struct {
	mock *MockCoordinator
}

// NewMockCoordinator creates a new mock instance.
func NewMockCoordinator(ctrl *gomock.Controller) *MockCoordinator {
	mock := &MockCoordinator{ctrl: ctrl}
	mock.recorder = &MockCoordinatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCoordinator) EXPECT() *MockCoordinatorMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCoordinator) Add(arg0 modelmigration.Operation) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Add", arg0)
}

// Add indicates an expected call of Add.
func (mr *MockCoordinatorMockRecorder) Add(arg0 any) *MockCoordinatorAddCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCoordinator)(nil).Add), arg0)
	return &MockCoordinatorAddCall{Call: call}
}

// MockCoordinatorAddCall wrap *gomock.Call
type MockCoordinatorAddCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockCoordinatorAddCall) Return() *MockCoordinatorAddCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockCoordinatorAddCall) Do(f func(modelmigration.Operation)) *MockCoordinatorAddCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockCoordinatorAddCall) DoAndReturn(f func(modelmigration.Operation)) *MockCoordinatorAddCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockImportService is a mock of ImportService interface.
type MockImportService struct {
	ctrl     *gomock.Controller
	recorder *MockImportServiceMockRecorder
}

// MockImportServiceMockRecorder is the mock recorder for MockImportService.
type MockImportServiceMockRecorder struct {
	mock *MockImportService
}

// NewMockImportService creates a new mock instance.
func NewMockImportService(ctrl *gomock.Controller) *MockImportService {
	mock := &MockImportService{ctrl: ctrl}
	mock.recorder = &MockImportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImportService) EXPECT() *MockImportServiceMockRecorder {
	return m.recorder
}

// DeleteImportedRelations mocks base method.
func (m *MockImportService) DeleteImportedRelations(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImportedRelations", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteImportedRelations indicates an expected call of DeleteImportedRelations.
func (mr *MockImportServiceMockRecorder) DeleteImportedRelations(arg0 any) *MockImportServiceDeleteImportedRelationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImportedRelations", reflect.TypeOf((*MockImportService)(nil).DeleteImportedRelations), arg0)
	return &MockImportServiceDeleteImportedRelationsCall{Call: call}
}

// MockImportServiceDeleteImportedRelationsCall wrap *gomock.Call
type MockImportServiceDeleteImportedRelationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImportServiceDeleteImportedRelationsCall) Return(arg0 error) *MockImportServiceDeleteImportedRelationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImportServiceDeleteImportedRelationsCall) Do(f func(context.Context) error) *MockImportServiceDeleteImportedRelationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImportServiceDeleteImportedRelationsCall) DoAndReturn(f func(context.Context) error) *MockImportServiceDeleteImportedRelationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ImportRelations mocks base method.
func (m *MockImportService) ImportRelations(arg0 context.Context, arg1 relation.ImportRelationsArgs) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportRelations", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportRelations indicates an expected call of ImportRelations.
func (mr *MockImportServiceMockRecorder) ImportRelations(arg0, arg1 any) *MockImportServiceImportRelationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportRelations", reflect.TypeOf((*MockImportService)(nil).ImportRelations), arg0, arg1)
	return &MockImportServiceImportRelationsCall{Call: call}
}

// MockImportServiceImportRelationsCall wrap *gomock.Call
type MockImportServiceImportRelationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImportServiceImportRelationsCall) Return(arg0 error) *MockImportServiceImportRelationsCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImportServiceImportRelationsCall) Do(f func(context.Context, relation.ImportRelationsArgs) error) *MockImportServiceImportRelationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImportServiceImportRelationsCall) DoAndReturn(f func(context.Context, relation.ImportRelationsArgs) error) *MockImportServiceImportRelationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockExportService is a mock of ExportService interface.
type MockExportService struct {
	ctrl     *gomock.Controller
	recorder *MockExportServiceMockRecorder
}

// MockExportServiceMockRecorder is the mock recorder for MockExportService.
type MockExportServiceMockRecorder struct {
	mock *MockExportService
}

// NewMockExportService creates a new mock instance.
func NewMockExportService(ctrl *gomock.Controller) *MockExportService {
	mock := &MockExportService{ctrl: ctrl}
	mock.recorder = &MockExportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExportService) EXPECT() *MockExportServiceMockRecorder {
	return m.recorder
}

// ExportRelations mocks base method.
func (m *MockExportService) ExportRelations(arg0 context.Context) ([]relation.ExportRelation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExportRelations", arg0)
	ret0, _ := ret[0].([]relation.ExportRelation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExportRelations indicates an expected call of ExportRelations.
func (mr *MockExportServiceMockRecorder) ExportRelations(arg0 any) *MockExportServiceExportRelationsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportRelations", reflect.TypeOf((*MockExportService)(nil).ExportRelations), arg0)
	return &MockExportServiceExportRelationsCall{Call: call}
}

// MockExportServiceExportRelationsCall wrap *gomock.Call
type MockExportServiceExportRelationsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExportServiceExportRelationsCall) Return(arg0 []relation.ExportRelation, arg1 error) *MockExportServiceExportRelationsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExportServiceExportRelationsCall) Do(f func(context.Context) ([]relation.ExportRelation, error)) *MockExportServiceExportRelationsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExportServiceExportRelationsCall) DoAndReturn(f func(context.Context) ([]relation.ExportRelation, error)) *MockExportServiceExportRelationsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
