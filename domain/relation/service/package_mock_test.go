// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/relation/service (interfaces: State)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go github.com/juju/juju/domain/relation/service State
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	application "github.com/juju/juju/core/application"
	relation "github.com/juju/juju/core/relation"
	unit "github.com/juju/juju/core/unit"
	relation0 "github.com/juju/juju/domain/relation"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// AddRelation mocks base method.
func (m *MockState) AddRelation(arg0 context.Context, arg1, arg2 relation0.CandidateEndpointIdentifier) (relation0.Endpoint, relation0.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddRelation", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation0.Endpoint)
	ret1, _ := ret[1].(relation0.Endpoint)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// AddRelation indicates an expected call of AddRelation.
func (mr *MockStateMockRecorder) AddRelation(arg0, arg1, arg2 any) *MockStateAddRelationCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddRelation", reflect.TypeOf((*MockState)(nil).AddRelation), arg0, arg1, arg2)
	return &MockStateAddRelationCall{Call: call}
}

// MockStateAddRelationCall wrap *gomock.Call
type MockStateAddRelationCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateAddRelationCall) Return(arg0, arg1 relation0.Endpoint, arg2 error) *MockStateAddRelationCall {
	c.Call = c.Call.Return(arg0, arg1, arg2)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateAddRelationCall) Do(f func(context.Context, relation0.CandidateEndpointIdentifier, relation0.CandidateEndpointIdentifier) (relation0.Endpoint, relation0.Endpoint, error)) *MockStateAddRelationCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateAddRelationCall) DoAndReturn(f func(context.Context, relation0.CandidateEndpointIdentifier, relation0.CandidateEndpointIdentifier) (relation0.Endpoint, relation0.Endpoint, error)) *MockStateAddRelationCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// EnterScope mocks base method.
func (m *MockState) EnterScope(arg0 context.Context, arg1 relation.UUID, arg2 unit.Name) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnterScope", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnterScope indicates an expected call of EnterScope.
func (mr *MockStateMockRecorder) EnterScope(arg0, arg1, arg2 any) *MockStateEnterScopeCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnterScope", reflect.TypeOf((*MockState)(nil).EnterScope), arg0, arg1, arg2)
	return &MockStateEnterScopeCall{Call: call}
}

// MockStateEnterScopeCall wrap *gomock.Call
type MockStateEnterScopeCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateEnterScopeCall) Return(arg0 error) *MockStateEnterScopeCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateEnterScopeCall) Do(f func(context.Context, relation.UUID, unit.Name) error) *MockStateEnterScopeCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateEnterScopeCall) DoAndReturn(f func(context.Context, relation.UUID, unit.Name) error) *MockStateEnterScopeCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetAllRelationDetails mocks base method.
func (m *MockState) GetAllRelationDetails(arg0 context.Context) ([]relation0.RelationDetailsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllRelationDetails", arg0)
	ret0, _ := ret[0].([]relation0.RelationDetailsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllRelationDetails indicates an expected call of GetAllRelationDetails.
func (mr *MockStateMockRecorder) GetAllRelationDetails(arg0 any) *MockStateGetAllRelationDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllRelationDetails", reflect.TypeOf((*MockState)(nil).GetAllRelationDetails), arg0)
	return &MockStateGetAllRelationDetailsCall{Call: call}
}

// MockStateGetAllRelationDetailsCall wrap *gomock.Call
type MockStateGetAllRelationDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetAllRelationDetailsCall) Return(arg0 []relation0.RelationDetailsResult, arg1 error) *MockStateGetAllRelationDetailsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetAllRelationDetailsCall) Do(f func(context.Context) ([]relation0.RelationDetailsResult, error)) *MockStateGetAllRelationDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetAllRelationDetailsCall) DoAndReturn(f func(context.Context) ([]relation0.RelationDetailsResult, error)) *MockStateGetAllRelationDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetPeerRelationUUIDByEndpointIdentifiers mocks base method.
func (m *MockState) GetPeerRelationUUIDByEndpointIdentifiers(arg0 context.Context, arg1 relation.EndpointIdentifier) (relation.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPeerRelationUUIDByEndpointIdentifiers", arg0, arg1)
	ret0, _ := ret[0].(relation.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPeerRelationUUIDByEndpointIdentifiers indicates an expected call of GetPeerRelationUUIDByEndpointIdentifiers.
func (mr *MockStateMockRecorder) GetPeerRelationUUIDByEndpointIdentifiers(arg0, arg1 any) *MockStateGetPeerRelationUUIDByEndpointIdentifiersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPeerRelationUUIDByEndpointIdentifiers", reflect.TypeOf((*MockState)(nil).GetPeerRelationUUIDByEndpointIdentifiers), arg0, arg1)
	return &MockStateGetPeerRelationUUIDByEndpointIdentifiersCall{Call: call}
}

// MockStateGetPeerRelationUUIDByEndpointIdentifiersCall wrap *gomock.Call
type MockStateGetPeerRelationUUIDByEndpointIdentifiersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetPeerRelationUUIDByEndpointIdentifiersCall) Return(arg0 relation.UUID, arg1 error) *MockStateGetPeerRelationUUIDByEndpointIdentifiersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetPeerRelationUUIDByEndpointIdentifiersCall) Do(f func(context.Context, relation.EndpointIdentifier) (relation.UUID, error)) *MockStateGetPeerRelationUUIDByEndpointIdentifiersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetPeerRelationUUIDByEndpointIdentifiersCall) DoAndReturn(f func(context.Context, relation.EndpointIdentifier) (relation.UUID, error)) *MockStateGetPeerRelationUUIDByEndpointIdentifiersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRegularRelationUUIDByEndpointIdentifiers mocks base method.
func (m *MockState) GetRegularRelationUUIDByEndpointIdentifiers(arg0 context.Context, arg1, arg2 relation.EndpointIdentifier) (relation.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRegularRelationUUIDByEndpointIdentifiers", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRegularRelationUUIDByEndpointIdentifiers indicates an expected call of GetRegularRelationUUIDByEndpointIdentifiers.
func (mr *MockStateMockRecorder) GetRegularRelationUUIDByEndpointIdentifiers(arg0, arg1, arg2 any) *MockStateGetRegularRelationUUIDByEndpointIdentifiersCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRegularRelationUUIDByEndpointIdentifiers", reflect.TypeOf((*MockState)(nil).GetRegularRelationUUIDByEndpointIdentifiers), arg0, arg1, arg2)
	return &MockStateGetRegularRelationUUIDByEndpointIdentifiersCall{Call: call}
}

// MockStateGetRegularRelationUUIDByEndpointIdentifiersCall wrap *gomock.Call
type MockStateGetRegularRelationUUIDByEndpointIdentifiersCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRegularRelationUUIDByEndpointIdentifiersCall) Return(arg0 relation.UUID, arg1 error) *MockStateGetRegularRelationUUIDByEndpointIdentifiersCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRegularRelationUUIDByEndpointIdentifiersCall) Do(f func(context.Context, relation.EndpointIdentifier, relation.EndpointIdentifier) (relation.UUID, error)) *MockStateGetRegularRelationUUIDByEndpointIdentifiersCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRegularRelationUUIDByEndpointIdentifiersCall) DoAndReturn(f func(context.Context, relation.EndpointIdentifier, relation.EndpointIdentifier) (relation.UUID, error)) *MockStateGetRegularRelationUUIDByEndpointIdentifiersCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationDetails mocks base method.
func (m *MockState) GetRelationDetails(arg0 context.Context, arg1 relation.UUID) (relation0.RelationDetailsResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationDetails", arg0, arg1)
	ret0, _ := ret[0].(relation0.RelationDetailsResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationDetails indicates an expected call of GetRelationDetails.
func (mr *MockStateMockRecorder) GetRelationDetails(arg0, arg1 any) *MockStateGetRelationDetailsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationDetails", reflect.TypeOf((*MockState)(nil).GetRelationDetails), arg0, arg1)
	return &MockStateGetRelationDetailsCall{Call: call}
}

// MockStateGetRelationDetailsCall wrap *gomock.Call
type MockStateGetRelationDetailsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationDetailsCall) Return(arg0 relation0.RelationDetailsResult, arg1 error) *MockStateGetRelationDetailsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationDetailsCall) Do(f func(context.Context, relation.UUID) (relation0.RelationDetailsResult, error)) *MockStateGetRelationDetailsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationDetailsCall) DoAndReturn(f func(context.Context, relation.UUID) (relation0.RelationDetailsResult, error)) *MockStateGetRelationDetailsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationEndpointUUID mocks base method.
func (m *MockState) GetRelationEndpointUUID(arg0 context.Context, arg1 relation0.GetRelationEndpointUUIDArgs) (relation.EndpointUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationEndpointUUID", arg0, arg1)
	ret0, _ := ret[0].(relation.EndpointUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationEndpointUUID indicates an expected call of GetRelationEndpointUUID.
func (mr *MockStateMockRecorder) GetRelationEndpointUUID(arg0, arg1 any) *MockStateGetRelationEndpointUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationEndpointUUID", reflect.TypeOf((*MockState)(nil).GetRelationEndpointUUID), arg0, arg1)
	return &MockStateGetRelationEndpointUUIDCall{Call: call}
}

// MockStateGetRelationEndpointUUIDCall wrap *gomock.Call
type MockStateGetRelationEndpointUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationEndpointUUIDCall) Return(arg0 relation.EndpointUUID, arg1 error) *MockStateGetRelationEndpointUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationEndpointUUIDCall) Do(f func(context.Context, relation0.GetRelationEndpointUUIDArgs) (relation.EndpointUUID, error)) *MockStateGetRelationEndpointUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationEndpointUUIDCall) DoAndReturn(f func(context.Context, relation0.GetRelationEndpointUUIDArgs) (relation.EndpointUUID, error)) *MockStateGetRelationEndpointUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationEndpoints mocks base method.
func (m *MockState) GetRelationEndpoints(arg0 context.Context, arg1 relation.UUID) ([]relation0.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationEndpoints", arg0, arg1)
	ret0, _ := ret[0].([]relation0.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationEndpoints indicates an expected call of GetRelationEndpoints.
func (mr *MockStateMockRecorder) GetRelationEndpoints(arg0, arg1 any) *MockStateGetRelationEndpointsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationEndpoints", reflect.TypeOf((*MockState)(nil).GetRelationEndpoints), arg0, arg1)
	return &MockStateGetRelationEndpointsCall{Call: call}
}

// MockStateGetRelationEndpointsCall wrap *gomock.Call
type MockStateGetRelationEndpointsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationEndpointsCall) Return(arg0 []relation0.Endpoint, arg1 error) *MockStateGetRelationEndpointsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationEndpointsCall) Do(f func(context.Context, relation.UUID) ([]relation0.Endpoint, error)) *MockStateGetRelationEndpointsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationEndpointsCall) DoAndReturn(f func(context.Context, relation.UUID) ([]relation0.Endpoint, error)) *MockStateGetRelationEndpointsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationID mocks base method.
func (m *MockState) GetRelationID(arg0 context.Context, arg1 relation.UUID) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationID", arg0, arg1)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationID indicates an expected call of GetRelationID.
func (mr *MockStateMockRecorder) GetRelationID(arg0, arg1 any) *MockStateGetRelationIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationID", reflect.TypeOf((*MockState)(nil).GetRelationID), arg0, arg1)
	return &MockStateGetRelationIDCall{Call: call}
}

// MockStateGetRelationIDCall wrap *gomock.Call
type MockStateGetRelationIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationIDCall) Return(arg0 int, arg1 error) *MockStateGetRelationIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationIDCall) Do(f func(context.Context, relation.UUID) (int, error)) *MockStateGetRelationIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationIDCall) DoAndReturn(f func(context.Context, relation.UUID) (int, error)) *MockStateGetRelationIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUUIDByID mocks base method.
func (m *MockState) GetRelationUUIDByID(arg0 context.Context, arg1 int) (relation.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUUIDByID", arg0, arg1)
	ret0, _ := ret[0].(relation.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUUIDByID indicates an expected call of GetRelationUUIDByID.
func (mr *MockStateMockRecorder) GetRelationUUIDByID(arg0, arg1 any) *MockStateGetRelationUUIDByIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUUIDByID", reflect.TypeOf((*MockState)(nil).GetRelationUUIDByID), arg0, arg1)
	return &MockStateGetRelationUUIDByIDCall{Call: call}
}

// MockStateGetRelationUUIDByIDCall wrap *gomock.Call
type MockStateGetRelationUUIDByIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationUUIDByIDCall) Return(arg0 relation.UUID, arg1 error) *MockStateGetRelationUUIDByIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationUUIDByIDCall) Do(f func(context.Context, int) (relation.UUID, error)) *MockStateGetRelationUUIDByIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationUUIDByIDCall) DoAndReturn(f func(context.Context, int) (relation.UUID, error)) *MockStateGetRelationUUIDByIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUnit mocks base method.
func (m *MockState) GetRelationUnit(arg0 context.Context, arg1 relation.UUID, arg2 unit.Name) (relation.UnitUUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUnit", arg0, arg1, arg2)
	ret0, _ := ret[0].(relation.UnitUUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUnit indicates an expected call of GetRelationUnit.
func (mr *MockStateMockRecorder) GetRelationUnit(arg0, arg1, arg2 any) *MockStateGetRelationUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUnit", reflect.TypeOf((*MockState)(nil).GetRelationUnit), arg0, arg1, arg2)
	return &MockStateGetRelationUnitCall{Call: call}
}

// MockStateGetRelationUnitCall wrap *gomock.Call
type MockStateGetRelationUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationUnitCall) Return(arg0 relation.UnitUUID, arg1 error) *MockStateGetRelationUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationUnitCall) Do(f func(context.Context, relation.UUID, unit.Name) (relation.UnitUUID, error)) *MockStateGetRelationUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationUnitCall) DoAndReturn(f func(context.Context, relation.UUID, unit.Name) (relation.UnitUUID, error)) *MockStateGetRelationUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationUnitEndpointName mocks base method.
func (m *MockState) GetRelationUnitEndpointName(arg0 context.Context, arg1 relation.UnitUUID) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationUnitEndpointName", arg0, arg1)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationUnitEndpointName indicates an expected call of GetRelationUnitEndpointName.
func (mr *MockStateMockRecorder) GetRelationUnitEndpointName(arg0, arg1 any) *MockStateGetRelationUnitEndpointNameCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationUnitEndpointName", reflect.TypeOf((*MockState)(nil).GetRelationUnitEndpointName), arg0, arg1)
	return &MockStateGetRelationUnitEndpointNameCall{Call: call}
}

// MockStateGetRelationUnitEndpointNameCall wrap *gomock.Call
type MockStateGetRelationUnitEndpointNameCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationUnitEndpointNameCall) Return(arg0 string, arg1 error) *MockStateGetRelationUnitEndpointNameCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationUnitEndpointNameCall) Do(f func(context.Context, relation.UnitUUID) (string, error)) *MockStateGetRelationUnitEndpointNameCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationUnitEndpointNameCall) DoAndReturn(f func(context.Context, relation.UnitUUID) (string, error)) *MockStateGetRelationUnitEndpointNameCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetRelationsStatusForUnit mocks base method.
func (m *MockState) GetRelationsStatusForUnit(arg0 context.Context, arg1 unit.UUID) ([]relation0.RelationUnitStatusResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelationsStatusForUnit", arg0, arg1)
	ret0, _ := ret[0].([]relation0.RelationUnitStatusResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRelationsStatusForUnit indicates an expected call of GetRelationsStatusForUnit.
func (mr *MockStateMockRecorder) GetRelationsStatusForUnit(arg0, arg1 any) *MockStateGetRelationsStatusForUnitCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelationsStatusForUnit", reflect.TypeOf((*MockState)(nil).GetRelationsStatusForUnit), arg0, arg1)
	return &MockStateGetRelationsStatusForUnitCall{Call: call}
}

// MockStateGetRelationsStatusForUnitCall wrap *gomock.Call
type MockStateGetRelationsStatusForUnitCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetRelationsStatusForUnitCall) Return(arg0 []relation0.RelationUnitStatusResult, arg1 error) *MockStateGetRelationsStatusForUnitCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetRelationsStatusForUnitCall) Do(f func(context.Context, unit.UUID) ([]relation0.RelationUnitStatusResult, error)) *MockStateGetRelationsStatusForUnitCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetRelationsStatusForUnitCall) DoAndReturn(f func(context.Context, unit.UUID) ([]relation0.RelationUnitStatusResult, error)) *MockStateGetRelationsStatusForUnitCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// WatcherApplicationSettingsNamespace mocks base method.
func (m *MockState) WatcherApplicationSettingsNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatcherApplicationSettingsNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// WatcherApplicationSettingsNamespace indicates an expected call of WatcherApplicationSettingsNamespace.
func (mr *MockStateMockRecorder) WatcherApplicationSettingsNamespace() *MockStateWatcherApplicationSettingsNamespaceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatcherApplicationSettingsNamespace", reflect.TypeOf((*MockState)(nil).WatcherApplicationSettingsNamespace))
	return &MockStateWatcherApplicationSettingsNamespaceCall{Call: call}
}

// MockStateWatcherApplicationSettingsNamespaceCall wrap *gomock.Call
type MockStateWatcherApplicationSettingsNamespaceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateWatcherApplicationSettingsNamespaceCall) Return(arg0 string) *MockStateWatcherApplicationSettingsNamespaceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateWatcherApplicationSettingsNamespaceCall) Do(f func() string) *MockStateWatcherApplicationSettingsNamespaceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateWatcherApplicationSettingsNamespaceCall) DoAndReturn(f func() string) *MockStateWatcherApplicationSettingsNamespaceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
