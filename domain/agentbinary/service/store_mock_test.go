// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/agentbinary/service (interfaces: State,AgentBinaryState)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination store_mock_test.go github.com/juju/juju/domain/agentbinary/service State,AgentBinaryState
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	objectstore "github.com/juju/juju/core/objectstore"
	agentbinary "github.com/juju/juju/domain/agentbinary"
	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// CheckSHA256Exists mocks base method.
func (m *MockState) CheckSHA256Exists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSHA256Exists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSHA256Exists indicates an expected call of CheckSHA256Exists.
func (mr *MockStateMockRecorder) CheckSHA256Exists(arg0, arg1 any) *MockStateCheckSHA256ExistsCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSHA256Exists", reflect.TypeOf((*MockState)(nil).CheckSHA256Exists), arg0, arg1)
	return &MockStateCheckSHA256ExistsCall{Call: call}
}

// MockStateCheckSHA256ExistsCall wrap *gomock.Call
type MockStateCheckSHA256ExistsCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateCheckSHA256ExistsCall) Return(arg0 bool, arg1 error) *MockStateCheckSHA256ExistsCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateCheckSHA256ExistsCall) Do(f func(context.Context, string) (bool, error)) *MockStateCheckSHA256ExistsCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateCheckSHA256ExistsCall) DoAndReturn(f func(context.Context, string) (bool, error)) *MockStateCheckSHA256ExistsCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetObjectUUID mocks base method.
func (m *MockState) GetObjectUUID(arg0 context.Context, arg1 string) (objectstore.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetObjectUUID", arg0, arg1)
	ret0, _ := ret[0].(objectstore.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetObjectUUID indicates an expected call of GetObjectUUID.
func (mr *MockStateMockRecorder) GetObjectUUID(arg0, arg1 any) *MockStateGetObjectUUIDCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetObjectUUID", reflect.TypeOf((*MockState)(nil).GetObjectUUID), arg0, arg1)
	return &MockStateGetObjectUUIDCall{Call: call}
}

// MockStateGetObjectUUIDCall wrap *gomock.Call
type MockStateGetObjectUUIDCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetObjectUUIDCall) Return(arg0 objectstore.UUID, arg1 error) *MockStateGetObjectUUIDCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetObjectUUIDCall) Do(f func(context.Context, string) (objectstore.UUID, error)) *MockStateGetObjectUUIDCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetObjectUUIDCall) DoAndReturn(f func(context.Context, string) (objectstore.UUID, error)) *MockStateGetObjectUUIDCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RegisterAgentBinary mocks base method.
func (m *MockState) RegisterAgentBinary(arg0 context.Context, arg1 agentbinary.RegisterAgentBinaryArg) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterAgentBinary", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RegisterAgentBinary indicates an expected call of RegisterAgentBinary.
func (mr *MockStateMockRecorder) RegisterAgentBinary(arg0, arg1 any) *MockStateRegisterAgentBinaryCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAgentBinary", reflect.TypeOf((*MockState)(nil).RegisterAgentBinary), arg0, arg1)
	return &MockStateRegisterAgentBinaryCall{Call: call}
}

// MockStateRegisterAgentBinaryCall wrap *gomock.Call
type MockStateRegisterAgentBinaryCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateRegisterAgentBinaryCall) Return(arg0 error) *MockStateRegisterAgentBinaryCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateRegisterAgentBinaryCall) Do(f func(context.Context, agentbinary.RegisterAgentBinaryArg) error) *MockStateRegisterAgentBinaryCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateRegisterAgentBinaryCall) DoAndReturn(f func(context.Context, agentbinary.RegisterAgentBinaryArg) error) *MockStateRegisterAgentBinaryCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockAgentBinaryState is a mock of AgentBinaryState interface.
type MockAgentBinaryState struct {
	ctrl     *gomock.Controller
	recorder *MockAgentBinaryStateMockRecorder
}

// MockAgentBinaryStateMockRecorder is the mock recorder for MockAgentBinaryState.
type MockAgentBinaryStateMockRecorder struct {
	mock *MockAgentBinaryState
}

// NewMockAgentBinaryState creates a new mock instance.
func NewMockAgentBinaryState(ctrl *gomock.Controller) *MockAgentBinaryState {
	mock := &MockAgentBinaryState{ctrl: ctrl}
	mock.recorder = &MockAgentBinaryStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAgentBinaryState) EXPECT() *MockAgentBinaryStateMockRecorder {
	return m.recorder
}

// ListAgentBinaries mocks base method.
func (m *MockAgentBinaryState) ListAgentBinaries(arg0 context.Context) ([]agentbinary.Metadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAgentBinaries", arg0)
	ret0, _ := ret[0].([]agentbinary.Metadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgentBinaries indicates an expected call of ListAgentBinaries.
func (mr *MockAgentBinaryStateMockRecorder) ListAgentBinaries(arg0 any) *MockAgentBinaryStateListAgentBinariesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentBinaries", reflect.TypeOf((*MockAgentBinaryState)(nil).ListAgentBinaries), arg0)
	return &MockAgentBinaryStateListAgentBinariesCall{Call: call}
}

// MockAgentBinaryStateListAgentBinariesCall wrap *gomock.Call
type MockAgentBinaryStateListAgentBinariesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockAgentBinaryStateListAgentBinariesCall) Return(arg0 []agentbinary.Metadata, arg1 error) *MockAgentBinaryStateListAgentBinariesCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockAgentBinaryStateListAgentBinariesCall) Do(f func(context.Context) ([]agentbinary.Metadata, error)) *MockAgentBinaryStateListAgentBinariesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockAgentBinaryStateListAgentBinariesCall) DoAndReturn(f func(context.Context) ([]agentbinary.Metadata, error)) *MockAgentBinaryStateListAgentBinariesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
