// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/sequence/service (interfaces: State)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination package_mock_test.go github.com/juju/juju/domain/sequence/service State
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockState is a mock of State interface.
type MockState struct {
	ctrl     *gomock.Controller
	recorder *MockStateMockRecorder
}

// MockStateMockRecorder is the mock recorder for MockState.
type MockStateMockRecorder struct {
	mock *MockState
}

// NewMockState creates a new mock instance.
func NewMockState(ctrl *gomock.Controller) *MockState {
	mock := &MockState{ctrl: ctrl}
	mock.recorder = &MockStateMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockState) EXPECT() *MockStateMockRecorder {
	return m.recorder
}

// GetSequencesForExport mocks base method.
func (m *MockState) GetSequencesForExport(arg0 context.Context) (map[string]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSequencesForExport", arg0)
	ret0, _ := ret[0].(map[string]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSequencesForExport indicates an expected call of GetSequencesForExport.
func (mr *MockStateMockRecorder) GetSequencesForExport(arg0 any) *MockStateGetSequencesForExportCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSequencesForExport", reflect.TypeOf((*MockState)(nil).GetSequencesForExport), arg0)
	return &MockStateGetSequencesForExportCall{Call: call}
}

// MockStateGetSequencesForExportCall wrap *gomock.Call
type MockStateGetSequencesForExportCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateGetSequencesForExportCall) Return(arg0 map[string]uint64, arg1 error) *MockStateGetSequencesForExportCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateGetSequencesForExportCall) Do(f func(context.Context) (map[string]uint64, error)) *MockStateGetSequencesForExportCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateGetSequencesForExportCall) DoAndReturn(f func(context.Context) (map[string]uint64, error)) *MockStateGetSequencesForExportCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// ImportSequences mocks base method.
func (m *MockState) ImportSequences(arg0 context.Context, arg1 map[string]uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportSequences", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportSequences indicates an expected call of ImportSequences.
func (mr *MockStateMockRecorder) ImportSequences(arg0, arg1 any) *MockStateImportSequencesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportSequences", reflect.TypeOf((*MockState)(nil).ImportSequences), arg0, arg1)
	return &MockStateImportSequencesCall{Call: call}
}

// MockStateImportSequencesCall wrap *gomock.Call
type MockStateImportSequencesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateImportSequencesCall) Return(arg0 error) *MockStateImportSequencesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateImportSequencesCall) Do(f func(context.Context, map[string]uint64) error) *MockStateImportSequencesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateImportSequencesCall) DoAndReturn(f func(context.Context, map[string]uint64) error) *MockStateImportSequencesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveAllSequences mocks base method.
func (m *MockState) RemoveAllSequences(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllSequences", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllSequences indicates an expected call of RemoveAllSequences.
func (mr *MockStateMockRecorder) RemoveAllSequences(arg0 any) *MockStateRemoveAllSequencesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllSequences", reflect.TypeOf((*MockState)(nil).RemoveAllSequences), arg0)
	return &MockStateRemoveAllSequencesCall{Call: call}
}

// MockStateRemoveAllSequencesCall wrap *gomock.Call
type MockStateRemoveAllSequencesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockStateRemoveAllSequencesCall) Return(arg0 error) *MockStateRemoveAllSequencesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockStateRemoveAllSequencesCall) Do(f func(context.Context) error) *MockStateRemoveAllSequencesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockStateRemoveAllSequencesCall) DoAndReturn(f func(context.Context) error) *MockStateRemoveAllSequencesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
