// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/sequence/modelmigration (interfaces: ImportService,ExportService)
//
// Generated by this command:
//
//	mockgen -typed -package modelmigration -destination migrations_mock_test.go github.com/juju/juju/domain/sequence/modelmigration ImportService,ExportService
//

// Package modelmigration is a generated GoMock package.
package modelmigration

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockImportService is a mock of ImportService interface.
type MockImportService struct {
	ctrl     *gomock.Controller
	recorder *MockImportServiceMockRecorder
}

// MockImportServiceMockRecorder is the mock recorder for MockImportService.
type MockImportServiceMockRecorder struct {
	mock *MockImportService
}

// NewMockImportService creates a new mock instance.
func NewMockImportService(ctrl *gomock.Controller) *MockImportService {
	mock := &MockImportService{ctrl: ctrl}
	mock.recorder = &MockImportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImportService) EXPECT() *MockImportServiceMockRecorder {
	return m.recorder
}

// ImportSequences mocks base method.
func (m *MockImportService) ImportSequences(arg0 context.Context, arg1 map[string]uint64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ImportSequences", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ImportSequences indicates an expected call of ImportSequences.
func (mr *MockImportServiceMockRecorder) ImportSequences(arg0, arg1 any) *MockImportServiceImportSequencesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ImportSequences", reflect.TypeOf((*MockImportService)(nil).ImportSequences), arg0, arg1)
	return &MockImportServiceImportSequencesCall{Call: call}
}

// MockImportServiceImportSequencesCall wrap *gomock.Call
type MockImportServiceImportSequencesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImportServiceImportSequencesCall) Return(arg0 error) *MockImportServiceImportSequencesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImportServiceImportSequencesCall) Do(f func(context.Context, map[string]uint64) error) *MockImportServiceImportSequencesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImportServiceImportSequencesCall) DoAndReturn(f func(context.Context, map[string]uint64) error) *MockImportServiceImportSequencesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveAllSequences mocks base method.
func (m *MockImportService) RemoveAllSequences(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAllSequences", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAllSequences indicates an expected call of RemoveAllSequences.
func (mr *MockImportServiceMockRecorder) RemoveAllSequences(arg0 any) *MockImportServiceRemoveAllSequencesCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAllSequences", reflect.TypeOf((*MockImportService)(nil).RemoveAllSequences), arg0)
	return &MockImportServiceRemoveAllSequencesCall{Call: call}
}

// MockImportServiceRemoveAllSequencesCall wrap *gomock.Call
type MockImportServiceRemoveAllSequencesCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockImportServiceRemoveAllSequencesCall) Return(arg0 error) *MockImportServiceRemoveAllSequencesCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockImportServiceRemoveAllSequencesCall) Do(f func(context.Context) error) *MockImportServiceRemoveAllSequencesCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockImportServiceRemoveAllSequencesCall) DoAndReturn(f func(context.Context) error) *MockImportServiceRemoveAllSequencesCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockExportService is a mock of ExportService interface.
type MockExportService struct {
	ctrl     *gomock.Controller
	recorder *MockExportServiceMockRecorder
}

// MockExportServiceMockRecorder is the mock recorder for MockExportService.
type MockExportServiceMockRecorder struct {
	mock *MockExportService
}

// NewMockExportService creates a new mock instance.
func NewMockExportService(ctrl *gomock.Controller) *MockExportService {
	mock := &MockExportService{ctrl: ctrl}
	mock.recorder = &MockExportServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExportService) EXPECT() *MockExportServiceMockRecorder {
	return m.recorder
}

// GetSequencesForExport mocks base method.
func (m *MockExportService) GetSequencesForExport(arg0 context.Context) (map[string]uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSequencesForExport", arg0)
	ret0, _ := ret[0].(map[string]uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSequencesForExport indicates an expected call of GetSequencesForExport.
func (mr *MockExportServiceMockRecorder) GetSequencesForExport(arg0 any) *MockExportServiceGetSequencesForExportCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSequencesForExport", reflect.TypeOf((*MockExportService)(nil).GetSequencesForExport), arg0)
	return &MockExportServiceGetSequencesForExportCall{Call: call}
}

// MockExportServiceGetSequencesForExportCall wrap *gomock.Call
type MockExportServiceGetSequencesForExportCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockExportServiceGetSequencesForExportCall) Return(arg0 map[string]uint64, arg1 error) *MockExportServiceGetSequencesForExportCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockExportServiceGetSequencesForExportCall) Do(f func(context.Context) (map[string]uint64, error)) *MockExportServiceGetSequencesForExportCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockExportServiceGetSequencesForExportCall) DoAndReturn(f func(context.Context) (map[string]uint64, error)) *MockExportServiceGetSequencesForExportCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
