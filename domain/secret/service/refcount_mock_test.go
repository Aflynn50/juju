// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/domain/secret/service (interfaces: SecretBackendReferenceMutator)
//
// Generated by this command:
//
//	mockgen -typed -package service -destination refcount_mock_test.go github.com/juju/juju/domain/secret/service SecretBackendReferenceMutator
//

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	model "github.com/juju/juju/core/model"
	secrets "github.com/juju/juju/core/secrets"
	uuid "github.com/juju/juju/internal/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockSecretBackendReferenceMutator is a mock of SecretBackendReferenceMutator interface.
type MockSecretBackendReferenceMutator struct {
	ctrl     *gomock.Controller
	recorder *MockSecretBackendReferenceMutatorMockRecorder
}

// MockSecretBackendReferenceMutatorMockRecorder is the mock recorder for MockSecretBackendReferenceMutator.
type MockSecretBackendReferenceMutatorMockRecorder struct {
	mock *MockSecretBackendReferenceMutator
}

// NewMockSecretBackendReferenceMutator creates a new mock instance.
func NewMockSecretBackendReferenceMutator(ctrl *gomock.Controller) *MockSecretBackendReferenceMutator {
	mock := &MockSecretBackendReferenceMutator{ctrl: ctrl}
	mock.recorder = &MockSecretBackendReferenceMutatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretBackendReferenceMutator) EXPECT() *MockSecretBackendReferenceMutatorMockRecorder {
	return m.recorder
}

// AddSecretBackendReference mocks base method.
func (m *MockSecretBackendReferenceMutator) AddSecretBackendReference(arg0 context.Context, arg1 *secrets.ValueRef, arg2 model.UUID, arg3 uuid.UUID) (func() error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSecretBackendReference", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(func() error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddSecretBackendReference indicates an expected call of AddSecretBackendReference.
func (mr *MockSecretBackendReferenceMutatorMockRecorder) AddSecretBackendReference(arg0, arg1, arg2, arg3 any) *MockSecretBackendReferenceMutatorAddSecretBackendReferenceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSecretBackendReference", reflect.TypeOf((*MockSecretBackendReferenceMutator)(nil).AddSecretBackendReference), arg0, arg1, arg2, arg3)
	return &MockSecretBackendReferenceMutatorAddSecretBackendReferenceCall{Call: call}
}

// MockSecretBackendReferenceMutatorAddSecretBackendReferenceCall wrap *gomock.Call
type MockSecretBackendReferenceMutatorAddSecretBackendReferenceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendReferenceMutatorAddSecretBackendReferenceCall) Return(arg0 func() error, arg1 error) *MockSecretBackendReferenceMutatorAddSecretBackendReferenceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendReferenceMutatorAddSecretBackendReferenceCall) Do(f func(context.Context, *secrets.ValueRef, model.UUID, uuid.UUID) (func() error, error)) *MockSecretBackendReferenceMutatorAddSecretBackendReferenceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendReferenceMutatorAddSecretBackendReferenceCall) DoAndReturn(f func(context.Context, *secrets.ValueRef, model.UUID, uuid.UUID) (func() error, error)) *MockSecretBackendReferenceMutatorAddSecretBackendReferenceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// RemoveSecretBackendReference mocks base method.
func (m *MockSecretBackendReferenceMutator) RemoveSecretBackendReference(arg0 context.Context, arg1 ...uuid.UUID) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveSecretBackendReference", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveSecretBackendReference indicates an expected call of RemoveSecretBackendReference.
func (mr *MockSecretBackendReferenceMutatorMockRecorder) RemoveSecretBackendReference(arg0 any, arg1 ...any) *MockSecretBackendReferenceMutatorRemoveSecretBackendReferenceCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveSecretBackendReference", reflect.TypeOf((*MockSecretBackendReferenceMutator)(nil).RemoveSecretBackendReference), varargs...)
	return &MockSecretBackendReferenceMutatorRemoveSecretBackendReferenceCall{Call: call}
}

// MockSecretBackendReferenceMutatorRemoveSecretBackendReferenceCall wrap *gomock.Call
type MockSecretBackendReferenceMutatorRemoveSecretBackendReferenceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendReferenceMutatorRemoveSecretBackendReferenceCall) Return(arg0 error) *MockSecretBackendReferenceMutatorRemoveSecretBackendReferenceCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendReferenceMutatorRemoveSecretBackendReferenceCall) Do(f func(context.Context, ...uuid.UUID) error) *MockSecretBackendReferenceMutatorRemoveSecretBackendReferenceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendReferenceMutatorRemoveSecretBackendReferenceCall) DoAndReturn(f func(context.Context, ...uuid.UUID) error) *MockSecretBackendReferenceMutatorRemoveSecretBackendReferenceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateSecretBackendReference mocks base method.
func (m *MockSecretBackendReferenceMutator) UpdateSecretBackendReference(arg0 context.Context, arg1 *secrets.ValueRef, arg2 model.UUID, arg3 uuid.UUID) (func() error, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSecretBackendReference", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(func() error)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateSecretBackendReference indicates an expected call of UpdateSecretBackendReference.
func (mr *MockSecretBackendReferenceMutatorMockRecorder) UpdateSecretBackendReference(arg0, arg1, arg2, arg3 any) *MockSecretBackendReferenceMutatorUpdateSecretBackendReferenceCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSecretBackendReference", reflect.TypeOf((*MockSecretBackendReferenceMutator)(nil).UpdateSecretBackendReference), arg0, arg1, arg2, arg3)
	return &MockSecretBackendReferenceMutatorUpdateSecretBackendReferenceCall{Call: call}
}

// MockSecretBackendReferenceMutatorUpdateSecretBackendReferenceCall wrap *gomock.Call
type MockSecretBackendReferenceMutatorUpdateSecretBackendReferenceCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockSecretBackendReferenceMutatorUpdateSecretBackendReferenceCall) Return(arg0 func() error, arg1 error) *MockSecretBackendReferenceMutatorUpdateSecretBackendReferenceCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockSecretBackendReferenceMutatorUpdateSecretBackendReferenceCall) Do(f func(context.Context, *secrets.ValueRef, model.UUID, uuid.UUID) (func() error, error)) *MockSecretBackendReferenceMutatorUpdateSecretBackendReferenceCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockSecretBackendReferenceMutatorUpdateSecretBackendReferenceCall) DoAndReturn(f func(context.Context, *secrets.ValueRef, model.UUID, uuid.UUID) (func() error, error)) *MockSecretBackendReferenceMutatorUpdateSecretBackendReferenceCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
