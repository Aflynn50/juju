import os
import shutil
import subprocess

def generate_cli_docs():
    cli_dir = "user/reference/juju-cli/"
    generated_cli_docs_dir = cli_dir + "list-of-juju-cli-commands/"
    cli_index_template = cli_dir + 'cli_index.template'

    # Remove existing cli folder to regenerate it
    if os.path.exists(generated_cli_docs_dir):
        shutil.rmtree(generated_cli_docs_dir)

    # Generate the CLI docs using "juju documentation" command.
    subprocess.run(['juju', 'documentation', '--split', '--no-index', '--out', generated_cli_docs_dir],
                       check=True)

    for page in os.listdir(generated_cli_docs_dir):
        title = "`juju " + page[:-3]+ "`"
        anchor = "command-juju-" + page[:-3]
        # Add sphinx names to each file.
        with open(os.path.join(generated_cli_docs_dir, page), 'r+') as mdfile:
            content = mdfile.read()
            # Remove trailing seperated (e.g. ----)
            content = content.rstrip(" -\n")
            mdfile.seek(0, 0)
            mdfile.write('(' + anchor + ')=\n' +
                         '# ' + title + '\n' +
                         content)

    # Add in the index file containing the command list.
    subprocess.run(['cp', cli_index_template, generated_cli_docs_dir + 'index.md'])


    result = subprocess.run(['juju', 'version'], capture_output=True, text=True)
    print("generated cli command docs using juju verison found in path: " + result.stdout.rstrip())

def generate_controller_config_docs():
    config_reference_dir = 'user/reference/configuration/'
    controller_config_file = config_reference_dir + 'list-of-controller-configuration-keys.md'
    controller_config_template = config_reference_dir + 'list-of-controller-configuration-keys.template'

    # Generate the controller config using script. The first argument of the script
    # is the root directory of the juju source code. This is the parent directory
    # so use pass '..'.
    result = subprocess.run(['go', 'run', '../scripts/md-gen/controller-config/main.go', '..'],
                            capture_output=True, text=True)
    if result.returncode != 0:
        raise Exception("error auto-generating controller config: " + result.stderr)

    # Remove existing controller config
    if os.path.exists(controller_config_file):
        os.remove(controller_config_file)

    # Copy template file in.
    subprocess.run(['cp', controller_config_template, controller_config_file])

    # Append autogenerated docs.
    with open(controller_config_file, 'a') as f:
        f.write(result.stdout)

    print("generated controller config key list")

def generate_model_config_docs():
    config_reference_dir = 'user/reference/configuration/'
    model_config_file = config_reference_dir + 'list-of-model-configuration-keys.md'
    model_config_template = config_reference_dir + 'list-of-model-configuration-keys.template'

    # Generate the model config using script.
    result = subprocess.run(['go', 'run', '../scripts/md-gen/model-config/main.go'],
                            capture_output=True, text=True)
    if result.returncode != 0:
        raise Exception("error auto-generating model config: " + result.stderr)

    # Remove existing model config
    if os.path.exists(model_config_file):
        os.remove(model_config_file)

    # Copy template file in.
    subprocess.run(['cp', model_config_template, model_config_file])

    # Append autogenerated docs.
    with open(model_config_file, 'a') as f:
        f.write(result.stdout)

    print("generated model config key list")

generate_cli_docs()
generate_controller_config_docs()
generate_model_config_docs()