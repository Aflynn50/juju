// Code generated by MockGen. DO NOT EDIT.
// Source: worker.go

// Package dbaccessor is a generated GoMock package.
package dbaccessor

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	app "github.com/juju/juju/database/app"
)

// MockOptionFactory is a mock of OptionFactory interface.
type MockOptionFactory struct {
	ctrl     *gomock.Controller
	recorder *MockOptionFactoryMockRecorder
}

// MockOptionFactoryMockRecorder is the mock recorder for MockOptionFactory.
type MockOptionFactoryMockRecorder struct {
	mock *MockOptionFactory
}

// NewMockOptionFactory creates a new mock instance.
func NewMockOptionFactory(ctrl *gomock.Controller) *MockOptionFactory {
	mock := &MockOptionFactory{ctrl: ctrl}
	mock.recorder = &MockOptionFactoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOptionFactory) EXPECT() *MockOptionFactoryMockRecorder {
	return m.recorder
}

// EnsureDataDir mocks base method.
func (m *MockOptionFactory) EnsureDataDir() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureDataDir")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureDataDir indicates an expected call of EnsureDataDir.
func (mr *MockOptionFactoryMockRecorder) EnsureDataDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDataDir", reflect.TypeOf((*MockOptionFactory)(nil).EnsureDataDir))
}

// WithAddressOption mocks base method.
func (m *MockOptionFactory) WithAddressOption() (app.Option, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithAddressOption")
	ret0, _ := ret[0].(app.Option)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithAddressOption indicates an expected call of WithAddressOption.
func (mr *MockOptionFactoryMockRecorder) WithAddressOption() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithAddressOption", reflect.TypeOf((*MockOptionFactory)(nil).WithAddressOption))
}

// WithClusterOption mocks base method.
func (m *MockOptionFactory) WithClusterOption() (app.Option, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithClusterOption")
	ret0, _ := ret[0].(app.Option)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithClusterOption indicates an expected call of WithClusterOption.
func (mr *MockOptionFactoryMockRecorder) WithClusterOption() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithClusterOption", reflect.TypeOf((*MockOptionFactory)(nil).WithClusterOption))
}

// WithLogFuncOption mocks base method.
func (m *MockOptionFactory) WithLogFuncOption() app.Option {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLogFuncOption")
	ret0, _ := ret[0].(app.Option)
	return ret0
}

// WithLogFuncOption indicates an expected call of WithLogFuncOption.
func (mr *MockOptionFactoryMockRecorder) WithLogFuncOption() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLogFuncOption", reflect.TypeOf((*MockOptionFactory)(nil).WithLogFuncOption))
}

// WithTLSOption mocks base method.
func (m *MockOptionFactory) WithTLSOption() (app.Option, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTLSOption")
	ret0, _ := ret[0].(app.Option)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithTLSOption indicates an expected call of WithTLSOption.
func (mr *MockOptionFactoryMockRecorder) WithTLSOption() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTLSOption", reflect.TypeOf((*MockOptionFactory)(nil).WithTLSOption))
}

// MockDBGetter is a mock of DBGetter interface.
type MockDBGetter struct {
	ctrl     *gomock.Controller
	recorder *MockDBGetterMockRecorder
}

// MockDBGetterMockRecorder is the mock recorder for MockDBGetter.
type MockDBGetterMockRecorder struct {
	mock *MockDBGetter
}

// NewMockDBGetter creates a new mock instance.
func NewMockDBGetter(ctrl *gomock.Controller) *MockDBGetter {
	mock := &MockDBGetter{ctrl: ctrl}
	mock.recorder = &MockDBGetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBGetter) EXPECT() *MockDBGetterMockRecorder {
	return m.recorder
}

// GetDB mocks base method.
func (m *MockDBGetter) GetDB(namespace string) (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDB", namespace)
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDB indicates an expected call of GetDB.
func (mr *MockDBGetterMockRecorder) GetDB(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDB", reflect.TypeOf((*MockDBGetter)(nil).GetDB), namespace)
}

// MockDBApp is a mock of DBApp interface.
type MockDBApp struct {
	ctrl     *gomock.Controller
	recorder *MockDBAppMockRecorder
}

// MockDBAppMockRecorder is the mock recorder for MockDBApp.
type MockDBAppMockRecorder struct {
	mock *MockDBApp
}

// NewMockDBApp creates a new mock instance.
func NewMockDBApp(ctrl *gomock.Controller) *MockDBApp {
	mock := &MockDBApp{ctrl: ctrl}
	mock.recorder = &MockDBAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBApp) EXPECT() *MockDBAppMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockDBApp) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDBAppMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDBApp)(nil).Close))
}

// Handover mocks base method.
func (m *MockDBApp) Handover(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handover", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handover indicates an expected call of Handover.
func (mr *MockDBAppMockRecorder) Handover(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handover", reflect.TypeOf((*MockDBApp)(nil).Handover), arg0)
}

// ID mocks base method.
func (m *MockDBApp) ID() uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(uint64)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockDBAppMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockDBApp)(nil).ID))
}

// Open mocks base method.
func (m *MockDBApp) Open(arg0 context.Context, arg1 string) (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", arg0, arg1)
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockDBAppMockRecorder) Open(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockDBApp)(nil).Open), arg0, arg1)
}

// Ready mocks base method.
func (m *MockDBApp) Ready(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ready", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Ready indicates an expected call of Ready.
func (mr *MockDBAppMockRecorder) Ready(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ready", reflect.TypeOf((*MockDBApp)(nil).Ready), arg0)
}

// MockREPL is a mock of REPL interface.
type MockREPL struct {
	ctrl     *gomock.Controller
	recorder *MockREPLMockRecorder
}

// MockREPLMockRecorder is the mock recorder for MockREPL.
type MockREPLMockRecorder struct {
	mock *MockREPL
}

// NewMockREPL creates a new mock instance.
func NewMockREPL(ctrl *gomock.Controller) *MockREPL {
	mock := &MockREPL{ctrl: ctrl}
	mock.recorder = &MockREPLMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockREPL) EXPECT() *MockREPLMockRecorder {
	return m.recorder
}

// Kill mocks base method.
func (m *MockREPL) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockREPLMockRecorder) Kill() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockREPL)(nil).Kill))
}

// Wait mocks base method.
func (m *MockREPL) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockREPLMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockREPL)(nil).Wait))
}
