// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/worker/changestream/eventmultiplexer (interfaces: Stream)

// Package eventmultiplexer is a generated GoMock package.
package eventmultiplexer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	changestream "github.com/juju/juju/core/changestream"
)

// MockStream is a mock of Stream interface.
type MockStream struct {
	ctrl     *gomock.Controller
	recorder *MockStreamMockRecorder
}

// MockStreamMockRecorder is the mock recorder for MockStream.
type MockStreamMockRecorder struct {
	mock *MockStream
}

// NewMockStream creates a new mock instance.
func NewMockStream(ctrl *gomock.Controller) *MockStream {
	mock := &MockStream{ctrl: ctrl}
	mock.recorder = &MockStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStream) EXPECT() *MockStreamMockRecorder {
	return m.recorder
}

// Terms mocks base method.
func (m *MockStream) Terms() <-chan changestream.Term {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Terms")
	ret0, _ := ret[0].(<-chan changestream.Term)
	return ret0
}

// Terms indicates an expected call of Terms.
func (mr *MockStreamMockRecorder) Terms() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Terms", reflect.TypeOf((*MockStream)(nil).Terms))
}
