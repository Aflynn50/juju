// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/core/changestream (interfaces: ChangeEvent,Term)

// Package eventmultiplexer is a generated GoMock package.
package eventmultiplexer

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	changestream "github.com/juju/juju/core/changestream"
)

// MockChangeEvent is a mock of ChangeEvent interface.
type MockChangeEvent struct {
	ctrl     *gomock.Controller
	recorder *MockChangeEventMockRecorder
}

// MockChangeEventMockRecorder is the mock recorder for MockChangeEvent.
type MockChangeEventMockRecorder struct {
	mock *MockChangeEvent
}

// NewMockChangeEvent creates a new mock instance.
func NewMockChangeEvent(ctrl *gomock.Controller) *MockChangeEvent {
	mock := &MockChangeEvent{ctrl: ctrl}
	mock.recorder = &MockChangeEventMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockChangeEvent) EXPECT() *MockChangeEventMockRecorder {
	return m.recorder
}

// ChangedUUID mocks base method.
func (m *MockChangeEvent) ChangedUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChangedUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ChangedUUID indicates an expected call of ChangedUUID.
func (mr *MockChangeEventMockRecorder) ChangedUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChangedUUID", reflect.TypeOf((*MockChangeEvent)(nil).ChangedUUID))
}

// Namespace mocks base method.
func (m *MockChangeEvent) Namespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// Namespace indicates an expected call of Namespace.
func (mr *MockChangeEventMockRecorder) Namespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockChangeEvent)(nil).Namespace))
}

// Type mocks base method.
func (m *MockChangeEvent) Type() changestream.ChangeType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(changestream.ChangeType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockChangeEventMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockChangeEvent)(nil).Type))
}

// MockTerm is a mock of Term interface.
type MockTerm struct {
	ctrl     *gomock.Controller
	recorder *MockTermMockRecorder
}

// MockTermMockRecorder is the mock recorder for MockTerm.
type MockTermMockRecorder struct {
	mock *MockTerm
}

// NewMockTerm creates a new mock instance.
func NewMockTerm(ctrl *gomock.Controller) *MockTerm {
	mock := &MockTerm{ctrl: ctrl}
	mock.recorder = &MockTermMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTerm) EXPECT() *MockTermMockRecorder {
	return m.recorder
}

// Changes mocks base method.
func (m *MockTerm) Changes() []changestream.ChangeEvent {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Changes")
	ret0, _ := ret[0].([]changestream.ChangeEvent)
	return ret0
}

// Changes indicates an expected call of Changes.
func (mr *MockTermMockRecorder) Changes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Changes", reflect.TypeOf((*MockTerm)(nil).Changes))
}

// Done mocks base method.
func (m *MockTerm) Done() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Done")
}

// Done indicates an expected call of Done.
func (mr *MockTermMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockTerm)(nil).Done))
}
