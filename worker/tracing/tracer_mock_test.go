// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/worker/tracing (interfaces: TrackedTracer)

// Package tracing is a generated GoMock package.
package tracing

import (
	context "context"
	reflect "reflect"

	tracing "github.com/juju/juju/core/tracing"
	gomock "go.uber.org/mock/gomock"
)

// MockTrackedTracer is a mock of TrackedTracer interface.
type MockTrackedTracer struct {
	ctrl     *gomock.Controller
	recorder *MockTrackedTracerMockRecorder
}

// MockTrackedTracerMockRecorder is the mock recorder for MockTrackedTracer.
type MockTrackedTracerMockRecorder struct {
	mock *MockTrackedTracer
}

// NewMockTrackedTracer creates a new mock instance.
func NewMockTrackedTracer(ctrl *gomock.Controller) *MockTrackedTracer {
	mock := &MockTrackedTracer{ctrl: ctrl}
	mock.recorder = &MockTrackedTracerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrackedTracer) EXPECT() *MockTrackedTracerMockRecorder {
	return m.recorder
}

// Kill mocks base method.
func (m *MockTrackedTracer) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockTrackedTracerMockRecorder) Kill() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockTrackedTracer)(nil).Kill))
}

// Start mocks base method.
func (m *MockTrackedTracer) Start(arg0 context.Context, arg1 string, arg2 ...tracing.Option) (context.Context, tracing.Span) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Start", varargs...)
	ret0, _ := ret[0].(context.Context)
	ret1, _ := ret[1].(tracing.Span)
	return ret0, ret1
}

// Start indicates an expected call of Start.
func (mr *MockTrackedTracerMockRecorder) Start(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockTrackedTracer)(nil).Start), varargs...)
}

// Wait mocks base method.
func (m *MockTrackedTracer) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockTrackedTracerMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockTrackedTracer)(nil).Wait))
}
