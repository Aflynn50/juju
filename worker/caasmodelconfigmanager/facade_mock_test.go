// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/worker/caasmodelconfigmanager (interfaces: Facade,CAASBroker)

// Package caasmodelconfigmanager_test is a generated GoMock package.
package caasmodelconfigmanager_test

import (
	reflect "reflect"

	controller "github.com/juju/juju/controller"
	docker "github.com/juju/juju/docker"
	gomock "go.uber.org/mock/gomock"
)

// MockFacade is a mock of Facade interface.
type MockFacade struct {
	ctrl     *gomock.Controller
	recorder *MockFacadeMockRecorder
}

// MockFacadeMockRecorder is the mock recorder for MockFacade.
type MockFacadeMockRecorder struct {
	mock *MockFacade
}

// NewMockFacade creates a new mock instance.
func NewMockFacade(ctrl *gomock.Controller) *MockFacade {
	mock := &MockFacade{ctrl: ctrl}
	mock.recorder = &MockFacadeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFacade) EXPECT() *MockFacadeMockRecorder {
	return m.recorder
}

// ControllerConfig mocks base method.
func (m *MockFacade) ControllerConfig() (controller.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ControllerConfig")
	ret0, _ := ret[0].(controller.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ControllerConfig indicates an expected call of ControllerConfig.
func (mr *MockFacadeMockRecorder) ControllerConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ControllerConfig", reflect.TypeOf((*MockFacade)(nil).ControllerConfig))
}

// MockCAASBroker is a mock of CAASBroker interface.
type MockCAASBroker struct {
	ctrl     *gomock.Controller
	recorder *MockCAASBrokerMockRecorder
}

// MockCAASBrokerMockRecorder is the mock recorder for MockCAASBroker.
type MockCAASBrokerMockRecorder struct {
	mock *MockCAASBroker
}

// NewMockCAASBroker creates a new mock instance.
func NewMockCAASBroker(ctrl *gomock.Controller) *MockCAASBroker {
	mock := &MockCAASBroker{ctrl: ctrl}
	mock.recorder = &MockCAASBrokerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCAASBroker) EXPECT() *MockCAASBrokerMockRecorder {
	return m.recorder
}

// EnsureImageRepoSecret mocks base method.
func (m *MockCAASBroker) EnsureImageRepoSecret(arg0 docker.ImageRepoDetails) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureImageRepoSecret", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EnsureImageRepoSecret indicates an expected call of EnsureImageRepoSecret.
func (mr *MockCAASBrokerMockRecorder) EnsureImageRepoSecret(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureImageRepoSecret", reflect.TypeOf((*MockCAASBroker)(nil).EnsureImageRepoSecret), arg0)
}
