// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/worker/objectstore (interfaces: TrackedObjectStore)

// Package objectstore is a generated GoMock package.
package objectstore

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTrackedObjectStore is a mock of TrackedObjectStore interface.
type MockTrackedObjectStore struct {
	ctrl     *gomock.Controller
	recorder *MockTrackedObjectStoreMockRecorder
}

// MockTrackedObjectStoreMockRecorder is the mock recorder for MockTrackedObjectStore.
type MockTrackedObjectStoreMockRecorder struct {
	mock *MockTrackedObjectStore
}

// NewMockTrackedObjectStore creates a new mock instance.
func NewMockTrackedObjectStore(ctrl *gomock.Controller) *MockTrackedObjectStore {
	mock := &MockTrackedObjectStore{ctrl: ctrl}
	mock.recorder = &MockTrackedObjectStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrackedObjectStore) EXPECT() *MockTrackedObjectStoreMockRecorder {
	return m.recorder
}

// Kill mocks base method.
func (m *MockTrackedObjectStore) Kill() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Kill")
}

// Kill indicates an expected call of Kill.
func (mr *MockTrackedObjectStoreMockRecorder) Kill() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kill", reflect.TypeOf((*MockTrackedObjectStore)(nil).Kill))
}

// Wait mocks base method.
func (m *MockTrackedObjectStore) Wait() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Wait")
	ret0, _ := ret[0].(error)
	return ret0
}

// Wait indicates an expected call of Wait.
func (mr *MockTrackedObjectStoreMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockTrackedObjectStore)(nil).Wait))
}
