// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/worker/apiaddressupdater (interfaces: APIAddresser)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	network "github.com/juju/juju/core/network"
	watcher "github.com/juju/juju/core/watcher"
	gomock "go.uber.org/mock/gomock"
)

// MockAPIAddresser is a mock of APIAddresser interface.
type MockAPIAddresser struct {
	ctrl     *gomock.Controller
	recorder *MockAPIAddresserMockRecorder
}

// MockAPIAddresserMockRecorder is the mock recorder for MockAPIAddresser.
type MockAPIAddresserMockRecorder struct {
	mock *MockAPIAddresser
}

// NewMockAPIAddresser creates a new mock instance.
func NewMockAPIAddresser(ctrl *gomock.Controller) *MockAPIAddresser {
	mock := &MockAPIAddresser{ctrl: ctrl}
	mock.recorder = &MockAPIAddresserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIAddresser) EXPECT() *MockAPIAddresserMockRecorder {
	return m.recorder
}

// APIHostPorts mocks base method.
func (m *MockAPIAddresser) APIHostPorts() ([]network.ProviderHostPorts, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "APIHostPorts")
	ret0, _ := ret[0].([]network.ProviderHostPorts)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// APIHostPorts indicates an expected call of APIHostPorts.
func (mr *MockAPIAddresserMockRecorder) APIHostPorts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "APIHostPorts", reflect.TypeOf((*MockAPIAddresser)(nil).APIHostPorts))
}

// WatchAPIHostPorts mocks base method.
func (m *MockAPIAddresser) WatchAPIHostPorts() (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchAPIHostPorts")
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchAPIHostPorts indicates an expected call of WatchAPIHostPorts.
func (mr *MockAPIAddresserMockRecorder) WatchAPIHostPorts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchAPIHostPorts", reflect.TypeOf((*MockAPIAddresser)(nil).WatchAPIHostPorts))
}
