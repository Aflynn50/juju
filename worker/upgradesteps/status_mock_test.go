// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/juju/juju/worker/upgradesteps (interfaces: StatusSetter,UpgradeService)

// Package upgradesteps is a generated GoMock package.
package upgradesteps

import (
	context "context"
	reflect "reflect"

	status "github.com/juju/juju/core/status"
	upgrade "github.com/juju/juju/core/upgrade"
	watcher "github.com/juju/juju/core/watcher"
	upgrade0 "github.com/juju/juju/domain/upgrade"
	gomock "go.uber.org/mock/gomock"
)

// MockStatusSetter is a mock of StatusSetter interface.
type MockStatusSetter struct {
	ctrl     *gomock.Controller
	recorder *MockStatusSetterMockRecorder
}

// MockStatusSetterMockRecorder is the mock recorder for MockStatusSetter.
type MockStatusSetterMockRecorder struct {
	mock *MockStatusSetter
}

// NewMockStatusSetter creates a new mock instance.
func NewMockStatusSetter(ctrl *gomock.Controller) *MockStatusSetter {
	mock := &MockStatusSetter{ctrl: ctrl}
	mock.recorder = &MockStatusSetterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatusSetter) EXPECT() *MockStatusSetterMockRecorder {
	return m.recorder
}

// SetStatus mocks base method.
func (m *MockStatusSetter) SetStatus(arg0 status.Status, arg1 string, arg2 map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockStatusSetterMockRecorder) SetStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockStatusSetter)(nil).SetStatus), arg0, arg1, arg2)
}

// MockUpgradeService is a mock of UpgradeService interface.
type MockUpgradeService struct {
	ctrl     *gomock.Controller
	recorder *MockUpgradeServiceMockRecorder
}

// MockUpgradeServiceMockRecorder is the mock recorder for MockUpgradeService.
type MockUpgradeServiceMockRecorder struct {
	mock *MockUpgradeService
}

// NewMockUpgradeService creates a new mock instance.
func NewMockUpgradeService(ctrl *gomock.Controller) *MockUpgradeService {
	mock := &MockUpgradeService{ctrl: ctrl}
	mock.recorder = &MockUpgradeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpgradeService) EXPECT() *MockUpgradeServiceMockRecorder {
	return m.recorder
}

// ActiveUpgrade mocks base method.
func (m *MockUpgradeService) ActiveUpgrade(arg0 context.Context) (upgrade0.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ActiveUpgrade", arg0)
	ret0, _ := ret[0].(upgrade0.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ActiveUpgrade indicates an expected call of ActiveUpgrade.
func (mr *MockUpgradeServiceMockRecorder) ActiveUpgrade(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ActiveUpgrade", reflect.TypeOf((*MockUpgradeService)(nil).ActiveUpgrade), arg0)
}

// SetControllerDone mocks base method.
func (m *MockUpgradeService) SetControllerDone(arg0 context.Context, arg1 upgrade0.UUID, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetControllerDone", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetControllerDone indicates an expected call of SetControllerDone.
func (mr *MockUpgradeServiceMockRecorder) SetControllerDone(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetControllerDone", reflect.TypeOf((*MockUpgradeService)(nil).SetControllerDone), arg0, arg1, arg2)
}

// UpgradeInfo mocks base method.
func (m *MockUpgradeService) UpgradeInfo(arg0 context.Context, arg1 upgrade0.UUID) (upgrade.Info, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpgradeInfo", arg0, arg1)
	ret0, _ := ret[0].(upgrade.Info)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpgradeInfo indicates an expected call of UpgradeInfo.
func (mr *MockUpgradeServiceMockRecorder) UpgradeInfo(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpgradeInfo", reflect.TypeOf((*MockUpgradeService)(nil).UpgradeInfo), arg0, arg1)
}

// WatchForUpgradeState mocks base method.
func (m *MockUpgradeService) WatchForUpgradeState(arg0 context.Context, arg1 upgrade0.UUID, arg2 upgrade.State) (watcher.Watcher[struct{}], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchForUpgradeState", arg0, arg1, arg2)
	ret0, _ := ret[0].(watcher.Watcher[struct{}])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchForUpgradeState indicates an expected call of WatchForUpgradeState.
func (mr *MockUpgradeServiceMockRecorder) WatchForUpgradeState(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchForUpgradeState", reflect.TypeOf((*MockUpgradeService)(nil).WatchForUpgradeState), arg0, arg1, arg2)
}
